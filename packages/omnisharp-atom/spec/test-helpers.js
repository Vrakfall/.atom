"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setupFeature = setupFeature;
exports.restoreBuffers = restoreBuffers;
exports.openEditor = openEditor;

var _solutionManager = require("../lib/server/solution-manager");

var _rxjs = require("rxjs");

var _omnisharpClient = require("omnisharp-client");

function setupFeature(features) {
    var unitTestMode = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    var cd = void 0;
    beforeEach(function () {
        cd = new _omnisharpClient.CompositeDisposable();
        _solutionManager.SolutionManager._unitTestMode_ = unitTestMode;
        _solutionManager.SolutionManager._kick_in_the_pants_ = true;
        atom.config.set("omnisharp-atom:feature-white-list", true);
        atom.config.set("omnisharp-atom:feature-list", features);
        return atom.packages.activatePackage("language-csharp").then(function () {
            return atom.packages.activatePackage("omnisharp-atom");
        }).then(function (pack) {
            return pack.mainModule._activated.delay(200).toPromise();
        });
    });
    afterEach(function () {
        atom.packages.deactivatePackage("omnisharp-atom");
        atom.packages.deactivatePackage("language-csharp");
        atom.config.set("omnisharp-atom:feature-white-list", undefined);
        atom.config.set("omnisharp-atom:feature-list", undefined);
        _solutionManager.SolutionManager._unitTestMode_ = false;
        _solutionManager.SolutionManager._kick_in_the_pants_ = false;
        cd.dispose();
    });
}
function restoreBuffers() {
    return _omnisharpClient.Disposable.empty;
}
function openEditor(file) {
    return _rxjs.Observable.fromPromise(atom.workspace.open(file)).flatMap(function (editor) {
        return _solutionManager.SolutionManager.getSolutionForEditor(editor).map(function (solution) {
            return { editor: editor, solution: solution };
        });
    }).flatMap(function (_ref) {
        var editor = _ref.editor;
        var solution = _ref.solution;
        return solution.state.startWith(solution.currentState).map(function (state) {
            return { editor: editor, solution: solution, state: state };
        });
    }).filter(function (z) {
        return z.state === _omnisharpClient.DriverState.Connected;
    }).take(1).delay(350);
}
//# sourceMappingURL=data:application/json;base64,
