"use strict";

var _chai = require("chai");

var _omnisharpClient = require("omnisharp-client");

var _testHelpers = require("../test-helpers");

var _rxjs = require("rxjs");

var a = require("atom");
var Range = a.Range;
describe("Rename", function () {
    (0, _testHelpers.setupFeature)(["features/rename"]);
    it("adds commands", function () {
        var disposable = new _omnisharpClient.CompositeDisposable();
        var commands = atom.commands;
        (0, _chai.expect)(commands.registeredCommands["omnisharp-atom:rename"]).to.be.true;
        disposable.dispose();
    });
    it("should select rename text appropriately with selection", function () {
        (0, _testHelpers.openEditor)("simple/rename/ClassToRename.cs").subscribe(function (_ref) {
            var editor = _ref.editor;

            editor.setSelectedBufferRange(new Range([4, 16], [4, 22]));
            atom.commands.dispatch(atom.views.getView(editor), "omnisharp-atom:rename");
        });
        function checkPanel() {
            var panels = atom.workspace.getTopPanels();
            if (panels.length) {
                var panel = panels[0].item;
                (0, _chai.expect)(panel.miniEditor.getText()).to.be.eql("Method");
            } else {
                return _rxjs.Observable.timer(100).toPromise().then(function () {
                    return checkPanel();
                });
            }
        }
        return checkPanel();
    });
    it("should select rename text appropriately with cursor", function () {
        (0, _testHelpers.openEditor)("simple/rename/ClassToRename.cs").subscribe(function (_ref2) {
            var editor = _ref2.editor;

            editor.setCursorBufferPosition([4, 18]);
            atom.commands.dispatch(atom.views.getView(editor), "omnisharp-atom:rename");
        });
        function checkPanel() {
            var panels = atom.workspace.getTopPanels();
            if (panels.length) {
                var panel = panels[0].item;
                (0, _chai.expect)(panel.miniEditor.getText()).to.be.eql("Method");
            } else {
                return _rxjs.Observable.timer(100).toPromise().then(function () {
                    return checkPanel();
                });
            }
        }
        return checkPanel();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvZmVhdHVyZXMvcmVuYW1lLXNwZWMuanMiLCJzcGVjL2ZlYXR1cmVzL3JlbmFtZS1zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FDR0EsSUFBTSxJQUFJLFFBQVEsTUFBUixDQUFWO0FBRUEsSUFBTSxRQUFpQyxFQUFFLEtBQXpDO0FBR0EsU0FBUyxRQUFULEVBQW1CLFlBQUE7QUFDZixtQ0FBYSxDQUFDLGlCQUFELENBQWI7QUFFQSxPQUFHLGVBQUgsRUFBb0IsWUFBQTtBQUNoQixZQUFNLGFBQWEsMENBQW5CO0FBQ0EsWUFBTSxXQUFnQixLQUFLLFFBQTNCO0FBRUEsMEJBQU8sU0FBUyxrQkFBVCxDQUE0Qix1QkFBNUIsQ0FBUCxFQUE2RCxFQUE3RCxDQUFnRSxFQUFoRSxDQUFtRSxJQUFuRTtBQUNBLG1CQUFXLE9BQVg7QUFDSCxLQU5EO0FBUUEsT0FBRyx3REFBSCxFQUE2RCxZQUFBO0FBQ3pELHFDQUFXLGdDQUFYLEVBQ0ssU0FETCxDQUNlLGdCQUFTO0FBQUEsZ0JBQVAsTUFBTyxRQUFQLE1BQU87O0FBQ2hCLG1CQUFPLHNCQUFQLENBQW1DLElBQUksS0FBSixDQUFVLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FBVixFQUFtQixDQUFDLENBQUQsRUFBSSxFQUFKLENBQW5CLENBQW5DO0FBQ0EsaUJBQUssUUFBTCxDQUFjLFFBQWQsQ0FBdUIsS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixNQUFuQixDQUF2QixFQUFtRCx1QkFBbkQ7QUFDSCxTQUpMO0FBTUEsaUJBQUEsVUFBQSxHQUFBO0FBQ0ksZ0JBQU0sU0FBUyxLQUFLLFNBQUwsQ0FBZSxZQUFmLEVBQWY7QUFDQSxnQkFBSSxPQUFPLE1BQVgsRUFBbUI7QUFDZixvQkFBTSxRQUFvQixPQUFPLENBQVAsRUFBVSxJQUFwQztBQUNBLGtDQUFPLE1BQU0sVUFBTixDQUFpQixPQUFqQixFQUFQLEVBQW1DLEVBQW5DLENBQXNDLEVBQXRDLENBQXlDLEdBQXpDLENBQTZDLFFBQTdDO0FBQ0gsYUFIRCxNQUdPO0FBQ0gsdUJBQU8saUJBQVcsS0FBWCxDQUFpQixHQUFqQixFQUFzQixTQUF0QixHQUFrQyxJQUFsQyxDQUF1QztBQUFBLDJCQUFNLFlBQU47QUFBQSxpQkFBdkMsQ0FBUDtBQUNIO0FBQ0o7QUFDRCxlQUFPLFlBQVA7QUFDSCxLQWpCRDtBQW1CQSxPQUFHLHFEQUFILEVBQTBELFlBQUE7QUFDdEQscUNBQVcsZ0NBQVgsRUFDSyxTQURMLENBQ2UsaUJBQVM7QUFBQSxnQkFBUCxNQUFPLFNBQVAsTUFBTzs7QUFDaEIsbUJBQU8sdUJBQVAsQ0FBK0IsQ0FBQyxDQUFELEVBQUksRUFBSixDQUEvQjtBQUNBLGlCQUFLLFFBQUwsQ0FBYyxRQUFkLENBQXVCLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsTUFBbkIsQ0FBdkIsRUFBbUQsdUJBQW5EO0FBQ0gsU0FKTDtBQU1BLGlCQUFBLFVBQUEsR0FBQTtBQUNJLGdCQUFNLFNBQVMsS0FBSyxTQUFMLENBQWUsWUFBZixFQUFmO0FBQ0EsZ0JBQUksT0FBTyxNQUFYLEVBQW1CO0FBQ2Ysb0JBQU0sUUFBb0IsT0FBTyxDQUFQLEVBQVUsSUFBcEM7QUFDQSxrQ0FBTyxNQUFNLFVBQU4sQ0FBaUIsT0FBakIsRUFBUCxFQUFtQyxFQUFuQyxDQUFzQyxFQUF0QyxDQUF5QyxHQUF6QyxDQUE2QyxRQUE3QztBQUNILGFBSEQsTUFHTztBQUNILHVCQUFPLGlCQUFXLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsU0FBdEIsR0FBa0MsSUFBbEMsQ0FBdUM7QUFBQSwyQkFBTSxZQUFOO0FBQUEsaUJBQXZDLENBQVA7QUFDSDtBQUNKO0FBQ0QsZUFBTyxZQUFQO0FBQ0gsS0FqQkQ7QUFtQkgsQ0FqREQiLCJmaWxlIjoic3BlYy9mZWF0dXJlcy9yZW5hbWUtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSBcIm9tbmlzaGFycC1jbGllbnRcIjtcbmltcG9ydCB7IHNldHVwRmVhdHVyZSwgb3BlbkVkaXRvciB9IGZyb20gXCIuLi90ZXN0LWhlbHBlcnNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuY29uc3QgYSA9IHJlcXVpcmUoXCJhdG9tXCIpO1xuY29uc3QgUmFuZ2UgPSBhLlJhbmdlO1xuZGVzY3JpYmUoXCJSZW5hbWVcIiwgKCkgPT4ge1xuICAgIHNldHVwRmVhdHVyZShbXCJmZWF0dXJlcy9yZW5hbWVcIl0pO1xuICAgIGl0KFwiYWRkcyBjb21tYW5kc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgICBjb25zdCBjb21tYW5kcyA9IGF0b20uY29tbWFuZHM7XG4gICAgICAgIGV4cGVjdChjb21tYW5kcy5yZWdpc3RlcmVkQ29tbWFuZHNbXCJvbW5pc2hhcnAtYXRvbTpyZW5hbWVcIl0pLnRvLmJlLnRydWU7XG4gICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgIH0pO1xuICAgIGl0KFwic2hvdWxkIHNlbGVjdCByZW5hbWUgdGV4dCBhcHByb3ByaWF0ZWx5IHdpdGggc2VsZWN0aW9uXCIsICgpID0+IHtcbiAgICAgICAgb3BlbkVkaXRvcihcInNpbXBsZS9yZW5hbWUvQ2xhc3NUb1JlbmFtZS5jc1wiKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoeyBlZGl0b3IgfSkgPT4ge1xuICAgICAgICAgICAgZWRpdG9yLnNldFNlbGVjdGVkQnVmZmVyUmFuZ2UobmV3IFJhbmdlKFs0LCAxNl0sIFs0LCAyMl0pKTtcbiAgICAgICAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvciksIFwib21uaXNoYXJwLWF0b206cmVuYW1lXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQYW5lbCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhbmVscyA9IGF0b20ud29ya3NwYWNlLmdldFRvcFBhbmVscygpO1xuICAgICAgICAgICAgaWYgKHBhbmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHBhbmVsc1swXS5pdGVtO1xuICAgICAgICAgICAgICAgIGV4cGVjdChwYW5lbC5taW5pRWRpdG9yLmdldFRleHQoKSkudG8uYmUuZXFsKFwiTWV0aG9kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGltZXIoMTAwKS50b1Byb21pc2UoKS50aGVuKCgpID0+IGNoZWNrUGFuZWwoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrUGFuZWwoKTtcbiAgICB9KTtcbiAgICBpdChcInNob3VsZCBzZWxlY3QgcmVuYW1lIHRleHQgYXBwcm9wcmlhdGVseSB3aXRoIGN1cnNvclwiLCAoKSA9PiB7XG4gICAgICAgIG9wZW5FZGl0b3IoXCJzaW1wbGUvcmVuYW1lL0NsYXNzVG9SZW5hbWUuY3NcIilcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHsgZWRpdG9yIH0pID0+IHtcbiAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihbNCwgMThdKTtcbiAgICAgICAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvciksIFwib21uaXNoYXJwLWF0b206cmVuYW1lXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQYW5lbCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhbmVscyA9IGF0b20ud29ya3NwYWNlLmdldFRvcFBhbmVscygpO1xuICAgICAgICAgICAgaWYgKHBhbmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHBhbmVsc1swXS5pdGVtO1xuICAgICAgICAgICAgICAgIGV4cGVjdChwYW5lbC5taW5pRWRpdG9yLmdldFRleHQoKSkudG8uYmUuZXFsKFwiTWV0aG9kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGltZXIoMTAwKS50b1Byb21pc2UoKS50aGVuKCgpID0+IGNoZWNrUGFuZWwoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrUGFuZWwoKTtcbiAgICB9KTtcbn0pO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3RzZC5kLnRzXCIgLz5cbmltcG9ydCB7ZXhwZWN0fSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuaW1wb3J0IHtzZXR1cEZlYXR1cmUsIG9wZW5FZGl0b3J9IGZyb20gXCIuLi90ZXN0LWhlbHBlcnNcIjtcbmltcG9ydCB7UmVuYW1lVmlld30gZnJvbSBcIi4uLy4uL2xpYi92aWV3cy9yZW5hbWUtdmlld1wiO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xuY29uc3QgYSA9IHJlcXVpcmUoXCJhdG9tXCIpO1xuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xuY29uc3QgUmFuZ2U6IHR5cGVvZiBUZXh0QnVmZmVyLlJhbmdlID0gYS5SYW5nZTtcbi8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xuXG5kZXNjcmliZShcIlJlbmFtZVwiLCAoKSA9PiB7XG4gICAgc2V0dXBGZWF0dXJlKFtcImZlYXR1cmVzL3JlbmFtZVwiXSk7XG5cbiAgICBpdChcImFkZHMgY29tbWFuZHNcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICAgICAgY29uc3QgY29tbWFuZHM6IGFueSA9IGF0b20uY29tbWFuZHM7XG5cbiAgICAgICAgZXhwZWN0KGNvbW1hbmRzLnJlZ2lzdGVyZWRDb21tYW5kc1tcIm9tbmlzaGFycC1hdG9tOnJlbmFtZVwiXSkudG8uYmUudHJ1ZTtcbiAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBzZWxlY3QgcmVuYW1lIHRleHQgYXBwcm9wcmlhdGVseSB3aXRoIHNlbGVjdGlvblwiLCAoKSA9PiB7XG4gICAgICAgIG9wZW5FZGl0b3IoXCJzaW1wbGUvcmVuYW1lL0NsYXNzVG9SZW5hbWUuY3NcIilcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHtlZGl0b3J9KSA9PiB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldFNlbGVjdGVkQnVmZmVyUmFuZ2UoPGFueT5uZXcgUmFuZ2UoWzQsIDE2XSwgWzQsIDIyXSkpO1xuICAgICAgICAgICAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvciksIFwib21uaXNoYXJwLWF0b206cmVuYW1lXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQYW5lbCgpOiBhbnkge1xuICAgICAgICAgICAgY29uc3QgcGFuZWxzID0gYXRvbS53b3Jrc3BhY2UuZ2V0VG9wUGFuZWxzKCk7XG4gICAgICAgICAgICBpZiAocGFuZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsOiBSZW5hbWVWaWV3ID0gcGFuZWxzWzBdLml0ZW07XG4gICAgICAgICAgICAgICAgZXhwZWN0KHBhbmVsLm1pbmlFZGl0b3IuZ2V0VGV4dCgpKS50by5iZS5lcWwoXCJNZXRob2RcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRpbWVyKDEwMCkudG9Qcm9taXNlKCkudGhlbigoKSA9PiBjaGVja1BhbmVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVja1BhbmVsKCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBzZWxlY3QgcmVuYW1lIHRleHQgYXBwcm9wcmlhdGVseSB3aXRoIGN1cnNvclwiLCAoKSA9PiB7XG4gICAgICAgIG9wZW5FZGl0b3IoXCJzaW1wbGUvcmVuYW1lL0NsYXNzVG9SZW5hbWUuY3NcIilcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHtlZGl0b3J9KSA9PiB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFs0LCAxOF0pO1xuICAgICAgICAgICAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvciksIFwib21uaXNoYXJwLWF0b206cmVuYW1lXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQYW5lbCgpOiBhbnkge1xuICAgICAgICAgICAgY29uc3QgcGFuZWxzID0gYXRvbS53b3Jrc3BhY2UuZ2V0VG9wUGFuZWxzKCk7XG4gICAgICAgICAgICBpZiAocGFuZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsOiBSZW5hbWVWaWV3ID0gcGFuZWxzWzBdLml0ZW07XG4gICAgICAgICAgICAgICAgZXhwZWN0KHBhbmVsLm1pbmlFZGl0b3IuZ2V0VGV4dCgpKS50by5iZS5lcWwoXCJNZXRob2RcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRpbWVyKDEwMCkudG9Qcm9taXNlKCkudGhlbigoKSA9PiBjaGVja1BhbmVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVja1BhbmVsKCk7XG4gICAgfSk7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
