"use strict";

var _chai = require("chai");

var _omni = require("../../lib/server/omni");

var _omnisharpClient = require("omnisharp-client");

var _testHelpers = require("../test-helpers");

var _codeFormat = require("../../lib/features/code-format");

describe("Code Format", function () {
    (0, _testHelpers.setupFeature)(["features/code-format"]);
    it("adds commands", function () {
        var disposable = new _omnisharpClient.CompositeDisposable();
        var commands = atom.commands;
        (0, _chai.expect)(commands.registeredCommands["omnisharp-atom:code-format"]).to.be.true;
        disposable.dispose();
    });
    it("formats code", function () {
        var d = (0, _testHelpers.restoreBuffers)();
        var disposable = new _omnisharpClient.CompositeDisposable();
        disposable.add(d);
        var tries = 5;
        return atom.workspace.open("simple/code-format/UnformattedClass.cs").then(function (editor) {
            return execute(editor);
        });
        function execute(editor) {
            var promise = _omni.Omni.listener.formatRange.take(1).toPromise().then(function (_ref) {
                var request = _ref.request;

                (0, _chai.expect)(editor.getPath()).to.be.eql(request.FileName);
                var expected = "public class UnformattedClass{    public const int TheAnswer = 42;}";
                var result = editor.getText().replace(/\r|\n/g, "");
                try {
                    (0, _chai.expect)(result).to.contain(expected);
                    tries = 0;
                } catch (e) {
                    if (tries > 0) {
                        return execute(editor);
                    } else {
                        tries = -1;
                        throw e;
                    }
                } finally {
                    if (tries === -1) {
                        disposable.dispose();
                        throw new Error("Failed!");
                    } else if (tries === 0) {
                        disposable.dispose();
                    }
                    tries--;
                }
            });
            _codeFormat.codeFormat.format();
            return promise;
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvZmVhdHVyZXMvY29kZS1mb3JtYXQtc3BlYy5qcyIsInNwZWMvZmVhdHVyZXMvY29kZS1mb3JtYXQtc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQ0dBLFNBQVMsYUFBVCxFQUF3QixZQUFBO0FBQ3BCLG1DQUFhLENBQUMsc0JBQUQsQ0FBYjtBQUVBLE9BQUcsZUFBSCxFQUFvQixZQUFBO0FBQ2hCLFlBQU0sYUFBYSwwQ0FBbkI7QUFFQSxZQUFNLFdBQWdCLEtBQUssUUFBM0I7QUFFQSwwQkFBTyxTQUFTLGtCQUFULENBQTRCLDRCQUE1QixDQUFQLEVBQWtFLEVBQWxFLENBQXFFLEVBQXJFLENBQXdFLElBQXhFO0FBRUEsbUJBQVcsT0FBWDtBQUNILEtBUkQ7QUFVQSxPQUFHLGNBQUgsRUFBbUIsWUFBQTtBQUNmLFlBQU0sSUFBSSxrQ0FBVjtBQUNBLFlBQU0sYUFBYSwwQ0FBbkI7QUFDQSxtQkFBVyxHQUFYLENBQWUsQ0FBZjtBQUVBLFlBQUksUUFBUSxDQUFaO0FBQ0EsZUFBTyxLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLHdDQUFwQixFQUNGLElBREUsQ0FDRyxVQUFDLE1BQUQsRUFBTztBQUNULG1CQUFPLFFBQVEsTUFBUixDQUFQO0FBQ0gsU0FIRSxDQUFQO0FBS0EsaUJBQUEsT0FBQSxDQUFpQixNQUFqQixFQUF3QztBQUNwQyxnQkFBTSxVQUFVLFdBQUssUUFBTCxDQUFjLFdBQWQsQ0FDWCxJQURXLENBQ04sQ0FETSxFQUVYLFNBRlcsR0FHWCxJQUhXLENBR04sZ0JBQVU7QUFBQSxvQkFBUixPQUFRLFFBQVIsT0FBUTs7QUFDWixrQ0FBTyxPQUFPLE9BQVAsRUFBUCxFQUF5QixFQUF6QixDQUE0QixFQUE1QixDQUErQixHQUEvQixDQUFtQyxRQUFRLFFBQTNDO0FBQ0Esb0JBQU0sZ0ZBQU47QUFDQSxvQkFBTSxTQUFTLE9BQU8sT0FBUCxHQUFpQixPQUFqQixDQUF5QixRQUF6QixFQUFtQyxFQUFuQyxDQUFmO0FBQ0Esb0JBQUk7QUFDQSxzQ0FBTyxNQUFQLEVBQWUsRUFBZixDQUFrQixPQUFsQixDQUEwQixRQUExQjtBQUNBLDRCQUFRLENBQVI7QUFDRixpQkFIRixDQUdFLE9BQU8sQ0FBUCxFQUFVO0FBQ1Isd0JBQUksUUFBUSxDQUFaLEVBQWU7QUFDWCwrQkFBTyxRQUFRLE1BQVIsQ0FBUDtBQUNILHFCQUZELE1BRU87QUFDSCxnQ0FBUSxDQUFDLENBQVQ7QUFDQSw4QkFBTSxDQUFOO0FBQ0g7QUFDSixpQkFWRCxTQVVVO0FBQ04sd0JBQUksVUFBVSxDQUFDLENBQWYsRUFBa0I7QUFDZCxtQ0FBVyxPQUFYO0FBQ0EsOEJBQU0sSUFBSSxLQUFKLENBQVUsU0FBVixDQUFOO0FBQ0gscUJBSEQsTUFHTyxJQUFJLFVBQVUsQ0FBZCxFQUFpQjtBQUNwQixtQ0FBVyxPQUFYO0FBQ0g7QUFDRDtBQUNIO0FBQ0osYUExQlcsQ0FBaEI7QUEyQkEsbUNBQVcsTUFBWDtBQUNBLG1CQUFPLE9BQVA7QUFDSDtBQUNKLEtBMUNEO0FBMkNILENBeEREIiwiZmlsZSI6InNwZWMvZmVhdHVyZXMvY29kZS1mb3JtYXQtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBPbW5pIH0gZnJvbSBcIi4uLy4uL2xpYi9zZXJ2ZXIvb21uaVwiO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gXCJvbW5pc2hhcnAtY2xpZW50XCI7XG5pbXBvcnQgeyBzZXR1cEZlYXR1cmUsIHJlc3RvcmVCdWZmZXJzIH0gZnJvbSBcIi4uL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgY29kZUZvcm1hdCB9IGZyb20gXCIuLi8uLi9saWIvZmVhdHVyZXMvY29kZS1mb3JtYXRcIjtcbmRlc2NyaWJlKFwiQ29kZSBGb3JtYXRcIiwgKCkgPT4ge1xuICAgIHNldHVwRmVhdHVyZShbXCJmZWF0dXJlcy9jb2RlLWZvcm1hdFwiXSk7XG4gICAgaXQoXCJhZGRzIGNvbW1hbmRzXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRzID0gYXRvbS5jb21tYW5kcztcbiAgICAgICAgZXhwZWN0KGNvbW1hbmRzLnJlZ2lzdGVyZWRDb21tYW5kc1tcIm9tbmlzaGFycC1hdG9tOmNvZGUtZm9ybWF0XCJdKS50by5iZS50cnVlO1xuICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9KTtcbiAgICBpdChcImZvcm1hdHMgY29kZVwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGQgPSByZXN0b3JlQnVmZmVycygpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICAgICAgZGlzcG9zYWJsZS5hZGQoZCk7XG4gICAgICAgIGxldCB0cmllcyA9IDU7XG4gICAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKFwic2ltcGxlL2NvZGUtZm9ybWF0L1VuZm9ybWF0dGVkQ2xhc3MuY3NcIilcbiAgICAgICAgICAgIC50aGVuKChlZGl0b3IpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlKGVkaXRvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKGVkaXRvcikge1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IE9tbmkubGlzdGVuZXIuZm9ybWF0UmFuZ2VcbiAgICAgICAgICAgICAgICAudGFrZSgxKVxuICAgICAgICAgICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgICAgICAgICAgIC50aGVuKCh7IHJlcXVlc3QgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChlZGl0b3IuZ2V0UGF0aCgpKS50by5iZS5lcWwocmVxdWVzdC5GaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBgcHVibGljIGNsYXNzIFVuZm9ybWF0dGVkQ2xhc3N7ICAgIHB1YmxpYyBjb25zdCBpbnQgVGhlQW5zd2VyID0gNDI7fWA7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZWRpdG9yLmdldFRleHQoKS5yZXBsYWNlKC9cXHJ8XFxuL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmNvbnRhaW4oZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICB0cmllcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmllcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleGVjdXRlKGVkaXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmllcyA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWVzID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRyaWVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmllcy0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29kZUZvcm1hdC5mb3JtYXQoKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90c2QuZC50c1wiIC8+XG5pbXBvcnQge2V4cGVjdH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7T21uaX0gZnJvbSBcIi4uLy4uL2xpYi9zZXJ2ZXIvb21uaVwiO1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuaW1wb3J0IHtzZXR1cEZlYXR1cmUsIHJlc3RvcmVCdWZmZXJzfSBmcm9tIFwiLi4vdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQge2NvZGVGb3JtYXR9IGZyb20gXCIuLi8uLi9saWIvZmVhdHVyZXMvY29kZS1mb3JtYXRcIjtcblxuZGVzY3JpYmUoXCJDb2RlIEZvcm1hdFwiLCAoKSA9PiB7XG4gICAgc2V0dXBGZWF0dXJlKFtcImZlYXR1cmVzL2NvZGUtZm9ybWF0XCJdKTtcblxuICAgIGl0KFwiYWRkcyBjb21tYW5kc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuXG4gICAgICAgIGNvbnN0IGNvbW1hbmRzOiBhbnkgPSBhdG9tLmNvbW1hbmRzO1xuXG4gICAgICAgIGV4cGVjdChjb21tYW5kcy5yZWdpc3RlcmVkQ29tbWFuZHNbXCJvbW5pc2hhcnAtYXRvbTpjb2RlLWZvcm1hdFwiXSkudG8uYmUudHJ1ZTtcblxuICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZm9ybWF0cyBjb2RlXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgZCA9IHJlc3RvcmVCdWZmZXJzKCk7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgICBkaXNwb3NhYmxlLmFkZChkKTtcblxuICAgICAgICBsZXQgdHJpZXMgPSA1O1xuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3BlbihcInNpbXBsZS9jb2RlLWZvcm1hdC9VbmZvcm1hdHRlZENsYXNzLmNzXCIpXG4gICAgICAgICAgICAudGhlbigoZWRpdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGUoZWRpdG9yKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGUoZWRpdG9yOiBBdG9tLlRleHRFZGl0b3IpOiBhbnkge1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IE9tbmkubGlzdGVuZXIuZm9ybWF0UmFuZ2VcbiAgICAgICAgICAgICAgICAudGFrZSgxKVxuICAgICAgICAgICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgICAgICAgICAgIC50aGVuKCh7cmVxdWVzdH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGVkaXRvci5nZXRQYXRoKCkpLnRvLmJlLmVxbChyZXF1ZXN0LkZpbGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBgcHVibGljIGNsYXNzIFVuZm9ybWF0dGVkQ2xhc3N7ICAgIHB1YmxpYyBjb25zdCBpbnQgVGhlQW5zd2VyID0gNDI7fWA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVkaXRvci5nZXRUZXh0KCkucmVwbGFjZSgvXFxyfFxcbi9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmNvbnRhaW4oZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGUoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXMgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWVzID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmllcy0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb2RlRm9ybWF0LmZvcm1hdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
