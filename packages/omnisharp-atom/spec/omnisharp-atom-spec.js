"use strict";

var _chai = require("chai");

var _solutionManager = require("../lib/server/solution-manager");

var _omnisharpClient = require("omnisharp-client");

var _rxjs = require("rxjs");

var _testHelpers = require("./test-helpers");

describe("OmniSharp Atom", function () {
    (0, _testHelpers.setupFeature)([]);
    describe("when the package is activated", function () {
        it("connect", function () {
            return _rxjs.Observable.fromPromise(atom.workspace.open("simple/code-lens/CodeLens.cs")).flatMap(function (editor) {
                return _solutionManager.SolutionManager.getSolutionForEditor(editor);
            }).flatMap(function (x) {
                return x.state.startWith(x.currentState);
            }).filter(function (z) {
                return z === _omnisharpClient.DriverState.Connected;
            }).take(1).do(function () {
                (0, _chai.expect)(_solutionManager.SolutionManager.connected).to.be.true;
            }).toPromise();
        });
        xit("connect-simple2", function () {
            return _rxjs.Observable.fromPromise(Promise.all([atom.workspace.open("simple/code-lens/CodeLens.cs"), atom.workspace.open("simple2/project.json")])).flatMap(function (x) {
                return x;
            }).flatMap(function (editor) {
                return _solutionManager.SolutionManager.getSolutionForEditor(editor);
            }).flatMap(function (x) {
                return x.state.startWith(x.currentState);
            }).filter(function (z) {
                return z === _omnisharpClient.DriverState.Connected;
            }).take(1).do(null, null, function () {
                (0, _chai.expect)(_solutionManager.SolutionManager.connected).to.be.true;
                (0, _chai.expect)(_solutionManager.SolutionManager.activeSolutions.length).to.be.eql(2);
            }).toPromise();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvb21uaXNoYXJwLWF0b20tc3BlYy5qcyIsInNwZWMvb21uaXNoYXJwLWF0b20tc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQ0dBLFNBQVMsZ0JBQVQsRUFBMkIsWUFBQTtBQUN2QixtQ0FBYSxFQUFiO0FBRUEsYUFBUywrQkFBVCxFQUEwQyxZQUFBO0FBQ3RDLFdBQUcsU0FBSCxFQUFjLFlBQUE7QUFDVixtQkFBTyxpQkFBVyxXQUFYLENBQTZDLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsOEJBQXBCLENBQTdDLEVBQ0YsT0FERSxDQUNNO0FBQUEsdUJBQVUsaUNBQWdCLG9CQUFoQixDQUFxQyxNQUFyQyxDQUFWO0FBQUEsYUFETixFQUVGLE9BRkUsQ0FFTTtBQUFBLHVCQUFLLEVBQUUsS0FBRixDQUFRLFNBQVIsQ0FBa0IsRUFBRSxZQUFwQixDQUFMO0FBQUEsYUFGTixFQUdGLE1BSEUsQ0FHSztBQUFBLHVCQUFLLE1BQU0sNkJBQVksU0FBdkI7QUFBQSxhQUhMLEVBSUYsSUFKRSxDQUlHLENBSkgsRUFLRixFQUxFLENBS0MsWUFBQTtBQUNBLGtDQUFPLGlDQUFnQixTQUF2QixFQUFrQyxFQUFsQyxDQUFxQyxFQUFyQyxDQUF3QyxJQUF4QztBQUNILGFBUEUsRUFRRixTQVJFLEVBQVA7QUFTSCxTQVZEO0FBWUEsWUFBSSxpQkFBSixFQUF1QixZQUFBO0FBQ25CLG1CQUFPLGlCQUFXLFdBQVgsQ0FDSCxRQUFRLEdBQVIsQ0FBWSxDQUNSLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsOEJBQXBCLENBRFEsRUFFUixLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLHNCQUFwQixDQUZRLENBQVosQ0FERyxFQU1GLE9BTkUsQ0FNTTtBQUFBLHVCQUFLLENBQUw7QUFBQSxhQU5OLEVBT0YsT0FQRSxDQU9NO0FBQUEsdUJBQVUsaUNBQWdCLG9CQUFoQixDQUFxQyxNQUFyQyxDQUFWO0FBQUEsYUFQTixFQVFGLE9BUkUsQ0FRTTtBQUFBLHVCQUFLLEVBQUUsS0FBRixDQUFRLFNBQVIsQ0FBa0IsRUFBRSxZQUFwQixDQUFMO0FBQUEsYUFSTixFQVNGLE1BVEUsQ0FTSztBQUFBLHVCQUFLLE1BQU0sNkJBQVksU0FBdkI7QUFBQSxhQVRMLEVBVUYsSUFWRSxDQVVHLENBVkgsRUFXRixFQVhFLENBV0MsSUFYRCxFQVdPLElBWFAsRUFXYSxZQUFBO0FBQ1osa0NBQU8saUNBQWdCLFNBQXZCLEVBQWtDLEVBQWxDLENBQXFDLEVBQXJDLENBQXdDLElBQXhDO0FBQ0Esa0NBQU8saUNBQWdCLGVBQWhCLENBQWdDLE1BQXZDLEVBQStDLEVBQS9DLENBQWtELEVBQWxELENBQXFELEdBQXJELENBQXlELENBQXpEO0FBQ0gsYUFkRSxFQWVGLFNBZkUsRUFBUDtBQWdCSCxTQWpCRDtBQWtCSCxLQS9CRDtBQWdDSCxDQW5DRCIsImZpbGUiOiJzcGVjL29tbmlzaGFycC1hdG9tLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgU29sdXRpb25NYW5hZ2VyIH0gZnJvbSBcIi4uL2xpYi9zZXJ2ZXIvc29sdXRpb24tbWFuYWdlclwiO1xuaW1wb3J0IHsgRHJpdmVyU3RhdGUgfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBzZXR1cEZlYXR1cmUgfSBmcm9tIFwiLi90ZXN0LWhlbHBlcnNcIjtcbmRlc2NyaWJlKFwiT21uaVNoYXJwIEF0b21cIiwgKCkgPT4ge1xuICAgIHNldHVwRmVhdHVyZShbXSk7XG4gICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBwYWNrYWdlIGlzIGFjdGl2YXRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShhdG9tLndvcmtzcGFjZS5vcGVuKFwic2ltcGxlL2NvZGUtbGVucy9Db2RlTGVucy5jc1wiKSlcbiAgICAgICAgICAgICAgICAuZmxhdE1hcChlZGl0b3IgPT4gU29sdXRpb25NYW5hZ2VyLmdldFNvbHV0aW9uRm9yRWRpdG9yKGVkaXRvcikpXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAoeCA9PiB4LnN0YXRlLnN0YXJ0V2l0aCh4LmN1cnJlbnRTdGF0ZSkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcih6ID0+IHogPT09IERyaXZlclN0YXRlLkNvbm5lY3RlZClcbiAgICAgICAgICAgICAgICAudGFrZSgxKVxuICAgICAgICAgICAgICAgIC5kbygoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KFNvbHV0aW9uTWFuYWdlci5jb25uZWN0ZWQpLnRvLmJlLnRydWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHhpdChcImNvbm5lY3Qtc2ltcGxlMlwiLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihcInNpbXBsZS9jb2RlLWxlbnMvQ29kZUxlbnMuY3NcIiksXG4gICAgICAgICAgICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihcInNpbXBsZTIvcHJvamVjdC5qc29uXCIpXG4gICAgICAgICAgICBdKSlcbiAgICAgICAgICAgICAgICAuZmxhdE1hcCh4ID0+IHgpXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAoZWRpdG9yID0+IFNvbHV0aW9uTWFuYWdlci5nZXRTb2x1dGlvbkZvckVkaXRvcihlZGl0b3IpKVxuICAgICAgICAgICAgICAgIC5mbGF0TWFwKHggPT4geC5zdGF0ZS5zdGFydFdpdGgoeC5jdXJyZW50U3RhdGUpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoeiA9PiB6ID09PSBEcml2ZXJTdGF0ZS5Db25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgLnRha2UoMSlcbiAgICAgICAgICAgICAgICAuZG8obnVsbCwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChTb2x1dGlvbk1hbmFnZXIuY29ubmVjdGVkKS50by5iZS50cnVlO1xuICAgICAgICAgICAgICAgIGV4cGVjdChTb2x1dGlvbk1hbmFnZXIuYWN0aXZlU29sdXRpb25zLmxlbmd0aCkudG8uYmUuZXFsKDIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidHNkLmQudHNcIiAvPlxuaW1wb3J0IHtleHBlY3R9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQge1NvbHV0aW9uTWFuYWdlcn0gZnJvbSBcIi4uL2xpYi9zZXJ2ZXIvc29sdXRpb24tbWFuYWdlclwiO1xuaW1wb3J0IHtEcml2ZXJTdGF0ZX0gZnJvbSBcIm9tbmlzaGFycC1jbGllbnRcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7c2V0dXBGZWF0dXJlfSBmcm9tIFwiLi90ZXN0LWhlbHBlcnNcIjtcblxuZGVzY3JpYmUoXCJPbW5pU2hhcnAgQXRvbVwiLCAoKSA9PiB7XG4gICAgc2V0dXBGZWF0dXJlKFtdKTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgcGFja2FnZSBpcyBhY3RpdmF0ZWRcIiwgKCkgPT4ge1xuICAgICAgICBpdChcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbVByb21pc2U8QXRvbS5UZXh0RWRpdG9yPig8YW55PmF0b20ud29ya3NwYWNlLm9wZW4oXCJzaW1wbGUvY29kZS1sZW5zL0NvZGVMZW5zLmNzXCIpKVxuICAgICAgICAgICAgICAgIC5mbGF0TWFwKGVkaXRvciA9PiBTb2x1dGlvbk1hbmFnZXIuZ2V0U29sdXRpb25Gb3JFZGl0b3IoZWRpdG9yKSlcbiAgICAgICAgICAgICAgICAuZmxhdE1hcCh4ID0+IHguc3RhdGUuc3RhcnRXaXRoKHguY3VycmVudFN0YXRlKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHogPT4geiA9PT0gRHJpdmVyU3RhdGUuQ29ubmVjdGVkKVxuICAgICAgICAgICAgICAgIC50YWtlKDEpXG4gICAgICAgICAgICAgICAgLmRvKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KFNvbHV0aW9uTWFuYWdlci5jb25uZWN0ZWQpLnRvLmJlLnRydWU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHhpdChcImNvbm5lY3Qtc2ltcGxlMlwiLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShcbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oXCJzaW1wbGUvY29kZS1sZW5zL0NvZGVMZW5zLmNzXCIpLFxuICAgICAgICAgICAgICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKFwic2ltcGxlMi9wcm9qZWN0Lmpzb25cIilcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5mbGF0TWFwKHggPT4geClcbiAgICAgICAgICAgICAgICAuZmxhdE1hcChlZGl0b3IgPT4gU29sdXRpb25NYW5hZ2VyLmdldFNvbHV0aW9uRm9yRWRpdG9yKGVkaXRvcikpXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAoeCA9PiB4LnN0YXRlLnN0YXJ0V2l0aCh4LmN1cnJlbnRTdGF0ZSkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcih6ID0+IHogPT09IERyaXZlclN0YXRlLkNvbm5lY3RlZClcbiAgICAgICAgICAgICAgICAudGFrZSgxKVxuICAgICAgICAgICAgICAgIC5kbyhudWxsLCBudWxsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChTb2x1dGlvbk1hbmFnZXIuY29ubmVjdGVkKS50by5iZS50cnVlO1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoU29sdXRpb25NYW5hZ2VyLmFjdGl2ZVNvbHV0aW9ucy5sZW5ndGgpLnRvLmJlLmVxbCgyKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
