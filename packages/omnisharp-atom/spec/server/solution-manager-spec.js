"use strict";

var _chai = require("chai");

var _solutionManager = require("../../lib/server/solution-manager");

var _testHelpers = require("../test-helpers");

var _omnisharpClient = require("omnisharp-client");

var _rxjs = require("rxjs");

describe("Solution Manager", function () {
    (0, _testHelpers.setupFeature)([], false);
    xit("Works with single cs files", function () {
        return (0, _testHelpers.openEditor)("single-cs/class.cs").do(function (_ref) {
            var solution = _ref.solution;

            (0, _chai.expect)(solution.currentState).to.be.eql(_omnisharpClient.DriverState.Connected);
        }).toPromise();
    });
    it("shows a list of solutions when it detects many sln files", function () {
        var p = atom.workspace.open("two-solution/class.cs").then(function (editor) {
            return _solutionManager.SolutionManager.getSolutionForEditor(editor).toPromise();
        });
        function checkPanel() {
            var panels = atom.workspace.getModalPanels();
            if (panels.length) {
                var panelItem = panels[0].item;
                (0, _chai.expect)(panelItem._items.length).to.be.eql(2);
                panelItem.onConfirm(panelItem._items[0].name);
                return p;
            } else {
                return _rxjs.Observable.timer(100).toPromise().then(function () {
                    return checkPanel();
                });
            }
        }
        return checkPanel();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvc2VydmVyL3NvbHV0aW9uLW1hbmFnZXItc3BlYy5qcyIsInNwZWMvc2VydmVyL3NvbHV0aW9uLW1hbmFnZXItc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQ0lBLFNBQVMsa0JBQVQsRUFBNkIsWUFBQTtBQUN6QixtQ0FBYSxFQUFiLEVBQWlCLEtBQWpCO0FBRUEsUUFBSSw0QkFBSixFQUFrQyxZQUFBO0FBQzlCLGVBQU8sNkJBQVcsb0JBQVgsRUFDRixFQURFLENBQ0MsZ0JBQVc7QUFBQSxnQkFBVCxRQUFTLFFBQVQsUUFBUzs7QUFDWCw4QkFBTyxTQUFTLFlBQWhCLEVBQThCLEVBQTlCLENBQWlDLEVBQWpDLENBQW9DLEdBQXBDLENBQXdDLDZCQUFZLFNBQXBEO0FBQ0gsU0FIRSxFQUlGLFNBSkUsRUFBUDtBQUtILEtBTkQ7QUFRQSxPQUFHLDBEQUFILEVBQStELFlBQUE7QUFDM0QsWUFBTSxJQUFJLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsdUJBQXBCLEVBQ0wsSUFESyxDQUNBO0FBQUEsbUJBQVUsaUNBQWdCLG9CQUFoQixDQUFxQyxNQUFyQyxFQUE2QyxTQUE3QyxFQUFWO0FBQUEsU0FEQSxDQUFWO0FBR0EsaUJBQUEsVUFBQSxHQUFBO0FBQ0ksZ0JBQU0sU0FBUyxLQUFLLFNBQUwsQ0FBZSxjQUFmLEVBQWY7QUFDQSxnQkFBSSxPQUFPLE1BQVgsRUFBbUI7QUFDZixvQkFBTSxZQUFtQyxPQUFPLENBQVAsRUFBVSxJQUFuRDtBQUNBLGtDQUFPLFVBQVUsTUFBVixDQUFpQixNQUF4QixFQUFnQyxFQUFoQyxDQUFtQyxFQUFuQyxDQUFzQyxHQUF0QyxDQUEwQyxDQUExQztBQUVBLDBCQUFVLFNBQVYsQ0FBb0IsVUFBVSxNQUFWLENBQWlCLENBQWpCLEVBQW9CLElBQXhDO0FBRUEsdUJBQU8sQ0FBUDtBQUNILGFBUEQsTUFPTztBQUNILHVCQUFPLGlCQUFXLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsU0FBdEIsR0FDRixJQURFLENBQ0c7QUFBQSwyQkFBTSxZQUFOO0FBQUEsaUJBREgsQ0FBUDtBQUVIO0FBQ0o7QUFDRCxlQUFPLFlBQVA7QUFDSCxLQW5CRDtBQW9CSCxDQS9CRCIsImZpbGUiOiJzcGVjL3NlcnZlci9zb2x1dGlvbi1tYW5hZ2VyLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgU29sdXRpb25NYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2xpYi9zZXJ2ZXIvc29sdXRpb24tbWFuYWdlclwiO1xuaW1wb3J0IHsgc2V0dXBGZWF0dXJlLCBvcGVuRWRpdG9yIH0gZnJvbSBcIi4uL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgRHJpdmVyU3RhdGUgfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5kZXNjcmliZShcIlNvbHV0aW9uIE1hbmFnZXJcIiwgKCkgPT4ge1xuICAgIHNldHVwRmVhdHVyZShbXSwgZmFsc2UpO1xuICAgIHhpdChcIldvcmtzIHdpdGggc2luZ2xlIGNzIGZpbGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG9wZW5FZGl0b3IoXCJzaW5nbGUtY3MvY2xhc3MuY3NcIilcbiAgICAgICAgICAgIC5kbygoeyBzb2x1dGlvbiB9KSA9PiB7XG4gICAgICAgICAgICBleHBlY3Qoc29sdXRpb24uY3VycmVudFN0YXRlKS50by5iZS5lcWwoRHJpdmVyU3RhdGUuQ29ubmVjdGVkKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50b1Byb21pc2UoKTtcbiAgICB9KTtcbiAgICBpdChcInNob3dzIGEgbGlzdCBvZiBzb2x1dGlvbnMgd2hlbiBpdCBkZXRlY3RzIG1hbnkgc2xuIGZpbGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcCA9IGF0b20ud29ya3NwYWNlLm9wZW4oXCJ0d28tc29sdXRpb24vY2xhc3MuY3NcIilcbiAgICAgICAgICAgIC50aGVuKGVkaXRvciA9PiBTb2x1dGlvbk1hbmFnZXIuZ2V0U29sdXRpb25Gb3JFZGl0b3IoZWRpdG9yKS50b1Byb21pc2UoKSk7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrUGFuZWwoKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lbHMgPSBhdG9tLndvcmtzcGFjZS5nZXRNb2RhbFBhbmVscygpO1xuICAgICAgICAgICAgaWYgKHBhbmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbEl0ZW0gPSBwYW5lbHNbMF0uaXRlbTtcbiAgICAgICAgICAgICAgICBleHBlY3QocGFuZWxJdGVtLl9pdGVtcy5sZW5ndGgpLnRvLmJlLmVxbCgyKTtcbiAgICAgICAgICAgICAgICBwYW5lbEl0ZW0ub25Db25maXJtKHBhbmVsSXRlbS5faXRlbXNbMF0ubmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aW1lcigxMDApLnRvUHJvbWlzZSgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGNoZWNrUGFuZWwoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrUGFuZWwoKTtcbiAgICB9KTtcbn0pO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3RzZC5kLnRzXCIgLz5cbmltcG9ydCB7ZXhwZWN0fSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHtTb2x1dGlvbk1hbmFnZXJ9IGZyb20gXCIuLi8uLi9saWIvc2VydmVyL3NvbHV0aW9uLW1hbmFnZXJcIjtcbmltcG9ydCB7c2V0dXBGZWF0dXJlLCBvcGVuRWRpdG9yfSBmcm9tIFwiLi4vdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQge0RyaXZlclN0YXRlfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuaW1wb3J0IHtHZW5lcmljU2VsZWN0TGlzdFZpZXd9IGZyb20gXCIuLi8uLi9saWIvdmlld3MvZ2VuZXJpYy1saXN0LXZpZXdcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcblxuZGVzY3JpYmUoXCJTb2x1dGlvbiBNYW5hZ2VyXCIsICgpID0+IHtcbiAgICBzZXR1cEZlYXR1cmUoW10sIGZhbHNlKTtcblxuICAgIHhpdChcIldvcmtzIHdpdGggc2luZ2xlIGNzIGZpbGVzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3BlbkVkaXRvcihcInNpbmdsZS1jcy9jbGFzcy5jc1wiKVxuICAgICAgICAgICAgLmRvKCh7c29sdXRpb259KSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHNvbHV0aW9uLmN1cnJlbnRTdGF0ZSkudG8uYmUuZXFsKERyaXZlclN0YXRlLkNvbm5lY3RlZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRvUHJvbWlzZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG93cyBhIGxpc3Qgb2Ygc29sdXRpb25zIHdoZW4gaXQgZGV0ZWN0cyBtYW55IHNsbiBmaWxlc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcCA9IGF0b20ud29ya3NwYWNlLm9wZW4oXCJ0d28tc29sdXRpb24vY2xhc3MuY3NcIilcbiAgICAgICAgICAgIC50aGVuKGVkaXRvciA9PiBTb2x1dGlvbk1hbmFnZXIuZ2V0U29sdXRpb25Gb3JFZGl0b3IoZWRpdG9yKS50b1Byb21pc2UoKSk7XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQYW5lbCgpOiBhbnkge1xuICAgICAgICAgICAgY29uc3QgcGFuZWxzID0gYXRvbS53b3Jrc3BhY2UuZ2V0TW9kYWxQYW5lbHMoKTtcbiAgICAgICAgICAgIGlmIChwYW5lbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFuZWxJdGVtOiBHZW5lcmljU2VsZWN0TGlzdFZpZXcgPSBwYW5lbHNbMF0uaXRlbTtcbiAgICAgICAgICAgICAgICBleHBlY3QocGFuZWxJdGVtLl9pdGVtcy5sZW5ndGgpLnRvLmJlLmVxbCgyKTtcblxuICAgICAgICAgICAgICAgIHBhbmVsSXRlbS5vbkNvbmZpcm0ocGFuZWxJdGVtLl9pdGVtc1swXS5uYW1lKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aW1lcigxMDApLnRvUHJvbWlzZSgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGNoZWNrUGFuZWwoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrUGFuZWwoKTtcbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
