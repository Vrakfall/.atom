"use strict";

var _path = require("path");

var _fs = require("fs");

var _omnisharpClient = require("omnisharp-client");

module.exports = function (_ref) {
    var testPaths = _ref.testPaths;
    var buildAtomEnvironment = _ref.buildAtomEnvironment;
    var buildDefaultApplicationDelegate = _ref.buildDefaultApplicationDelegate;
    var headless = _ref.headless;

    console.log(testPaths);
    var fixtures = testPaths.map(function (x) {
        return (0, _path.join)(x, "fixtures");
    });
    var applicationDelegate = buildDefaultApplicationDelegate();
    applicationDelegate.setRepresentedFilename = function () {};
    applicationDelegate.setWindowDocumentEdited = function () {};
    var mochaCtor = require("mocha");
    var globby = require("globby");
    var atom = buildAtomEnvironment({
        applicationDelegate: applicationDelegate,
        window: window, document: document,
        configDirPath: process.env.ATOM_HOME,
        enablePersistence: false
    });
    document.atom = atom;
    window.atom = atom;
    global.atom = atom;
    var atomDiv = document.createElement("div");
    atomDiv.style.display = "none";
    document.body.appendChild(atomDiv);
    atomDiv.appendChild(atom.views.getView(atom.workspace));
    var mochaDiv = document.createElement("div");
    mochaDiv.id = "mocha";
    document.body.appendChild(mochaDiv);
    var mochaCss = document.createElement("style");
    mochaCss.innerHTML = "html, body { overflow: inherit; }\n" + (0, _fs.readFileSync)((0, _path.join)(__dirname, "..", "node_modules", "mocha", "mocha.css")).toString();
    document.head.appendChild(mochaCss);
    var mocha = new mochaCtor({
        ui: "bdd",
        reporter: headless ? "mocha-unfunk-reporter" : "html",
        timeout: 60000
    });
    var cd = void 0;

    var _require = require("../lib/server/solution-manager");

    var SolutionManager = _require.SolutionManager;

    mocha.suite.beforeEach(function () {
        cd = new _omnisharpClient.CompositeDisposable();
        cd.add(SolutionManager.solutionObserver.errors.subscribe(function (error) {
            return console.error(JSON.stringify(error));
        }));
        cd.add(SolutionManager.solutionObserver.events.subscribe(function (event) {
            return console.info("server event: " + JSON.stringify(event));
        }));
        cd.add(SolutionManager.solutionObserver.requests.subscribe(function (r) {
            return console.info("request: " + JSON.stringify(r));
        }));
        cd.add(SolutionManager.solutionObserver.responses.subscribe(function (r) {
            return console.info("response: " + JSON.stringify(r));
        }));
        process.chdir(fixtures[0]);
        atom.project.setPaths(fixtures);
    });
    mocha.suite.afterEach(function () {
        cd.dispose();
        atom.packages.deactivatePackages();
        atom.reset();
    });
    return Promise.all(testPaths.map(function (path) {
        return globby([(0, _path.join)(path, "**/*-spec.js")]).then(function (fs) {
            return fs.forEach(function (f) {
                return mocha.addFile(f);
            });
        });
    })).then(function () {
        return new Promise(function (resolve) {
            return mocha.run(resolve);
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvdGVzdC1ydW5uZXIuanMiLCJzcGVjL3Rlc3QtcnVubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FDRUEsT0FBTyxPQUFQLEdBQWlCLGdCQVdaO0FBQUEsUUFWQSxTQVVBLFFBVkEsU0FVQTtBQUFBLFFBVlcsb0JBVVgsUUFWVyxvQkFVWDtBQUFBLFFBVmlDLCtCQVVqQyxRQVZpQywrQkFVakM7QUFBQSxRQVZrRSxRQVVsRSxRQVZrRSxRQVVsRTs7QUFDRCxZQUFRLEdBQVIsQ0FBWSxTQUFaO0FBQ0EsUUFBTSxXQUFXLFVBQVUsR0FBVixDQUFjO0FBQUEsZUFBSyxnQkFBSyxDQUFMLEVBQVEsVUFBUixDQUFMO0FBQUEsS0FBZCxDQUFqQjtBQUVBLFFBQU0sc0JBQXNCLGlDQUE1QjtBQUVBLHdCQUFvQixzQkFBcEIsR0FBNkMsWUFBQSxDQUFjLENBQTNEO0FBQ0Esd0JBQW9CLHVCQUFwQixHQUE4QyxZQUFBLENBQWMsQ0FBNUQ7QUFFQSxRQUFNLFlBQTBCLFFBQVEsT0FBUixDQUFoQztBQUNBLFFBQU0sU0FBaUQsUUFBUSxRQUFSLENBQXZEO0FBRUEsUUFBTSxPQUFPLHFCQUFxQjtBQUM5Qiw2QkFBcUIsbUJBRFM7QUFFOUIsc0JBRjhCLEVBRXRCLGtCQUZzQjtBQUc5Qix1QkFBZSxRQUFRLEdBQVIsQ0FBWSxTQUhHO0FBSTlCLDJCQUFtQjtBQUpXLEtBQXJCLENBQWI7QUFPQyxhQUFpQixJQUFqQixHQUF3QixJQUF4QjtBQUNBLFdBQWUsSUFBZixHQUFzQixJQUF0QjtBQUNBLFdBQWUsSUFBZixHQUFzQixJQUF0QjtBQUVELFFBQU0sVUFBVSxTQUFTLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQSxZQUFRLEtBQVIsQ0FBYyxPQUFkLEdBQXdCLE1BQXhCO0FBQ0EsYUFBUyxJQUFULENBQWMsV0FBZCxDQUEwQixPQUExQjtBQUNBLFlBQVEsV0FBUixDQUF5QixLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLEtBQUssU0FBeEIsQ0FBekI7QUFFQSxRQUFNLFdBQVcsU0FBUyxhQUFULENBQXVCLEtBQXZCLENBQWpCO0FBQ0EsYUFBUyxFQUFULEdBQWMsT0FBZDtBQUNBLGFBQVMsSUFBVCxDQUFjLFdBQWQsQ0FBMEIsUUFBMUI7QUFFQSxRQUFNLFdBQVcsU0FBUyxhQUFULENBQXVCLE9BQXZCLENBQWpCO0FBQ0EsYUFBUyxTQUFULEdBQXFCLHdDQUF3QyxzQkFBYSxnQkFBSyxTQUFMLEVBQWdCLElBQWhCLEVBQXNCLGNBQXRCLEVBQXNDLE9BQXRDLEVBQStDLFdBQS9DLENBQWIsRUFBMEUsUUFBMUUsRUFBN0Q7QUFDQSxhQUFTLElBQVQsQ0FBYyxXQUFkLENBQTBCLFFBQTFCO0FBRUEsUUFBTSxRQUFRLElBQUksU0FBSixDQUFjO0FBQ3hCLFlBQUksS0FEb0I7QUFFeEIsa0JBQVUsV0FBVyx1QkFBWCxHQUFxQyxNQUZ2QjtBQUd4QixpQkFBUztBQUhlLEtBQWQsQ0FBZDtBQU9BLFFBQUksV0FBSjs7QUEzQ0MsbUJBOEN5QixRQUFRLGdDQUFSLENBOUN6Qjs7QUFBQSxRQThDTSxlQTlDTixZQThDTSxlQTlDTjs7QUFpREssVUFBTyxLQUFQLENBQWEsVUFBYixDQUF3QixZQUFBO0FBQzFCLGFBQUssMENBQUw7QUFFQSxXQUFHLEdBQUgsQ0FBTyxnQkFBZ0IsZ0JBQWhCLENBQWlDLE1BQWpDLENBQXdDLFNBQXhDLENBQWtELFVBQUMsS0FBRDtBQUFBLG1CQUFnQixRQUFRLEtBQVIsQ0FBYyxLQUFLLFNBQUwsQ0FBZSxLQUFmLENBQWQsQ0FBaEI7QUFBQSxTQUFsRCxDQUFQO0FBQ0EsV0FBRyxHQUFILENBQU8sZ0JBQWdCLGdCQUFoQixDQUFpQyxNQUFqQyxDQUF3QyxTQUF4QyxDQUFrRCxVQUFDLEtBQUQ7QUFBQSxtQkFBZ0IsUUFBUSxJQUFSLG9CQUE4QixLQUFLLFNBQUwsQ0FBZSxLQUFmLENBQTlCLENBQWhCO0FBQUEsU0FBbEQsQ0FBUDtBQUNBLFdBQUcsR0FBSCxDQUFPLGdCQUFnQixnQkFBaEIsQ0FBaUMsUUFBakMsQ0FBMEMsU0FBMUMsQ0FBb0QsVUFBQyxDQUFEO0FBQUEsbUJBQVksUUFBUSxJQUFSLGVBQXlCLEtBQUssU0FBTCxDQUFlLENBQWYsQ0FBekIsQ0FBWjtBQUFBLFNBQXBELENBQVA7QUFDQSxXQUFHLEdBQUgsQ0FBTyxnQkFBZ0IsZ0JBQWhCLENBQWlDLFNBQWpDLENBQTJDLFNBQTNDLENBQXFELFVBQUMsQ0FBRDtBQUFBLG1CQUFZLFFBQVEsSUFBUixnQkFBMEIsS0FBSyxTQUFMLENBQWUsQ0FBZixDQUExQixDQUFaO0FBQUEsU0FBckQsQ0FBUDtBQUVBLGdCQUFRLEtBQVIsQ0FBYyxTQUFTLENBQVQsQ0FBZDtBQUNBLGFBQUssT0FBTCxDQUFhLFFBQWIsQ0FBMkIsUUFBM0I7QUFDSCxLQVZLO0FBWUEsVUFBTyxLQUFQLENBQWEsU0FBYixDQUF1QixZQUFBO0FBQ3pCLFdBQUcsT0FBSDtBQUNBLGFBQUssUUFBTCxDQUFjLGtCQUFkO0FBQ0MsYUFBYSxLQUFiO0FBQ0osS0FKSztBQU1OLFdBQU8sUUFBUSxHQUFSLENBQVksVUFBVSxHQUFWLENBQWM7QUFBQSxlQUFRLE9BQU8sQ0FBQyxnQkFBSyxJQUFMLEVBQVcsY0FBWCxDQUFELENBQVAsRUFDcEMsSUFEb0MsQ0FDL0I7QUFBQSxtQkFBTSxHQUFHLE9BQUgsQ0FBVztBQUFBLHVCQUFLLE1BQU0sT0FBTixDQUFjLENBQWQsQ0FBTDtBQUFBLGFBQVgsQ0FBTjtBQUFBLFNBRCtCLENBQVI7QUFBQSxLQUFkLENBQVosRUFFRixJQUZFLENBRUcsWUFBQTtBQUNGLGVBQU8sSUFBSSxPQUFKLENBQW9CO0FBQUEsbUJBQVcsTUFBTSxHQUFOLENBQVUsT0FBVixDQUFYO0FBQUEsU0FBcEIsQ0FBUDtBQUNILEtBSkUsQ0FBUDtBQUtILENBbkZEIiwiZmlsZSI6InNwZWMvdGVzdC1ydW5uZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gXCJvbW5pc2hhcnAtY2xpZW50XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh7IHRlc3RQYXRocywgYnVpbGRBdG9tRW52aXJvbm1lbnQsIGJ1aWxkRGVmYXVsdEFwcGxpY2F0aW9uRGVsZWdhdGUsIGhlYWRsZXNzIH0pIHtcbiAgICBjb25zb2xlLmxvZyh0ZXN0UGF0aHMpO1xuICAgIGNvbnN0IGZpeHR1cmVzID0gdGVzdFBhdGhzLm1hcCh4ID0+IGpvaW4oeCwgXCJmaXh0dXJlc1wiKSk7XG4gICAgY29uc3QgYXBwbGljYXRpb25EZWxlZ2F0ZSA9IGJ1aWxkRGVmYXVsdEFwcGxpY2F0aW9uRGVsZWdhdGUoKTtcbiAgICBhcHBsaWNhdGlvbkRlbGVnYXRlLnNldFJlcHJlc2VudGVkRmlsZW5hbWUgPSAoKSA9PiB7IH07XG4gICAgYXBwbGljYXRpb25EZWxlZ2F0ZS5zZXRXaW5kb3dEb2N1bWVudEVkaXRlZCA9ICgpID0+IHsgfTtcbiAgICBjb25zdCBtb2NoYUN0b3IgPSByZXF1aXJlKFwibW9jaGFcIik7XG4gICAgY29uc3QgZ2xvYmJ5ID0gcmVxdWlyZShcImdsb2JieVwiKTtcbiAgICBjb25zdCBhdG9tID0gYnVpbGRBdG9tRW52aXJvbm1lbnQoe1xuICAgICAgICBhcHBsaWNhdGlvbkRlbGVnYXRlOiBhcHBsaWNhdGlvbkRlbGVnYXRlLFxuICAgICAgICB3aW5kb3csIGRvY3VtZW50LFxuICAgICAgICBjb25maWdEaXJQYXRoOiBwcm9jZXNzLmVudi5BVE9NX0hPTUUsXG4gICAgICAgIGVuYWJsZVBlcnNpc3RlbmNlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvY3VtZW50LmF0b20gPSBhdG9tO1xuICAgIHdpbmRvdy5hdG9tID0gYXRvbTtcbiAgICBnbG9iYWwuYXRvbSA9IGF0b207XG4gICAgY29uc3QgYXRvbURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYXRvbURpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhdG9tRGl2KTtcbiAgICBhdG9tRGl2LmFwcGVuZENoaWxkKGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSkpO1xuICAgIGNvbnN0IG1vY2hhRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBtb2NoYURpdi5pZCA9IFwibW9jaGFcIjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1vY2hhRGl2KTtcbiAgICBjb25zdCBtb2NoYUNzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICBtb2NoYUNzcy5pbm5lckhUTUwgPSBgaHRtbCwgYm9keSB7IG92ZXJmbG93OiBpbmhlcml0OyB9XFxuYCArIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcIm5vZGVfbW9kdWxlc1wiLCBcIm1vY2hhXCIsIFwibW9jaGEuY3NzXCIpKS50b1N0cmluZygpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobW9jaGFDc3MpO1xuICAgIGNvbnN0IG1vY2hhID0gbmV3IG1vY2hhQ3Rvcih7XG4gICAgICAgIHVpOiBcImJkZFwiLFxuICAgICAgICByZXBvcnRlcjogaGVhZGxlc3MgPyBcIm1vY2hhLXVuZnVuay1yZXBvcnRlclwiIDogXCJodG1sXCIsXG4gICAgICAgIHRpbWVvdXQ6IDYwMDAwLFxuICAgIH0pO1xuICAgIGxldCBjZDtcbiAgICBjb25zdCB7IFNvbHV0aW9uTWFuYWdlciB9ID0gcmVxdWlyZShcIi4uL2xpYi9zZXJ2ZXIvc29sdXRpb24tbWFuYWdlclwiKTtcbiAgICBtb2NoYS5zdWl0ZS5iZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgY2QgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgICBjZC5hZGQoU29sdXRpb25NYW5hZ2VyLnNvbHV0aW9uT2JzZXJ2ZXIuZXJyb3JzLnN1YnNjcmliZSgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyb3IpKSkpO1xuICAgICAgICBjZC5hZGQoU29sdXRpb25NYW5hZ2VyLnNvbHV0aW9uT2JzZXJ2ZXIuZXZlbnRzLnN1YnNjcmliZSgoZXZlbnQpID0+IGNvbnNvbGUuaW5mbyhgc2VydmVyIGV2ZW50OiAke0pTT04uc3RyaW5naWZ5KGV2ZW50KX1gKSkpO1xuICAgICAgICBjZC5hZGQoU29sdXRpb25NYW5hZ2VyLnNvbHV0aW9uT2JzZXJ2ZXIucmVxdWVzdHMuc3Vic2NyaWJlKChyKSA9PiBjb25zb2xlLmluZm8oYHJlcXVlc3Q6ICR7SlNPTi5zdHJpbmdpZnkocil9YCkpKTtcbiAgICAgICAgY2QuYWRkKFNvbHV0aW9uTWFuYWdlci5zb2x1dGlvbk9ic2VydmVyLnJlc3BvbnNlcy5zdWJzY3JpYmUoKHIpID0+IGNvbnNvbGUuaW5mbyhgcmVzcG9uc2U6ICR7SlNPTi5zdHJpbmdpZnkocil9YCkpKTtcbiAgICAgICAgcHJvY2Vzcy5jaGRpcihmaXh0dXJlc1swXSk7XG4gICAgICAgIGF0b20ucHJvamVjdC5zZXRQYXRocyhmaXh0dXJlcyk7XG4gICAgfSk7XG4gICAgbW9jaGEuc3VpdGUuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgY2QuZGlzcG9zZSgpO1xuICAgICAgICBhdG9tLnBhY2thZ2VzLmRlYWN0aXZhdGVQYWNrYWdlcygpO1xuICAgICAgICBhdG9tLnJlc2V0KCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRlc3RQYXRocy5tYXAocGF0aCA9PiBnbG9iYnkoW2pvaW4ocGF0aCwgXCIqKi8qLXNwZWMuanNcIildKVxuICAgICAgICAudGhlbihmcyA9PiBmcy5mb3JFYWNoKGYgPT4gbW9jaGEuYWRkRmlsZShmKSkpKSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBtb2NoYS5ydW4ocmVzb2x2ZSkpO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB7am9pbn0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7cmVhZEZpbGVTeW5jfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSBcIm9tbmlzaGFycC1jbGllbnRcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICB7dGVzdFBhdGhzLCBidWlsZEF0b21FbnZpcm9ubWVudCwgYnVpbGREZWZhdWx0QXBwbGljYXRpb25EZWxlZ2F0ZSwgaGVhZGxlc3N9OiB7XG4gICAgICAgIHRlc3RQYXRoczogc3RyaW5nW107XG4gICAgICAgIGJ1aWxkQXRvbUVudmlyb25tZW50OiAob3B0czogYW55KSA9PiBBdG9tLkF0b207XG4gICAgICAgIGFwcGxpY2F0aW9uRGVsZWdhdGU6IGFueTtcbiAgICAgICAgd2luZG93OiBXaW5kb3c7XG4gICAgICAgIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgICAgICAgZW5hYmxlUGVyc2lzdGVuY2U6IGJvb2xlYW47XG4gICAgICAgIGJ1aWxkRGVmYXVsdEFwcGxpY2F0aW9uRGVsZWdhdGU6IGFueTtcbiAgICAgICAgbG9nRmlsZTogc3RyaW5nO1xuICAgICAgICBoZWFkbGVzczogYm9vbGVhblxuICAgIH0pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnNvbGUubG9nKHRlc3RQYXRocyk7XG4gICAgY29uc3QgZml4dHVyZXMgPSB0ZXN0UGF0aHMubWFwKHggPT4gam9pbih4LCBcImZpeHR1cmVzXCIpKTtcblxuICAgIGNvbnN0IGFwcGxpY2F0aW9uRGVsZWdhdGUgPSBidWlsZERlZmF1bHRBcHBsaWNhdGlvbkRlbGVnYXRlKCk7XG5cbiAgICBhcHBsaWNhdGlvbkRlbGVnYXRlLnNldFJlcHJlc2VudGVkRmlsZW5hbWUgPSAoKSA9PiB7LyogKi8gfTtcbiAgICBhcHBsaWNhdGlvbkRlbGVnYXRlLnNldFdpbmRvd0RvY3VtZW50RWRpdGVkID0gKCkgPT4gey8qICovIH07XG5cbiAgICBjb25zdCBtb2NoYUN0b3I6IHR5cGVvZiBNb2NoYSA9IHJlcXVpcmUoXCJtb2NoYVwiKTtcbiAgICBjb25zdCBnbG9iYnk6IChwYXRoczogc3RyaW5nW10pID0+IFByb21pc2U8c3RyaW5nW10+ID0gcmVxdWlyZShcImdsb2JieVwiKTtcblxuICAgIGNvbnN0IGF0b20gPSBidWlsZEF0b21FbnZpcm9ubWVudCh7XG4gICAgICAgIGFwcGxpY2F0aW9uRGVsZWdhdGU6IGFwcGxpY2F0aW9uRGVsZWdhdGUsXG4gICAgICAgIHdpbmRvdywgZG9jdW1lbnQsXG4gICAgICAgIGNvbmZpZ0RpclBhdGg6IHByb2Nlc3MuZW52LkFUT01fSE9NRSxcbiAgICAgICAgZW5hYmxlUGVyc2lzdGVuY2U6IGZhbHNlXG4gICAgfSk7XG5cbiAgICAoZG9jdW1lbnQgYXMgYW55KS5hdG9tID0gYXRvbTtcbiAgICAod2luZG93IGFzIGFueSkuYXRvbSA9IGF0b207XG4gICAgKGdsb2JhbCBhcyBhbnkpLmF0b20gPSBhdG9tO1xuXG4gICAgY29uc3QgYXRvbURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYXRvbURpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhdG9tRGl2KTtcbiAgICBhdG9tRGl2LmFwcGVuZENoaWxkKDxhbnk+YXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKSk7XG5cbiAgICBjb25zdCBtb2NoYURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbW9jaGFEaXYuaWQgPSBcIm1vY2hhXCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtb2NoYURpdik7XG5cbiAgICBjb25zdCBtb2NoYUNzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICBtb2NoYUNzcy5pbm5lckhUTUwgPSBgaHRtbCwgYm9keSB7IG92ZXJmbG93OiBpbmhlcml0OyB9XFxuYCArIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcIm5vZGVfbW9kdWxlc1wiLCBcIm1vY2hhXCIsIFwibW9jaGEuY3NzXCIpKS50b1N0cmluZygpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobW9jaGFDc3MpO1xuXG4gICAgY29uc3QgbW9jaGEgPSBuZXcgbW9jaGFDdG9yKHtcbiAgICAgICAgdWk6IFwiYmRkXCIsXG4gICAgICAgIHJlcG9ydGVyOiBoZWFkbGVzcyA/IFwibW9jaGEtdW5mdW5rLXJlcG9ydGVyXCIgOiBcImh0bWxcIixcbiAgICAgICAgdGltZW91dDogNjAwMDAsXG4gICAgICAgIC8vZ3JlcDogbmV3IFJlZ0V4cChcImVkaXRvciBzd2l0Y2hcIilcbiAgICB9KTtcblxuICAgIGxldCBjZDogQ29tcG9zaXRlRGlzcG9zYWJsZTtcblxuICAgIC8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cbiAgICBjb25zdCB7U29sdXRpb25NYW5hZ2VyfSA9IHJlcXVpcmUoXCIuLi9saWIvc2VydmVyL3NvbHV0aW9uLW1hbmFnZXJcIik7XG4gICAgLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXG5cbiAgICAoPGFueT5tb2NoYSkuc3VpdGUuYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGNkID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcblxuICAgICAgICBjZC5hZGQoU29sdXRpb25NYW5hZ2VyLnNvbHV0aW9uT2JzZXJ2ZXIuZXJyb3JzLnN1YnNjcmliZSgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihKU09OLnN0cmluZ2lmeShlcnJvcikpKSk7XG4gICAgICAgIGNkLmFkZChTb2x1dGlvbk1hbmFnZXIuc29sdXRpb25PYnNlcnZlci5ldmVudHMuc3Vic2NyaWJlKChldmVudDogYW55KSA9PiBjb25zb2xlLmluZm8oYHNlcnZlciBldmVudDogJHtKU09OLnN0cmluZ2lmeShldmVudCl9YCkpKTtcbiAgICAgICAgY2QuYWRkKFNvbHV0aW9uTWFuYWdlci5zb2x1dGlvbk9ic2VydmVyLnJlcXVlc3RzLnN1YnNjcmliZSgocjogYW55KSA9PiBjb25zb2xlLmluZm8oYHJlcXVlc3Q6ICR7SlNPTi5zdHJpbmdpZnkocil9YCkpKTtcbiAgICAgICAgY2QuYWRkKFNvbHV0aW9uTWFuYWdlci5zb2x1dGlvbk9ic2VydmVyLnJlc3BvbnNlcy5zdWJzY3JpYmUoKHI6IGFueSkgPT4gY29uc29sZS5pbmZvKGByZXNwb25zZTogJHtKU09OLnN0cmluZ2lmeShyKX1gKSkpO1xuXG4gICAgICAgIHByb2Nlc3MuY2hkaXIoZml4dHVyZXNbMF0pO1xuICAgICAgICBhdG9tLnByb2plY3Quc2V0UGF0aHMoPGFueT5maXh0dXJlcyk7XG4gICAgfSk7XG5cbiAgICAoPGFueT5tb2NoYSkuc3VpdGUuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgY2QuZGlzcG9zZSgpO1xuICAgICAgICBhdG9tLnBhY2thZ2VzLmRlYWN0aXZhdGVQYWNrYWdlcygpO1xuICAgICAgICAoYXRvbSBhcyBhbnkpLnJlc2V0KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGVzdFBhdGhzLm1hcChwYXRoID0+IGdsb2JieShbam9pbihwYXRoLCBcIioqLyotc3BlYy5qc1wiKV0pXG4gICAgICAgIC50aGVuKGZzID0+IGZzLmZvckVhY2goZiA9PiBtb2NoYS5hZGRGaWxlKGYpKSkpKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8bnVtYmVyPihyZXNvbHZlID0+IG1vY2hhLnJ1bihyZXNvbHZlKSk7XG4gICAgICAgIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
