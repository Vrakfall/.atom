"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AggregateClientV2 = exports.ObservationClientV2 = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _compositeClientBase = require("./composite-client-base");

var _decorators = require("../decorators");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ObservationClientV2 = exports.ObservationClientV2 = function (_ObservationClientBas) {
    _inherits(ObservationClientV2, _ObservationClientBas);

    function ObservationClientV2() {
        _classCallCheck(this, ObservationClientV2);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ObservationClientV2).apply(this, arguments));
    }

    _createClass(ObservationClientV2, [{
        key: "autocomplete",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "changebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codecheck",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codeformat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersasflat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersastree",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "filesChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findimplementations",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findsymbols",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findusages",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "fixusings",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatAfterKeystroke",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatRange",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "getcodeactions",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gettestcontext",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotodefinition",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotofile",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotoregion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "highlight",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "metadata",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigatedown",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigateup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesearch",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesource",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageversion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "project",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projects",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "rename",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "signatureHelp",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "typelookup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "updatebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ObservationClientV2;
}(_compositeClientBase.ObservationClientBase);

__decorate([_decorators.merge], ObservationClientV2.prototype, "autocomplete", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "changebuffer", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "codecheck", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "codeformat", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "currentfilemembersasflat", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "currentfilemembersastree", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "filesChanged", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "findimplementations", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "findsymbols", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "findusages", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "fixusings", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "formatAfterKeystroke", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "formatRange", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "getcodeactions", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "gettestcontext", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "gotodefinition", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "gotofile", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "gotoregion", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "highlight", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "metadata", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "navigatedown", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "navigateup", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "packagesearch", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "packagesource", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "packageversion", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "project", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "projects", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "rename", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "runcodeaction", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "signatureHelp", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "typelookup", null);
__decorate([_decorators.merge], ObservationClientV2.prototype, "updatebuffer", null);

var AggregateClientV2 = exports.AggregateClientV2 = function (_CombinationClientBas) {
    _inherits(AggregateClientV2, _CombinationClientBas);

    function AggregateClientV2() {
        _classCallCheck(this, AggregateClientV2);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(AggregateClientV2).apply(this, arguments));
    }

    _createClass(AggregateClientV2, [{
        key: "autocomplete",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "changebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codecheck",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codeformat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersasflat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersastree",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "filesChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findimplementations",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findsymbols",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findusages",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "fixusings",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatAfterKeystroke",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatRange",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "getcodeactions",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gettestcontext",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotodefinition",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotofile",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotoregion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "highlight",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "metadata",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigatedown",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigateup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesearch",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesource",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageversion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "project",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projects",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "rename",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "signatureHelp",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "typelookup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "updatebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return AggregateClientV2;
}(_compositeClientBase.CombinationClientBase);

__decorate([_decorators.aggregate], AggregateClientV2.prototype, "autocomplete", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "changebuffer", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "codecheck", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "codeformat", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "currentfilemembersasflat", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "currentfilemembersastree", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "filesChanged", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "findimplementations", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "findsymbols", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "findusages", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "fixusings", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "formatAfterKeystroke", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "formatRange", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "getcodeactions", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "gettestcontext", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "gotodefinition", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "gotofile", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "gotoregion", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "highlight", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "metadata", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "navigatedown", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "navigateup", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "packagesearch", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "packagesource", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "packageversion", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "project", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "projects", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "rename", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "runcodeaction", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "signatureHelp", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "typelookup", null);
__decorate([_decorators.aggregate], AggregateClientV2.prototype, "updatebuffer", null);
//# sourceMappingURL=data:application/json;base64,
