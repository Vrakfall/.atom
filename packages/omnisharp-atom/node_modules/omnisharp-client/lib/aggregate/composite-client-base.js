"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CombinationClientBase = exports.ObservationClientBase = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _rxjs = require("rxjs");

var _disposables = require("../disposables");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _decorators = require("../decorators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ObservationClientBase = exports.ObservationClientBase = function () {
    function ObservationClientBase() {
        var _this = this;

        var clients = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, ObservationClientBase);

        this.clients = clients;
        this._disposable = new _disposables.CompositeDisposable();
        this._clientDisposable = new _disposables.CompositeDisposable();
        this._clientsSubject = new _rxjs.ReplaySubject(1);
        this.makeMergeObserable = function (selector) {
            return _this._clientsSubject.switchMap(function (clients) {
                return _rxjs.Observable.merge.apply(_rxjs.Observable, _toConsumableArray(clients.map(selector)));
            }).share();
        };
        this.next = function () {
            return _this._clientsSubject.next(_this.clients.slice());
        };
        this.next();
        this._disposable.add(this._clientDisposable);
    }

    _createClass(ObservationClientBase, [{
        key: "dispose",
        value: function dispose() {
            if (this._disposable.isDisposed) return;
            this._disposable.dispose();
        }
    }, {
        key: "observe",
        value: function observe(selector) {
            return this.makeMergeObserable(selector);
        }
    }, {
        key: "add",
        value: function add(client) {
            var _this2 = this;

            this.clients.push(client);
            this.next();
            var d = _disposables.Disposable.create(function () {
                _lodash2.default.pull(_this2.clients, client);
                _this2.next();
            });
            this._clientDisposable.add(d);
            return d;
        }
    }, {
        key: "projectAdded",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projectChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projectRemoved",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "error",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "msBuildProjectDiagnostics",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageRestoreStarted",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageRestoreFinished",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "unresolvedDependencies",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "events",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "commands",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "state",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "status",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "requests",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "responses",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "errors",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ObservationClientBase;
}();

__decorate([_decorators.merge], ObservationClientBase.prototype, "projectAdded", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "projectChanged", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "projectRemoved", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "error", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "msBuildProjectDiagnostics", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "packageRestoreStarted", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "packageRestoreFinished", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "unresolvedDependencies", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "events", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "commands", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "state", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "status", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "requests", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "responses", null);
__decorate([_decorators.merge], ObservationClientBase.prototype, "errors", null);

var CombinationClientBase = exports.CombinationClientBase = function () {
    function CombinationClientBase() {
        var _this3 = this;

        var clients = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, CombinationClientBase);

        this.clients = clients;
        this._disposable = new _disposables.CompositeDisposable();
        this._clientDisposable = new _disposables.CompositeDisposable();
        this._clientsSubject = new _rxjs.ReplaySubject(1);
        this.makeAggregateObserable = function (selector) {
            var cache = {};
            return _this3._clientsSubject.switchMap(function (clients) {
                var removal = _lodash2.default.difference(_lodash2.default.keys(cache), clients.map(function (z) {
                    return z.uniqueId;
                }));
                _lodash2.default.each(removal, function (z) {
                    return delete cache[z];
                });
                return _rxjs.Observable.combineLatest(clients.map(function (z) {
                    return selector(z).startWith(cache[z.uniqueId]);
                }), function () {
                    for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
                        values[_key] = arguments[_key];
                    }

                    return values.map(function (value, index) {
                        cache[clients[index].uniqueId] = value;
                        return {
                            key: clients[index].uniqueId,
                            value: value
                        };
                    });
                });
            }).share();
        };
        this.next = function () {
            return _this3._clientsSubject.next(_this3.clients.slice());
        };
        this.next();
        this._disposable.add(this._clientDisposable);
    }

    _createClass(CombinationClientBase, [{
        key: "dispose",
        value: function dispose() {
            if (this._disposable.isDisposed) return;
            this._disposable.dispose();
        }
    }, {
        key: "observe",
        value: function observe(selector) {
            return this.makeAggregateObserable(selector);
        }
    }, {
        key: "add",
        value: function add(client) {
            var _this4 = this;

            this.clients.push(client);
            this.next();
            var d = _disposables.Disposable.create(function () {
                _lodash2.default.pull(_this4.clients, client);
                _this4.next();
            });
            this._clientDisposable.add(d);
            return d;
        }
    }, {
        key: "projectAdded",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projectChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projectRemoved",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "error",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "msBuildProjectDiagnostics",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageRestoreStarted",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageRestoreFinished",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "unresolvedDependencies",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "state",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "status",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return CombinationClientBase;
}();

__decorate([_decorators.aggregate], CombinationClientBase.prototype, "projectAdded", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "projectChanged", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "projectRemoved", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "error", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "msBuildProjectDiagnostics", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "packageRestoreStarted", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "packageRestoreFinished", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "unresolvedDependencies", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "state", null);
__decorate([_decorators.aggregate], CombinationClientBase.prototype, "status", null);
//# sourceMappingURL=data:application/json;base64,
