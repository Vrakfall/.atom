"use strict";
// import {Observable, Subject, AsyncSubject, BehaviorSubject, Subscription} from "rxjs";
var ts_disposables_1 = require('ts-disposables');
var lodash_1 = require('lodash');
/*import {IOmnisharpPlugin, isPluginDriver} from "../enums";*/
var enums_1 = require('../enums');
var contexts_1 = require('../contexts');
var options_1 = require('../options');
var preconditions_1 = require('../helpers/preconditions');
var events_1 = require('events');
var queue_1 = require('../helpers/queue');
// import {PluginManager} from "../helpers/plugin-manager";
var decorators_1 = require('../helpers/decorators');
/////
// NOT TESTED
// NOT READY! :)
/////
var AsyncEvents = (function () {
    function AsyncEvents() {
    }
    AsyncEvents.request = 'request';
    AsyncEvents.response = 'response';
    AsyncEvents.status = 'response';
    AsyncEvents.state = 'response';
    AsyncEvents.error = 'error';
    AsyncEvents.event = 'event';
    return AsyncEvents;
}());
exports.AsyncEvents = AsyncEvents;
var AsyncClient = (function () {
    function AsyncClient(_options) {
        var _this = this;
        this._emitter = new events_1.EventEmitter();
        this._uniqueId = lodash_1.uniqueId('client');
        this._lowestIndexValue = 0;
        this._disposable = new ts_disposables_1.CompositeDisposable();
        this._currentRequests = new Set();
        this._currentState = enums_1.DriverState.Disconnected;
        this._fixups = [];
        _options.driver = _options.driver || (function (options) {
            var item = require('../drivers/stdio');
            var driverFactory = item[lodash_1.keys(item)[0]];
            return new driverFactory(_this._options);
        });
        this._options = lodash_1.defaults(_options, {
            onState: function (state) {
                _this._currentState = state;
                _this._emitter.emit(AsyncEvents.state, state);
            },
            onEvent: function (event) {
                _this._emitter.emit(AsyncEvents.event, event);
            },
            onCommand: function (packet) {
                var response = new contexts_1.ResponseContext(new contexts_1.RequestContext(_this._uniqueId, packet.Command, {}, {}, 'command'), packet.Body);
                _this._respondToRequest(packet.Command, response);
            }
        });
        options_1.ensureClientOptions(_options);
        this._resetDriver();
        var getStatusValues = function () { return ({
            state: _this._driver.currentState,
            outgoingRequests: _this.outstandingRequests,
            hasOutgoingRequests: _this.outstandingRequests > 0
        }); };
        var lastStatus = {};
        var emitStatus = function () {
            var newStatus = getStatusValues();
            if (!lodash_1.isEqual(getStatusValues(), lastStatus)) {
                lastStatus = newStatus;
                _this._emitter.emit(AsyncEvents.status, lastStatus);
            }
        };
        this._emitter.on(AsyncEvents.request, emitStatus);
        this._emitter.on(AsyncEvents.response, emitStatus);
        this._queue = new queue_1.Queue(this._options.concurrency, lodash_1.bind(this.handleResult, this));
        if (this._options.debug) {
            this._emitter.on(AsyncEvents.response, function (context) {
                _this._emitter.emit(AsyncEvents.event, {
                    Event: 'log',
                    Body: {
                        Message: "/" + context.command + "  " + context.responseTime + "ms (round trip)",
                        LogLevel: 'INFORMATION'
                    },
                    Seq: -1,
                    Type: 'log'
                });
            });
        }
    }
    AsyncClient.prototype._listen = function (event, callback) {
        var _this = this;
        this._emitter.addListener(AsyncEvents.event, callback);
        return { dispose: function () { return _this._emitter.removeListener(AsyncEvents.event, callback); } };
    };
    Object.defineProperty(AsyncClient.prototype, "uniqueId", {
        //private _pluginManager: PluginManager;
        get: function () { return this._uniqueId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncClient.prototype, "id", {
        get: function () { return this._driver.id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncClient.prototype, "serverPath", {
        get: function () { return this._driver.serverPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncClient.prototype, "projectPath", {
        get: function () { return this._driver.projectPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncClient.prototype, "runtime", {
        get: function () { return this._driver.runtime; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncClient.prototype, "outstandingRequests", {
        get: function () { return this._currentRequests.size; },
        enumerable: true,
        configurable: true
    });
    AsyncClient.prototype.getCurrentRequests = function () {
        var response = [];
        this._currentRequests.forEach(function (request) {
            response.push({
                command: request.command,
                sequence: lodash_1.cloneDeep(request.sequence),
                request: request.request,
                silent: request.silent,
                duration: Date.now() - request.time.getTime()
            });
        });
        return response;
    };
    AsyncClient.prototype.onEvent = function (callback) {
        return this._listen(AsyncEvents.event, callback);
    };
    Object.defineProperty(AsyncClient.prototype, "currentState", {
        get: function () { return this._currentState; },
        enumerable: true,
        configurable: true
    });
    AsyncClient.prototype.onState = function (callback) {
        return this._listen(AsyncEvents.state, callback);
    };
    AsyncClient.prototype.onStatus = function (callback) {
        return this._listen(AsyncEvents.status, callback);
    };
    AsyncClient.prototype.onRequest = function (callback) {
        return this._listen(AsyncEvents.request, callback);
    };
    AsyncClient.prototype.onResponse = function (callback) {
        return this._listen(AsyncEvents.response, callback);
    };
    AsyncClient.prototype.onError = function (callback) {
        return this._listen(AsyncEvents.error, callback);
    };
    AsyncClient.prototype.dispose = function () {
        if (this._disposable.isDisposed)
            return;
        this.disconnect();
        this._disposable.dispose();
    };
    AsyncClient.prototype.handleResult = function (context, complete) {
        var _this = this;
        // TODO: Find a way to not repeat the same commands, if there are outstanding (timed out) requests.
        // In some cases for example find usages has taken over 30 seconds, so we shouldn"t hit the server with multiple of these requests (as we slam the cpU)
        var result = this._driver.request(context.command, context.request);
        var cmp = function () {
            _this._currentRequests.delete(context);
            if (complete) {
                complete();
            }
        };
        return new Promise(function (resolve, reject) {
            result
                .then(function (data) {
                _this._respondToRequest(context.command, new contexts_1.ResponseContext(context, data));
                cmp();
                resolve(data);
            }, function (error) {
                _this._emitter.emit(AsyncEvents.error, new contexts_1.CommandContext(context.command, error));
                _this._respondToRequest(context.command, new contexts_1.ResponseContext(context, null, true));
                _this._currentRequests.delete(context);
                cmp();
                reject(error);
            });
        });
    };
    AsyncClient.prototype.log = function (message, logLevel) {
        // log our complete response time
        this._emitter.emit(AsyncEvents.event, {
            Event: 'log',
            Body: {
                Message: message,
                LogLevel: logLevel ? logLevel.toUpperCase() : 'INFORMATION'
            },
            Seq: -1,
            Type: 'log'
        });
    };
    AsyncClient.prototype.connect = function () {
        // Currently connecting
        if (this.currentState >= enums_1.DriverState.Downloading && this.currentState <= enums_1.DriverState.Connected)
            return;
        // Bootstrap plugins here
        this._currentRequests.clear();
        this._driver.connect();
    };
    AsyncClient.prototype._resetDriver = function () {
        if (this._driver) {
            this._disposable.remove(this._driver);
            this._driver.dispose();
        }
        var driver = this._options.driver;
        this._driver = driver(this._options);
        this._disposable.add(this._driver);
        return this._driver;
    };
    AsyncClient.prototype.disconnect = function () {
        this._driver.disconnect();
    };
    AsyncClient.prototype.request = function (action, request, options) {
        var _this = this;
        var conditions = preconditions_1.getPreconditions(action);
        if (conditions) {
            lodash_1.each(conditions, function (x) { return x(request); });
        }
        if (!options)
            options = {};
        // Handle disconnected requests
        if (this.currentState !== enums_1.DriverState.Connected && this.currentState !== enums_1.DriverState.Error) {
            return new Promise(function (resolve, reject) {
                var disposable = _this.onState(function (state) {
                    if (state === enums_1.DriverState.Connected) {
                        disposable.dispose();
                        _this.request(action, request, options)
                            .then(resolve, reject);
                    }
                });
            });
        }
        var context = new contexts_1.RequestContext(this._uniqueId, action, request, options);
        return new Promise(function (resolve, reject) {
            _this._queue.enqueue(context).then(function (response) { return resolve(response.response); }, reject);
        });
    };
    AsyncClient.prototype.registerFixup = function (func) {
        this._fixups.push(func);
    };
    AsyncClient.prototype._respondToRequest = function (key, response) {
        key = key.toLowerCase();
        this._emitter.emit(key, response);
        this._emitter.emit(AsyncEvents.response, response);
    };
    /* tslint:disable:no-unused-variable */
    AsyncClient.prototype._fixup = function (action, request, options) {
        lodash_1.each(this._fixups, function (f) { return f(action, request, options); });
    };
    return AsyncClient;
}());
exports.AsyncClient = AsyncClient;
// <#GENERATED />
decorators_1.request(AsyncClient.prototype, "getteststartinfo");
decorators_1.request(AsyncClient.prototype, "runtest");
decorators_1.request(AsyncClient.prototype, "autocomplete");
decorators_1.request(AsyncClient.prototype, "changebuffer");
decorators_1.request(AsyncClient.prototype, "codecheck");
decorators_1.request(AsyncClient.prototype, "codeformat");
decorators_1.request(AsyncClient.prototype, "diagnostics");
decorators_1.request(AsyncClient.prototype, "close");
decorators_1.request(AsyncClient.prototype, "open");
decorators_1.request(AsyncClient.prototype, "filesChanged");
decorators_1.request(AsyncClient.prototype, "findimplementations");
decorators_1.request(AsyncClient.prototype, "findsymbols");
decorators_1.request(AsyncClient.prototype, "findusages");
decorators_1.request(AsyncClient.prototype, "fixusings");
decorators_1.request(AsyncClient.prototype, "formatAfterKeystroke");
decorators_1.request(AsyncClient.prototype, "formatRange");
decorators_1.request(AsyncClient.prototype, "getcodeactions");
decorators_1.request(AsyncClient.prototype, "gotodefinition");
decorators_1.request(AsyncClient.prototype, "gotofile");
decorators_1.request(AsyncClient.prototype, "gotoregion");
decorators_1.request(AsyncClient.prototype, "highlight");
decorators_1.request(AsyncClient.prototype, "currentfilemembersasflat");
decorators_1.request(AsyncClient.prototype, "currentfilemembersastree");
decorators_1.request(AsyncClient.prototype, "metadata");
decorators_1.request(AsyncClient.prototype, "navigatedown");
decorators_1.request(AsyncClient.prototype, "navigateup");
decorators_1.request(AsyncClient.prototype, "packagesearch");
decorators_1.request(AsyncClient.prototype, "packagesource");
decorators_1.request(AsyncClient.prototype, "packageversion");
decorators_1.request(AsyncClient.prototype, "rename");
decorators_1.request(AsyncClient.prototype, "runcodeaction");
decorators_1.request(AsyncClient.prototype, "signatureHelp");
decorators_1.request(AsyncClient.prototype, "gettestcontext");
decorators_1.request(AsyncClient.prototype, "typelookup");
decorators_1.request(AsyncClient.prototype, "updatebuffer");
decorators_1.request(AsyncClient.prototype, "project");
decorators_1.request(AsyncClient.prototype, "projects");
decorators_1.request(AsyncClient.prototype, "checkalivestatus");
decorators_1.request(AsyncClient.prototype, "checkreadystatus");
decorators_1.request(AsyncClient.prototype, "stopserver");

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hc3luYy9hc3luYy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHlGQUF5RjtBQUN6RiwrQkFBaUQsZ0JBQWdCLENBQUMsQ0FBQTtBQUNsRSx1QkFBeUUsUUFBUSxDQUFDLENBQUE7QUFFbEYsOERBQThEO0FBQzlELHNCQUFxQyxVQUFVLENBQUMsQ0FBQTtBQUNoRCx5QkFBZ0UsYUFBYSxDQUFDLENBQUE7QUFDOUUsd0JBQW9DLFlBQVksQ0FBQyxDQUFBO0FBQ2pELDhCQUFpQywwQkFBMEIsQ0FBQyxDQUFBO0FBQzVELHVCQUE2QixRQUFRLENBQUMsQ0FBQTtBQUN0QyxzQkFBc0Isa0JBQWtCLENBQUMsQ0FBQTtBQUN6QywyREFBMkQ7QUFDM0QsMkJBQXdCLHVCQUF1QixDQUFDLENBQUE7QUFFaEQsS0FBSztBQUNMLGFBQWE7QUFDYixnQkFBZ0I7QUFDaEIsS0FBSztBQUVMO0lBQUE7SUFPQSxDQUFDO0lBTmlCLG1CQUFPLEdBQUcsU0FBUyxDQUFDO0lBQ3BCLG9CQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ3RCLGtCQUFNLEdBQUcsVUFBVSxDQUFDO0lBQ3BCLGlCQUFLLEdBQUcsVUFBVSxDQUFDO0lBQ25CLGlCQUFLLEdBQUcsT0FBTyxDQUFDO0lBQ2hCLGlCQUFLLEdBQUcsT0FBTyxDQUFDO0lBQ2xDLGtCQUFDO0FBQUQsQ0FQQSxBQU9DLElBQUE7QUFQWSxtQkFBVyxjQU92QixDQUFBO0FBRUQ7SUE0RUkscUJBQVksUUFBNEI7UUE1RTVDLGlCQWlRQztRQWhRVyxhQUFRLEdBQUcsSUFBSSxxQkFBWSxFQUFFLENBQUM7UUFROUIsY0FBUyxHQUFHLGlCQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0Isc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLGdCQUFXLEdBQUcsSUFBSSxvQ0FBbUIsRUFBRSxDQUFDO1FBWXhDLHFCQUFnQixHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO1FBNkJsRCxrQkFBYSxHQUFnQixtQkFB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QyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMiLCJmaWxlIjoibGliL2FzeW5jL2FzeW5jLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE9tbmlTaGFycCBmcm9tICcuLi9vbW5pc2hhcnAtc2VydmVyJztcbi8vIGltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdCwgQXN5bmNTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmlwdGlvbn0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IElEaXNwb3NhYmxlLCBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAndHMtZGlzcG9zYWJsZXMnO1xuaW1wb3J0IHsga2V5cywgYmluZCwgaXNFcXVhbCwgdW5pcXVlSWQsIGVhY2gsIGRlZmF1bHRzLCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSUFzeW5jRHJpdmVyLCBJRHJpdmVyT3B0aW9ucywgT21uaXNoYXJwQ2xpZW50U3RhdHVzLCBBc3luY0NsaWVudE9wdGlvbnMsIEludGVybmFsQXN5bmNDbGllbnRPcHRpb25zIH0gZnJvbSAnLi4vZW51bXMnO1xuLyppbXBvcnQge0lPbW5pc2hhcnBQbHVnaW4sIGlzUGx1Z2luRHJpdmVyfSBmcm9tIFwiLi4vZW51bXNcIjsqL1xuaW1wb3J0IHsgRHJpdmVyU3RhdGUsIFJ1bnRpbWUgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyBSZXF1ZXN0Q29udGV4dCwgUmVzcG9uc2VDb250ZXh0LCBDb21tYW5kQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHRzJztcbmltcG9ydCB7IGVuc3VyZUNsaWVudE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25zJztcbmltcG9ydCB7IGdldFByZWNvbmRpdGlvbnMgfSBmcm9tICcuLi9oZWxwZXJzL3ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFF1ZXVlIH0gZnJvbSAnLi4vaGVscGVycy9xdWV1ZSc7XG4vLyBpbXBvcnQge1BsdWdpbk1hbmFnZXJ9IGZyb20gXCIuLi9oZWxwZXJzL3BsdWdpbi1tYW5hZ2VyXCI7XG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnLi4vaGVscGVycy9kZWNvcmF0b3JzJztcblxuLy8vLy9cbi8vIE5PVCBURVNURURcbi8vIE5PVCBSRUFEWSEgOilcbi8vLy8vXG5cbmV4cG9ydCBjbGFzcyBBc3luY0V2ZW50cyB7XG4gICAgcHVibGljIHN0YXRpYyByZXF1ZXN0ID0gJ3JlcXVlc3QnO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVzcG9uc2UgPSAncmVzcG9uc2UnO1xuICAgIHB1YmxpYyBzdGF0aWMgc3RhdHVzID0gJ3Jlc3BvbnNlJztcbiAgICBwdWJsaWMgc3RhdGljIHN0YXRlID0gJ3Jlc3BvbnNlJztcbiAgICBwdWJsaWMgc3RhdGljIGVycm9yID0gJ2Vycm9yJztcbiAgICBwdWJsaWMgc3RhdGljIGV2ZW50ID0gJ2V2ZW50Jztcbn1cblxuZXhwb3J0IGNsYXNzIEFzeW5jQ2xpZW50IGltcGxlbWVudHMgSUFzeW5jRHJpdmVyLCBJRGlzcG9zYWJsZSB7XG4gICAgcHJpdmF0ZSBfZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBwcml2YXRlIF9xdWV1ZTogUXVldWU8UHJvbWlzZUxpa2U8UmVzcG9uc2VDb250ZXh0PGFueSwgYW55Pj4+O1xuICAgIHByaXZhdGUgX2xpc3RlbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiBJRGlzcG9zYWJsZSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoQXN5bmNFdmVudHMuZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHsgZGlzcG9zZTogKCkgPT4gdGhpcy5fZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihBc3luY0V2ZW50cy5ldmVudCwgY2FsbGJhY2spIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZHJpdmVyOiBJQXN5bmNEcml2ZXI7XG4gICAgcHJpdmF0ZSBfdW5pcXVlSWQgPSB1bmlxdWVJZCgnY2xpZW50Jyk7XG4gICAgcHJvdGVjdGVkIF9sb3dlc3RJbmRleFZhbHVlID0gMDtcbiAgICBwcml2YXRlIF9kaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICAvL3ByaXZhdGUgX3BsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXI7XG5cbiAgICBwdWJsaWMgZ2V0IHVuaXF1ZUlkKCkgeyByZXR1cm4gdGhpcy5fdW5pcXVlSWQ7IH1cblxuICAgIHB1YmxpYyBnZXQgaWQoKSB7IHJldHVybiB0aGlzLl9kcml2ZXIuaWQ7IH1cbiAgICBwdWJsaWMgZ2V0IHNlcnZlclBhdGgoKSB7IHJldHVybiB0aGlzLl9kcml2ZXIuc2VydmVyUGF0aDsgfVxuICAgIHB1YmxpYyBnZXQgcHJvamVjdFBhdGgoKSB7IHJldHVybiB0aGlzLl9kcml2ZXIucHJvamVjdFBhdGg7IH1cbiAgICBwdWJsaWMgZ2V0IHJ1bnRpbWUoKTogUnVudGltZSB7IHJldHVybiB0aGlzLl9kcml2ZXIucnVudGltZTsgfVxuXG4gICAgcHVibGljIGdldCBvdXRzdGFuZGluZ1JlcXVlc3RzKCkgeyByZXR1cm4gdGhpcy5fY3VycmVudFJlcXVlc3RzLnNpemU7IH1cblxuICAgIHByaXZhdGUgX2N1cnJlbnRSZXF1ZXN0cyA9IG5ldyBTZXQ8UmVxdWVzdENvbnRleHQ8YW55Pj4oKTtcbiAgICBwdWJsaWMgZ2V0Q3VycmVudFJlcXVlc3RzKCkge1xuICAgICAgICBjb25zdCByZXNwb25zZToge1xuICAgICAgICAgICAgY29tbWFuZDogc3RyaW5nO1xuICAgICAgICAgICAgc2VxdWVuY2U6IHN0cmluZztcbiAgICAgICAgICAgIHNpbGVudDogYm9vbGVhbjtcbiAgICAgICAgICAgIHJlcXVlc3Q6IGFueTtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgICAgIH1bXSA9IFtdO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0cy5mb3JFYWNoKHJlcXVlc3QgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogcmVxdWVzdC5jb21tYW5kLFxuICAgICAgICAgICAgICAgIHNlcXVlbmNlOiBjbG9uZURlZXAocmVxdWVzdC5zZXF1ZW5jZSksXG4gICAgICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdC5yZXF1ZXN0LFxuICAgICAgICAgICAgICAgIHNpbGVudDogcmVxdWVzdC5zaWxlbnQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLSByZXF1ZXN0LnRpbWUuZ2V0VGltZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgb25FdmVudChjYWxsYmFjazogKGV2ZW50OiBPbW5pU2hhcnAuU3RkaW8uUHJvdG9jb2wuRXZlbnRQYWNrZXQpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbihBc3luY0V2ZW50cy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2N1cnJlbnRTdGF0ZTogRHJpdmVyU3RhdGUgPSBEcml2ZXJTdGF0ZS5EaXNjb25uZWN0ZWQ7XG4gICAgcHVibGljIGdldCBjdXJyZW50U3RhdGUoKSB7IHJldHVybiB0aGlzLl9jdXJyZW50U3RhdGU7IH1cbiAgICBwdWJsaWMgb25TdGF0ZShjYWxsYmFjazogKHN0YXRlOiBEcml2ZXJTdGF0ZSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdGVuKEFzeW5jRXZlbnRzLnN0YXRlLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uU3RhdHVzKGNhbGxiYWNrOiAoc3RhdHVzOiBPbW5pc2hhcnBDbGllbnRTdGF0dXMpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbihBc3luY0V2ZW50cy5zdGF0dXMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25SZXF1ZXN0KGNhbGxiYWNrOiAocmVxdWVzdDogUmVxdWVzdENvbnRleHQ8YW55PikgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdGVuKEFzeW5jRXZlbnRzLnJlcXVlc3QsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25SZXNwb25zZShjYWxsYmFjazogKHJlc3BvbnNlOiBSZXNwb25zZUNvbnRleHQ8YW55LCBhbnk+KSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0ZW4oQXN5bmNFdmVudHMucmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25FcnJvcihjYWxsYmFjazogKGV2ZW50OiBPbW5pU2hhcnAuU3RkaW8uUHJvdG9jb2wuRXZlbnRQYWNrZXQpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbihBc3luY0V2ZW50cy5lcnJvciwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29wdGlvbnM6IEludGVybmFsQXN5bmNDbGllbnRPcHRpb25zICYgSURyaXZlck9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3Rvcihfb3B0aW9uczogQXN5bmNDbGllbnRPcHRpb25zKSB7XG4gICAgICAgIF9vcHRpb25zLmRyaXZlciA9IF9vcHRpb25zLmRyaXZlciB8fCAoKG9wdGlvbnM6IElEcml2ZXJPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcmVxdWlyZSgnLi4vZHJpdmVycy9zdGRpbycpO1xuICAgICAgICAgICAgY29uc3QgZHJpdmVyRmFjdG9yeSA9IGl0ZW1ba2V5cyhpdGVtKVswXV07XG4gICAgICAgICAgICByZXR1cm4gbmV3IGRyaXZlckZhY3RvcnkodGhpcy5fb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSA8YW55PmRlZmF1bHRzKF9vcHRpb25zLCA8SURyaXZlck9wdGlvbnM+e1xuICAgICAgICAgICAgb25TdGF0ZTogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KEFzeW5jRXZlbnRzLnN0YXRlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FdmVudDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KEFzeW5jRXZlbnRzLmV2ZW50LCBldmVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Db21tYW5kOiAocGFja2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2VDb250ZXh0KG5ldyBSZXF1ZXN0Q29udGV4dCh0aGlzLl91bmlxdWVJZCwgcGFja2V0LkNvbW1hbmQsIHt9LCB7fSwgJ2NvbW1hbmQnKSwgcGFja2V0LkJvZHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRUb1JlcXVlc3QocGFja2V0LkNvbW1hbmQsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW5zdXJlQ2xpZW50T3B0aW9ucyhfb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fcmVzZXREcml2ZXIoKTtcblxuICAgICAgICBjb25zdCBnZXRTdGF0dXNWYWx1ZXMgPSAoKSA9PiA8T21uaXNoYXJwQ2xpZW50U3RhdHVzPih7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5fZHJpdmVyLmN1cnJlbnRTdGF0ZSxcbiAgICAgICAgICAgIG91dGdvaW5nUmVxdWVzdHM6IHRoaXMub3V0c3RhbmRpbmdSZXF1ZXN0cyxcbiAgICAgICAgICAgIGhhc091dGdvaW5nUmVxdWVzdHM6IHRoaXMub3V0c3RhbmRpbmdSZXF1ZXN0cyA+IDBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGxhc3RTdGF0dXM6IE9tbmlzaGFycENsaWVudFN0YXR1cyA9IDxhbnk+e307XG4gICAgICAgIGNvbnN0IGVtaXRTdGF0dXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdTdGF0dXMgPSBnZXRTdGF0dXNWYWx1ZXMoKTtcbiAgICAgICAgICAgIGlmICghaXNFcXVhbChnZXRTdGF0dXNWYWx1ZXMoKSwgbGFzdFN0YXR1cykpIHtcbiAgICAgICAgICAgICAgICBsYXN0U3RhdHVzID0gbmV3U3RhdHVzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChBc3luY0V2ZW50cy5zdGF0dXMsIGxhc3RTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub24oQXN5bmNFdmVudHMucmVxdWVzdCwgZW1pdFN0YXR1cyk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub24oQXN5bmNFdmVudHMucmVzcG9uc2UsIGVtaXRTdGF0dXMpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IG5ldyBRdWV1ZTxQcm9taXNlTGlrZTxSZXNwb25zZUNvbnRleHQ8YW55LCBhbnk+Pj4odGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeSwgYmluZCh0aGlzLmhhbmRsZVJlc3VsdCwgdGhpcykpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyLm9uKEFzeW5jRXZlbnRzLnJlc3BvbnNlLCAoY29udGV4dDogUmVzcG9uc2VDb250ZXh0PGFueSwgYW55PikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChBc3luY0V2ZW50cy5ldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBFdmVudDogJ2xvZycsXG4gICAgICAgICAgICAgICAgICAgIEJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2U6IGAvJHtjb250ZXh0LmNvbW1hbmR9ICAke2NvbnRleHQucmVzcG9uc2VUaW1lfW1zIChyb3VuZCB0cmlwKWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dMZXZlbDogJ0lORk9STUFUSU9OJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBTZXE6IC0xLFxuICAgICAgICAgICAgICAgICAgICBUeXBlOiAnbG9nJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2FibGUuaXNEaXNwb3NlZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGhhbmRsZVJlc3VsdChjb250ZXh0OiBSZXF1ZXN0Q29udGV4dDxhbnk+LCBjb21wbGV0ZT86ICgpID0+IHZvaWQpOiBQcm9taXNlPFJlc3BvbnNlQ29udGV4dDxhbnksIGFueT4+IHtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIHdheSB0byBub3QgcmVwZWF0IHRoZSBzYW1lIGNvbW1hbmRzLCBpZiB0aGVyZSBhcmUgb3V0c3RhbmRpbmcgKHRpbWVkIG91dCkgcmVxdWVzdHMuXG4gICAgICAgIC8vIEluIHNvbWUgY2FzZXMgZm9yIGV4YW1wbGUgZmluZCB1c2FnZXMgaGFzIHRha2VuIG92ZXIgMzAgc2Vjb25kcywgc28gd2Ugc2hvdWxkblwidCBoaXQgdGhlIHNlcnZlciB3aXRoIG11bHRpcGxlIG9mIHRoZXNlIHJlcXVlc3RzIChhcyB3ZSBzbGFtIHRoZSBjcFUpXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RyaXZlci5yZXF1ZXN0PGFueSwgYW55Pihjb250ZXh0LmNvbW1hbmQsIGNvbnRleHQucmVxdWVzdCk7XG5cbiAgICAgICAgY29uc3QgY21wID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlcXVlc3RzLmRlbGV0ZShjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRUb1JlcXVlc3QoY29udGV4dC5jb21tYW5kLCBuZXcgUmVzcG9uc2VDb250ZXh0KGNvbnRleHQsIGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgY21wKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChBc3luY0V2ZW50cy5lcnJvciwgbmV3IENvbW1hbmRDb250ZXh0KGNvbnRleHQuY29tbWFuZCwgZXJyb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uZFRvUmVxdWVzdChjb250ZXh0LmNvbW1hbmQsIG5ldyBSZXNwb25zZUNvbnRleHQoY29udGV4dCwgbnVsbCwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50UmVxdWVzdHMuZGVsZXRlKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBjbXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGxvZyhtZXNzYWdlOiBzdHJpbmcsIGxvZ0xldmVsPzogc3RyaW5nKSB7XG4gICAgICAgIC8vIGxvZyBvdXIgY29tcGxldGUgcmVzcG9uc2UgdGltZVxuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoQXN5bmNFdmVudHMuZXZlbnQsIHtcbiAgICAgICAgICAgIEV2ZW50OiAnbG9nJyxcbiAgICAgICAgICAgIEJvZHk6IHtcbiAgICAgICAgICAgICAgICBNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIExvZ0xldmVsOiBsb2dMZXZlbCA/IGxvZ0xldmVsLnRvVXBwZXJDYXNlKCkgOiAnSU5GT1JNQVRJT04nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgU2VxOiAtMSxcbiAgICAgICAgICAgIFR5cGU6ICdsb2cnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb25uZWN0KCkge1xuICAgICAgICAvLyBDdXJyZW50bHkgY29ubmVjdGluZ1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgPj0gRHJpdmVyU3RhdGUuRG93bmxvYWRpbmcgJiYgdGhpcy5jdXJyZW50U3RhdGUgPD0gRHJpdmVyU3RhdGUuQ29ubmVjdGVkKSByZXR1cm47XG4gICAgICAgIC8vIEJvb3RzdHJhcCBwbHVnaW5zIGhlcmVcblxuICAgICAgICB0aGlzLl9jdXJyZW50UmVxdWVzdHMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fZHJpdmVyLmNvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNldERyaXZlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RyaXZlcikge1xuICAgICAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5yZW1vdmUodGhpcy5fZHJpdmVyKTtcbiAgICAgICAgICAgIHRoaXMuX2RyaXZlci5kaXNwb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7ZHJpdmVyfSA9IHRoaXMuX29wdGlvbnM7XG4gICAgICAgIHRoaXMuX2RyaXZlciA9IGRyaXZlcih0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQodGhpcy5fZHJpdmVyKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZHJpdmVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNjb25uZWN0KCkge1xuICAgICAgICB0aGlzLl9kcml2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXF1ZXN0PFRSZXF1ZXN0LCBUUmVzcG9uc2U+KGFjdGlvbjogc3RyaW5nLCByZXF1ZXN0OiBUUmVxdWVzdCwgb3B0aW9ucz86IE9tbmlTaGFycC5SZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8VFJlc3BvbnNlPiB7XG4gICAgICAgIGxldCBjb25kaXRpb25zID0gZ2V0UHJlY29uZGl0aW9ucyhhY3Rpb24pO1xuICAgICAgICBpZiAoY29uZGl0aW9ucykgeyBlYWNoKGNvbmRpdGlvbnMsIHggPT4geChyZXF1ZXN0KSk7IH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSA8T21uaVNoYXJwLlJlcXVlc3RPcHRpb25zPnt9O1xuICAgICAgICAvLyBIYW5kbGUgZGlzY29ubmVjdGVkIHJlcXVlc3RzXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGF0ZSAhPT0gRHJpdmVyU3RhdGUuQ29ubmVjdGVkICYmIHRoaXMuY3VycmVudFN0YXRlICE9PSBEcml2ZXJTdGF0ZS5FcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFRSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkaXNwb3NhYmxlID0gdGhpcy5vblN0YXRlKHN0YXRlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBEcml2ZXJTdGF0ZS5Db25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0PFRSZXF1ZXN0LCBUUmVzcG9uc2U+KGFjdGlvbiwgcmVxdWVzdCwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgUmVxdWVzdENvbnRleHQodGhpcy5fdW5pcXVlSWQsIGFjdGlvbiwgcmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLmVucXVldWUoY29udGV4dCkudGhlbigocmVzcG9uc2UpID0+IHJlc29sdmUocmVzcG9uc2UucmVzcG9uc2UpLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9maXh1cHM6IEFycmF5PChhY3Rpb246IHN0cmluZywgcmVxdWVzdDogYW55LCBvcHRpb25zPzogT21uaVNoYXJwLlJlcXVlc3RPcHRpb25zKSA9PiB2b2lkPiA9IFtdO1xuICAgIHB1YmxpYyByZWdpc3RlckZpeHVwKGZ1bmM6IChhY3Rpb246IHN0cmluZywgcmVxdWVzdDogYW55LCBvcHRpb25zPzogT21uaVNoYXJwLlJlcXVlc3RPcHRpb25zKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX2ZpeHVwcy5wdXNoKGZ1bmMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3Jlc3BvbmRUb1JlcXVlc3Qoa2V5OiBzdHJpbmcsIHJlc3BvbnNlOiBSZXNwb25zZUNvbnRleHQ8YW55LCBhbnk+KSB7XG4gICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChBc3luY0V2ZW50cy5yZXNwb25zZSwgcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuICAgIHByaXZhdGUgX2ZpeHVwPFRSZXF1ZXN0PihhY3Rpb246IHN0cmluZywgcmVxdWVzdDogVFJlcXVlc3QsIG9wdGlvbnM/OiBPbW5pU2hhcnAuUmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgZWFjaCh0aGlzLl9maXh1cHMsIGYgPT4gZihhY3Rpb24sIHJlcXVlc3QsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyogdHNsaW50OmVuYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cblxuICAgIC8qcHVibGljIGFkZFBsdWdpbihwbHVnaW46IElPbW5pc2hhcnBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5fcGx1Z2luTWFuYWdlci5hZGQocGx1Z2luKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlUGx1Z2luKHBsdWdpbjogSU9tbmlzaGFycFBsdWdpbikge1xuICAgICAgICB0aGlzLl9wbHVnaW5NYW5hZ2VyLnJlbW92ZShwbHVnaW4pO1xuICAgIH0qL1xufVxuXG4vLyA8I0dFTkVSQVRFRCAvPlxucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZ2V0dGVzdHN0YXJ0aW5mb1wiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcInJ1bnRlc3RcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJhdXRvY29tcGxldGVcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjaGFuZ2VidWZmZXJcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjb2RlY2hlY2tcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjb2RlZm9ybWF0XCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZGlhZ25vc3RpY3NcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjbG9zZVwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcIm9wZW5cIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJmaWxlc0NoYW5nZWRcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJmaW5kaW1wbGVtZW50YXRpb25zXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZmluZHN5bWJvbHNcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJmaW5kdXNhZ2VzXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZml4dXNpbmdzXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZm9ybWF0QWZ0ZXJLZXlzdHJva2VcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJmb3JtYXRSYW5nZVwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcImdldGNvZGVhY3Rpb25zXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiZ290b2RlZmluaXRpb25cIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJnb3RvZmlsZVwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcImdvdG9yZWdpb25cIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJoaWdobGlnaHRcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjdXJyZW50ZmlsZW1lbWJlcnNhc2ZsYXRcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjdXJyZW50ZmlsZW1lbWJlcnNhc3RyZWVcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJtZXRhZGF0YVwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcIm5hdmlnYXRlZG93blwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcIm5hdmlnYXRldXBcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJwYWNrYWdlc2VhcmNoXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwicGFja2FnZXNvdXJjZVwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcInBhY2thZ2V2ZXJzaW9uXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwicmVuYW1lXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwicnVuY29kZWFjdGlvblwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcInNpZ25hdHVyZUhlbHBcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJnZXR0ZXN0Y29udGV4dFwiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcInR5cGVsb29rdXBcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJ1cGRhdGVidWZmZXJcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJwcm9qZWN0XCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwicHJvamVjdHNcIik7XG5yZXF1ZXN0KEFzeW5jQ2xpZW50LnByb3RvdHlwZSwgXCJjaGVja2FsaXZlc3RhdHVzXCIpO1xucmVxdWVzdChBc3luY0NsaWVudC5wcm90b3R5cGUsIFwiY2hlY2tyZWFkeXN0YXR1c1wiKTtcbnJlcXVlc3QoQXN5bmNDbGllbnQucHJvdG90eXBlLCBcInN0b3BzZXJ2ZXJcIik7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
