"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.serverLineNumberArrays = exports.serverLineNumbers = undefined;
exports.requestMutator = requestMutator;
exports.responseMutator = responseMutator;

var _lodash = require("lodash");

var serverLineNumbers = exports.serverLineNumbers = ["Line", "Column", "StartLine", "StartColumn", "EndLine", "EndColumn", "SelectionStartColumn", "SelectionStartLine", "SelectionEndColumn", "SelectionEndLine", "Selection.Start.Line", "Selection.Start.Column", "Selection.End.Line", "Selection.End.Column", "Location.Line", "Location.Column", "Location.EndLine", "Location.EndColumn"];
var serverLineNumberArrays = exports.serverLineNumberArrays = ["Lines"];
function requestMutator(data) {
    if ((0, _lodash.isArray)(data)) {
        (0, _lodash.each)(data, function (item) {
            return requestMutator(item);
        });
        return data;
    }
    (0, _lodash.each)(serverLineNumbers, function (path) {
        var hasPath = (0, _lodash.has)(data, path);
        if (hasPath) {
            var value = (0, _lodash.get)(data, path);
            value = value + 1;
            (0, _lodash.set)(data, path, value);
        }
    });
    (0, _lodash.each)(serverLineNumberArrays, function (path) {
        var hasPath = (0, _lodash.has)(data, path);
        if (hasPath) {
            var value = (0, _lodash.get)(data, path);
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i] + 1;
            }
            (0, _lodash.set)(data, path, value);
        }
    });
    (0, _lodash.each)((0, _lodash.filter)(data, function (z) {
        return (0, _lodash.isArray)(z);
    }), function (item) {
        return requestMutator(item);
    });
    return data;
}
function responseMutator(data) {
    if ((0, _lodash.isArray)(data)) {
        (0, _lodash.each)(data, function (item) {
            return responseMutator(item);
        });
        return data;
    }
    (0, _lodash.each)(serverLineNumbers, function (path) {
        var hasPath = (0, _lodash.has)(data, path);
        if (hasPath) {
            var value = (0, _lodash.get)(data, path);
            value = value - 1;
            (0, _lodash.set)(data, path, value);
        }
    });
    (0, _lodash.each)(serverLineNumberArrays, function (path) {
        var hasPath = (0, _lodash.has)(data, path);
        if (hasPath) {
            var value = (0, _lodash.get)(data, path);
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i] + 1;
            }
            (0, _lodash.set)(data, path, value);
        }
    });
    (0, _lodash.each)((0, _lodash.filter)(data, function (z) {
        return (0, _lodash.isArray)(z);
    }), function (item) {
        return responseMutator(item);
    });
    return data;
}
//# sourceMappingURL=data:application/json;base64,
