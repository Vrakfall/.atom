"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResponseContext = exports.RequestContext = exports.CommandContext = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _responseHandling = require("./response-handling");

var _create = require("./operators/create");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var stripBom = require("strip-bom");

var CommandContext = exports.CommandContext = function CommandContext(command, value) {
    _classCallCheck(this, CommandContext);

    this.command = command;
    this.value = value;
};

var RequestContext = exports.RequestContext = function () {
    function RequestContext(clientId, command, request, _ref) {
        var silent = _ref.silent;
        var oneBasedIndices = _ref.oneBasedIndices;
        var sequence = arguments.length <= 4 || arguments[4] === undefined ? (0, _lodash.uniqueId)("__request") : arguments[4];

        _classCallCheck(this, RequestContext);

        this.clientId = clientId;
        if (command) this.command = command.toLowerCase();
        if ((0, _lodash.isObject)(request)) {
            if (request.Buffer) {
                request.Buffer = stripBom(request.Buffer);
            }
            var obj = (0, _lodash.cloneDeep)(request);
            if (!oneBasedIndices) {
                obj = (0, _responseHandling.requestMutator)(obj);
            }
            this.request = Object.freeze(obj);
        } else {
            this.request = request;
        }
        this.silent = !!silent;
        this.sequence = sequence;
        this.time = new Date();
        Object.freeze(this);
    }

    _createClass(RequestContext, [{
        key: "isCommand",
        value: function isCommand(command) {
            if (command && this.command) {
                return command.toLowerCase() === this.command;
            }
            return null;
        }
    }, {
        key: "getResponse",
        value: function getResponse(stream) {
            var _this = this;

            return (0, _create.createObservable)(function (observer) {
                return stream.first(function (res) {
                    return res.sequence === _this.sequence;
                }).subscribe(function (res) {
                    if (!res.failed) {
                        observer.next(res.response);
                        observer.complete();
                    } else {
                        observer.complete();
                    }
                });
            });
        }
    }]);

    return RequestContext;
}();

var ResponseContext = exports.ResponseContext = function () {
    function ResponseContext(_ref2) {
        var clientId = _ref2.clientId;
        var request = _ref2.request;
        var command = _ref2.command;
        var sequence = _ref2.sequence;
        var time = _ref2.time;
        var silent = _ref2.silent;
        var oneBasedIndices = _ref2.oneBasedIndices;
        var response = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var failed = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

        _classCallCheck(this, ResponseContext);

        if (command) this.command = command.toLowerCase();
        if ((0, _lodash.isObject)(response)) {
            if (!oneBasedIndices) {
                response = (0, _responseHandling.responseMutator)(response);
            }
            this.response = Object.freeze(response);
        } else {
            this.response = response;
        }
        this.clientId = clientId;
        this.request = request;
        this.command = command;
        this.sequence = sequence;
        this.time = new Date();
        this.silent = !!silent;
        this.failed = !!failed;
        this.responseTime = this.time.getTime() - time.getTime();
        Object.freeze(this);
    }

    _createClass(ResponseContext, [{
        key: "isCommand",
        value: function isCommand(command) {
            if (command && this.command) {
                return command.toLowerCase() === this.command;
            }
            return null;
        }
    }]);

    return ResponseContext;
}();
//# sourceMappingURL=data:application/json;base64,
