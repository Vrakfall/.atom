"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findCandidates = exports.Candidate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.ifEmpty = ifEmpty;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require("path");

var _rxjs = require("rxjs");

require("rxjs/add/operator/distinctKey");

var _disposables = require("./disposables");

var _create = require("./operators/create");

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var glob = require("globby");
function ifEmpty(observable, other) {
    return (0, _create.createObservable)(function (observer) {
        var hasValue = false;
        var cd = new _disposables.CompositeDisposable();
        cd.add(observable.subscribe(function (value) {
            hasValue = true;
            observer.next(value);
        }, function (e) {
            return observer.error(e);
        }, function () {
            if (!hasValue) {
                cd.add(other.subscribe(function (value) {
                    return observer.next(value);
                }, function (e) {
                    return observer.error(e);
                }, function () {
                    return observer.complete();
                }));
            } else {
                observer.complete();
            }
        }));
        return new _rxjs.Subscription(function () {
            return cd.dispose();
        });
    });
}

var Candidate = exports.Candidate = function () {
    function Candidate(originalFile, predicate) {
        _classCallCheck(this, Candidate);

        this.originalFile = originalFile = (0, _path.normalize)(originalFile);
        this.path = _lodash2.default.endsWith(originalFile, ".sln") ? originalFile : (0, _path.dirname)(originalFile);
        this.isProject = predicate(originalFile);
        Object.freeze(this);
    }

    _createClass(Candidate, [{
        key: "toString",
        value: function toString() {
            return this.path;
        }
    }]);

    return Candidate;
}();

var findCandidates = exports.findCandidates = function () {
    function realFindCandidates(location, logger) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        location = _lodash2.default.trimEnd(location, _path.sep);
        var solutionFilesToSearch = options.solutionFilesToSearch || (options.solutionFilesToSearch = ["global.json", "*.sln"]);
        var projectFilesToSearch = options.projectFilesToSearch || (options.projectFilesToSearch = ["project.json", "*.csproj"]);
        var sourceFilesToSearch = options.sourceFilesToSearch || (options.sourceFilesToSearch = ["*.cs"]);
        var solutionIndependentSourceFilesToSearch = options.solutionIndependentSourceFilesToSearch || (options.solutionIndependentSourceFilesToSearch = ["*.csx"]);
        var solutionsOrProjects = searchForCandidates(location, solutionFilesToSearch, projectFilesToSearch, logger).toArray().flatMap(function (result) {
            return result.length ? _rxjs.Observable.from(result) : searchForCandidates(location, projectFilesToSearch, [], logger);
        }).toArray().map(squashCandidates);
        var independentSourceFiles = searchForCandidates(location, solutionIndependentSourceFilesToSearch, [], logger).toArray();
        var baseFiles = _rxjs.Observable.concat(solutionsOrProjects, independentSourceFiles).flatMap(function (x) {
            return x;
        });
        var sourceFiles = searchForCandidates(location, sourceFilesToSearch, [], logger);
        var predicate = function predicate(path) {
            return _lodash2.default.some(solutionFilesToSearch.concat(projectFilesToSearch), function (pattern) {
                return _lodash2.default.endsWith(path, _lodash2.default.trimStart(pattern, "*"));
            });
        };
        return ifEmpty(baseFiles, sourceFiles).map(function (file) {
            return new Candidate(file, predicate);
        }).distinctKey("path").toArray().do(function (candidates) {
            return logger.log("Omni Project Candidates: Found " + candidates);
        });
    }
    function findCandidates(location, logger) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        return realFindCandidates(location, logger, options).map(function (z) {
            return z.map(function (x) {
                return x.toString();
            });
        });
    }
    findCandidates.withCandidates = realFindCandidates;
    return findCandidates;
}();
function squashCandidates(candidates) {
    var rootCandidateCount = getMinCandidate(candidates);
    return _lodash2.default.uniq(_lodash2.default.filter(_lodash2.default.map(candidates, _path.normalize), function (z) {
        return z.split(_path.sep).length === rootCandidateCount;
    }));
}
function getMinCandidate(candidates) {
    if (!candidates.length) return -1;
    return _lodash2.default.minBy(_lodash2.default.map(candidates, _path.normalize), function (z) {
        return z.split(_path.sep).length;
    }).split(_path.sep).length;
}
function searchForCandidates(location, filesToSearch, projectFilesToSearch, logger) {
    var locations = location.split(_path.sep);
    locations = locations.map(function (loc, index) {
        return _lodash2.default.take(locations, locations.length - index).join(_path.sep);
    });
    locations = locations.slice(0, Math.min(5, locations.length));
    var rootObservable = _rxjs.Observable.from(locations).subscribeOn(_rxjs.Scheduler.queue).map(function (loc) {
        return {
            loc: loc,
            files: filesToSearch.map(function (fileName) {
                return (0, _path.join)(loc, fileName);
            })
        };
    }).flatMap(function (_ref) {
        var loc = _ref.loc;
        var files = _ref.files;

        logger.log("Omni Project Candidates: Searching " + loc + " for " + filesToSearch);
        return _rxjs.Observable.from(files).flatMap(function (file) {
            return glob([file], { cache: {} });
        }).map(function (x) {
            if (x.length > 1) {
                var unitySolutionIndex = _lodash2.default.findIndex(x, function (z) {
                    return _lodash2.default.endsWith(z, "-csharp.sln");
                });
                if (unitySolutionIndex > -1) {
                    (function () {
                        var unitySolution = x[unitySolutionIndex];
                        var baseSolution = unitySolution.substr(0, unitySolution.indexOf("-csharp.sln")) + ".sln";
                        var baseSolutionIndex = _lodash2.default.findIndex(x, function (z) {
                            return z.toLowerCase() === baseSolution.toLowerCase();
                        });
                        if (baseSolutionIndex > -1) {
                            x.splice(baseSolutionIndex, 1);
                        }
                    })();
                }
            }
            if (_lodash2.default.some(x, function (file) {
                return _lodash2.default.endsWith(file, ".sln");
            })) {
                return x.filter(function (file) {
                    var content = (0, _fs.readFileSync)(file).toString();
                    return _lodash2.default.some(projectFilesToSearch, function (path) {
                        return content.indexOf(_lodash2.default.trimStart(path, "*")) > -1;
                    });
                });
            }
            return x;
        });
    }).filter(function (z) {
        return z.length > 0;
    }).defaultIfEmpty([]).first().flatMap(function (z) {
        return z;
    });
    return rootObservable;
}
//# sourceMappingURL=data:application/json;base64,
