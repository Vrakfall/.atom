"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.spawn = undefined;

var _child_process = require("child_process");

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require("fs");

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var win32 = "win32" === process.platform;
var spawn = exports.spawn = function spawn(cmd, args, opts) {
    if (win32) {
        if ((0, _path.extname)(cmd).toLowerCase() !== ".exe" && cmd.indexOf(" ") !== -1) {
            args = [["/s", "/c", "\"" + [cmd].concat(args).map(function (a) {
                if (/^[^"].* .*[^"]/.test(a)) return "\"" + a + "\"";return a;
            }).join(" ") + "\""].join(" ")];
            cmd = "cmd";
        } else if (!(0, _fs.existsSync)(cmd)) {
            args = ["/s", "/c", cmd].concat(args);
            cmd = "cmd";
        } else if ((0, _path.extname)(cmd) !== ".exe") {
            args = ["/c", cmd].concat(args);
            cmd = "cmd";
        }
    }
    return _child_process2.default.spawn(cmd, args, opts);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93aW5kb3dzL3N1cGVyLXNwYXduLmpzIiwibGliL3dpbmRvd3Mvc3VwZXItc3Bhd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUNvQkEsSUFBSSxRQUFRLFlBQVksUUFBUSxRQUFSO0FBb0JqQixJQUFNLHdCQUF5QixTQUFBLEtBQUEsQ0FBZSxHQUFmLEVBQW9CLElBQXBCLEVBQTBCLElBQTFCLEVBQThCO0FBQ2hFLFFBQUksS0FBSixFQUFXO0FBR1AsWUFBSSxtQkFBUSxHQUFSLEVBQWEsV0FBYixPQUErQixNQUEvQixJQUF5QyxJQUFJLE9BQUosQ0FBWSxHQUFaLE1BQXFCLENBQUMsQ0FBRCxFQUFJO0FBRWxFLG1CQUFPLENBQUMsQ0FBQyxJQUFELEVBQU8sSUFBUCxTQUFpQixDQUFDLEdBQUQsRUFBTSxNQUFOLENBQWEsSUFBYixFQUFtQixHQUFuQixDQUF1QixVQUFTLENBQVQsRUFBVTtBQUFJLG9CQUFJLGlCQUFpQixJQUFqQixDQUFzQixDQUF0QixDQUFKLEVBQThCLGNBQVcsUUFBWCxDQUE5QixPQUFzRCxDQUFQLENBQW5EO2FBQVYsQ0FBdkIsQ0FBaUcsSUFBakcsQ0FBc0csR0FBdEcsUUFBakIsRUFBZ0ksSUFBaEksQ0FBcUksR0FBckksQ0FBRCxDQUFQLENBRmtFO0FBR2xFLGtCQUFNLEtBQU4sQ0FIa0U7U0FBdEUsTUFJTyxJQUFJLENBQUMsb0JBQVcsR0FBWCxDQUFELEVBQWtCO0FBRXpCLG1CQUFPLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCLE1BQWxCLENBQXlCLElBQXpCLENBQVAsQ0FGeUI7QUFHekIsa0JBQU0sS0FBTixDQUh5QjtTQUF0QixNQUlBLElBQUksbUJBQVEsR0FBUixNQUFpQixNQUFqQixFQUF5QjtBQUNoQyxtQkFBTyxDQUFDLElBQUQsRUFBTyxHQUFQLEVBQVksTUFBWixDQUFtQixJQUFuQixDQUFQLENBRGdDO0FBRWhDLGtCQUFNLEtBQU4sQ0FGZ0M7U0FBN0I7S0FYWDtBQWlCQSxXQUFPLHdCQUFHLEtBQUgsQ0FBUyxHQUFULEVBQWMsSUFBZCxFQUFvQixJQUFwQixDQUFQLENBbEJnRTtDQUE5QiIsImZpbGUiOiJsaWIvd2luZG93cy9zdXBlci1zcGF3bi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcCBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgZXh0bmFtZSB9IGZyb20gXCJwYXRoXCI7XG52YXIgd2luMzIgPSBcIndpbjMyXCIgPT09IHByb2Nlc3MucGxhdGZvcm07XG5leHBvcnQgY29uc3Qgc3Bhd24gPSBmdW5jdGlvbiBzcGF3bihjbWQsIGFyZ3MsIG9wdHMpIHtcbiAgICBpZiAod2luMzIpIHtcbiAgICAgICAgaWYgKGV4dG5hbWUoY21kKS50b0xvd2VyQ2FzZSgpICE9PSBcIi5leGVcIiAmJiBjbWQuaW5kZXhPZihcIiBcIikgIT09IC0xKSB7XG4gICAgICAgICAgICBhcmdzID0gW1tcIi9zXCIsIFwiL2NcIiwgYFwiJHtbY21kXS5jb25jYXQoYXJncykubWFwKGZ1bmN0aW9uIChhKSB7IGlmICgvXlteXCJdLiogLipbXlwiXS8udGVzdChhKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXCIke2F9XCJgOyByZXR1cm4gYTsgfSkuam9pbihcIiBcIil9XCJgXS5qb2luKFwiIFwiKV07XG4gICAgICAgICAgICBjbWQgPSBcImNtZFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFleGlzdHNTeW5jKGNtZCkpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBbXCIvc1wiLCBcIi9jXCIsIGNtZF0uY29uY2F0KGFyZ3MpO1xuICAgICAgICAgICAgY21kID0gXCJjbWRcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHRuYW1lKGNtZCkgIT09IFwiLmV4ZVwiKSB7XG4gICAgICAgICAgICBhcmdzID0gW1wiL2NcIiwgY21kXS5jb25jYXQoYXJncyk7XG4gICAgICAgICAgICBjbWQgPSBcImNtZFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcC5zcGF3bihjbWQsIGFyZ3MsIG9wdHMpO1xufTtcbiIsIi8qXG4gICAgTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICAgIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICAgIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gICAgcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICAgIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAgICBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAgICB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAgICBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICAgIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gICAgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gICAgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICAgIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IGNwIGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQge2V4aXN0c1N5bmN9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHtleHRuYW1lfSBmcm9tIFwicGF0aFwiO1xudmFyIHdpbjMyID0gXCJ3aW4zMlwiID09PSBwcm9jZXNzLnBsYXRmb3JtO1xuXG4vKipcbiAqIEEgd2luZG93cy1jb21wYXRpYmxlIHNwYXduIG1ldGhvZC4gU3VjY2VlZHMgZm9yIGNoaWxkIGV4aXQgY29kZSA9PT0gMC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbWRcbiAqIEBwYXJhbSB7c3RyaW5nW119IFthcmdzXVxuICogQHBhcmFtIHtvcHRzfSBbb3B0c11cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gLSBzdGFuZGFyZCBOb2RlIGNhbGxiYWNrLCBvbWl0IGlmIHlvdSB3YW50IHRvIHVzZSBhIHByb21pc2UuXG4gKiBAcmV0dXJucyB7US5wcm9taXNlfHVuZGVmaW5lZH0gLSByZXR1cm5zIGEgcHJvbWlzZSBvciB1bmRlZmluZWQgaWYgYSBjYWxsYmFjayBpcyBwYXNzZWQuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gb3B0c1xuICogQHByb3BlcnR5IHtib29sZWFufSBbcHJpbnRDb21tYW5kPWZhbHNlXSAtIFdoZXRoZXIgdG8gbG9nIHRoZSBjb21tYW5kXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RkaW8gLVxuICogICAgICdkZWZhdWx0JyBpcyB0byBjYXB0dXJlIG91dHB1dCBhbmQgcmV0dXJuaW5nIGl0IGFzIGEgc3RyaW5nIHRvIHN1Y2Nlc3MgKHNhbWUgYXMgZXhlYykuXG4gKiAgICAgJ2lnbm9yZScgbWVhbnMgZG9uJ3QgYm90aGVyIGNhcHR1cmluZyBpdC5cbiAqICAgICAnaW5oZXJpdCcgbWVhbnMgcGlwZSB0aGUgaW5wdXQgJiBvdXRwdXQuIFRoaXMgaXMgcmVxdWlyZWQgZm9yIGFueXRoaW5nIHRoYXQgcHJvbXB0cy5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBlbnYgLSBNYXAgb2YgZXh0cmEgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGN3ZCAtIFdvcmtpbmcgZGlyZWN0b3J5IGZvciB0aGUgY29tbWFuZC5cbiAqL1xuXG5leHBvcnQgY29uc3Qgc3Bhd246IHR5cGVvZiBjcC5zcGF3biA9IGZ1bmN0aW9uIHNwYXduKGNtZCwgYXJncywgb3B0cykge1xuICAgIGlmICh3aW4zMikge1xuICAgICAgICAvLyBJZiB3ZSBjb3VsZG4ndCBmaW5kIHRoZSBmaWxlLCBsaWtlbHkgd2UnbGwgZW5kIHVwIGZhaWxpbmcsXG4gICAgICAgIC8vIGJ1dCBmb3IgdGhpbmdzIGxpa2UgXCJkZWxcIiwgY21kIHdpbGwgZG8gdGhlIHRyaWNrLlxuICAgICAgICBpZiAoZXh0bmFtZShjbWQpLnRvTG93ZXJDYXNlKCkgIT09IFwiLmV4ZVwiICYmIGNtZC5pbmRleE9mKFwiIFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gdXNlIC9zIHRvIGVuc3VyZSB0aGF0IHNwYWNlcyBhcmUgcGFyc2VkIHByb3Blcmx5IHdpdGggY21kIHNwYXduZWQgY29udGVudFxuICAgICAgICAgICAgYXJncyA9IFtbXCIvc1wiLCBcIi9jXCIsIGBcIiR7W2NtZF0uY29uY2F0KGFyZ3MpLm1hcChmdW5jdGlvbihhKSB7IGlmICgvXlteXCJdLiogLipbXlwiXS8udGVzdChhKSkgcmV0dXJuIGBcIiR7YX1cImA7IHJldHVybiBhOyB9KS5qb2luKFwiIFwiKX1cImBdLmpvaW4oXCIgXCIpXTtcbiAgICAgICAgICAgIGNtZCA9IFwiY21kXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoIWV4aXN0c1N5bmMoY21kKSkgeyAvLyAnZWNobycsICdkaXInLCAnZGVsJywgZXRjXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHVzZSAvcyB0byBlbnN1cmUgdGhhdCBzcGFjZXMgYXJlIHBhcnNlZCBwcm9wZXJseSB3aXRoIGNtZCBzcGF3bmVkIGNvbnRlbnRcbiAgICAgICAgICAgIGFyZ3MgPSBbXCIvc1wiLCBcIi9jXCIsIGNtZF0uY29uY2F0KGFyZ3MpO1xuICAgICAgICAgICAgY21kID0gXCJjbWRcIjtcbiAgICAgICAgfSBlbHNlIGlmIChleHRuYW1lKGNtZCkgIT09IFwiLmV4ZVwiKSB7IC8vICouanMsICouYmF0LCBldGNcbiAgICAgICAgICAgIGFyZ3MgPSBbXCIvY1wiLCBjbWRdLmNvbmNhdChhcmdzKTtcbiAgICAgICAgICAgIGNtZCA9IFwiY21kXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3Auc3Bhd24oY21kLCBhcmdzLCBvcHRzKTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
