"use strict";

var _child_process = require("child_process");

var argv = require("yargs").argv;
var serverPath = argv.serverPath;
var projectPath = argv.projectPath;
var args = ["--stdio", "-s", projectPath, "--hostPID", process.pid];
Object.keys(argv).filter(function (z) {
    return z !== "_" && z !== "$0" && z !== "serverPath" && z !== "projectPath";
}).forEach(function (z) {
    return args.push("--" + z + "=" + argv[z]);
});
var childProcess = (0, _child_process.spawn)(serverPath, args);
process.stdin.pipe(childProcess.stdin);
childProcess.stdout.pipe(process.stdout);
childProcess.stderr.pipe(process.stderr);
process.stdin.resume();
process.on("message", function (message) {
    if (message === "kill") process.exit();
});
childProcess.on("exit", function () {
    return process.exit();
});
childProcess.on("disconnect", function () {
    return process.exit();
});
childProcess.on("close", function () {
    return process.exit();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdGRpby9jaGlsZC5qcyIsImxpYi9zdGRpby9jaGlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQ0NBLElBQU0sT0FBTyxRQUFRLE9BQVIsRUFBaUIsSUFBakI7QUFFYixJQUFNLGFBQWEsS0FBSyxVQUFMO0FBQ25CLElBQU0sY0FBYyxLQUFLLFdBQUw7QUFFcEIsSUFBTSxPQUFPLENBQUMsU0FBRCxFQUFZLElBQVosRUFBa0IsV0FBbEIsRUFBK0IsV0FBL0IsRUFBNEMsUUFBUSxHQUFSLENBQW5EO0FBRU4sT0FBTyxJQUFQLENBQVksSUFBWixFQUNLLE1BREwsQ0FDWTtXQUFLLE1BQU0sR0FBTixJQUFhLE1BQU0sSUFBTixJQUFjLE1BQU0sWUFBTixJQUFzQixNQUFNLGFBQU47Q0FBdEQsQ0FEWixDQUVLLE9BRkwsQ0FFYTtXQUFLLEtBQUssSUFBTCxDQUFVLE9BQU8sQ0FBUCxHQUFXLEdBQVgsR0FBaUIsS0FBSyxDQUFMLENBQWpCO0NBQWYsQ0FGYjtBQUlBLElBQU0sZUFBZSwwQkFBTSxVQUFOLEVBQWtCLElBQWxCLENBQWY7QUFFTixRQUFRLEtBQVIsQ0FBYyxJQUFkLENBQW1CLGFBQWEsS0FBYixDQUFuQjtBQUNBLGFBQWEsTUFBYixDQUFvQixJQUFwQixDQUF5QixRQUFRLE1BQVIsQ0FBekI7QUFDQSxhQUFhLE1BQWIsQ0FBb0IsSUFBcEIsQ0FBeUIsUUFBUSxNQUFSLENBQXpCO0FBRUEsUUFBUSxLQUFSLENBQWMsTUFBZDtBQUNBLFFBQVEsRUFBUixDQUFXLFNBQVgsRUFBc0IsVUFBUyxPQUFULEVBQXFCO0FBQ3ZDLFFBQUksWUFBWSxNQUFaLEVBQ0EsUUFBUSxJQUFSLEdBREo7Q0FEa0IsQ0FBdEI7QUFLQSxhQUFhLEVBQWIsQ0FBZ0IsTUFBaEIsRUFBd0I7V0FBTSxRQUFRLElBQVI7Q0FBTixDQUF4QjtBQUNBLGFBQWEsRUFBYixDQUFnQixZQUFoQixFQUE4QjtXQUFNLFFBQVEsSUFBUjtDQUFOLENBQTlCO0FBQ0EsYUFBYSxFQUFiLENBQWdCLE9BQWhCLEVBQXlCO1dBQU0sUUFBUSxJQUFSO0NBQU4sQ0FBekIiLCJmaWxlIjoibGliL3N0ZGlvL2NoaWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Bhd24gfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuY29uc3QgYXJndiA9IHJlcXVpcmUoXCJ5YXJnc1wiKS5hcmd2O1xuY29uc3Qgc2VydmVyUGF0aCA9IGFyZ3Yuc2VydmVyUGF0aDtcbmNvbnN0IHByb2plY3RQYXRoID0gYXJndi5wcm9qZWN0UGF0aDtcbmNvbnN0IGFyZ3MgPSBbXCItLXN0ZGlvXCIsIFwiLXNcIiwgcHJvamVjdFBhdGgsIFwiLS1ob3N0UElEXCIsIHByb2Nlc3MucGlkXTtcbk9iamVjdC5rZXlzKGFyZ3YpXG4gICAgLmZpbHRlcih6ID0+IHogIT09IFwiX1wiICYmIHogIT09IFwiJDBcIiAmJiB6ICE9PSBcInNlcnZlclBhdGhcIiAmJiB6ICE9PSBcInByb2plY3RQYXRoXCIpXG4gICAgLmZvckVhY2goeiA9PiBhcmdzLnB1c2goXCItLVwiICsgeiArIFwiPVwiICsgYXJndlt6XSkpO1xuY29uc3QgY2hpbGRQcm9jZXNzID0gc3Bhd24oc2VydmVyUGF0aCwgYXJncyk7XG5wcm9jZXNzLnN0ZGluLnBpcGUoY2hpbGRQcm9jZXNzLnN0ZGluKTtcbmNoaWxkUHJvY2Vzcy5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCk7XG5jaGlsZFByb2Nlc3Muc3RkZXJyLnBpcGUocHJvY2Vzcy5zdGRlcnIpO1xucHJvY2Vzcy5zdGRpbi5yZXN1bWUoKTtcbnByb2Nlc3Mub24oXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IFwia2lsbFwiKVxuICAgICAgICBwcm9jZXNzLmV4aXQoKTtcbn0pO1xuY2hpbGRQcm9jZXNzLm9uKFwiZXhpdFwiLCAoKSA9PiBwcm9jZXNzLmV4aXQoKSk7XG5jaGlsZFByb2Nlc3Mub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHByb2Nlc3MuZXhpdCgpKTtcbmNoaWxkUHJvY2Vzcy5vbihcImNsb3NlXCIsICgpID0+IHByb2Nlc3MuZXhpdCgpKTtcbiIsImltcG9ydCB7c3Bhd259IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5jb25zdCBhcmd2ID0gcmVxdWlyZShcInlhcmdzXCIpLmFyZ3Y7XG5cbmNvbnN0IHNlcnZlclBhdGggPSBhcmd2LnNlcnZlclBhdGg7XG5jb25zdCBwcm9qZWN0UGF0aCA9IGFyZ3YucHJvamVjdFBhdGg7XG5cbmNvbnN0IGFyZ3MgPSBbXCItLXN0ZGlvXCIsIFwiLXNcIiwgcHJvamVjdFBhdGgsIFwiLS1ob3N0UElEXCIsIHByb2Nlc3MucGlkXTtcblxuT2JqZWN0LmtleXMoYXJndilcbiAgICAuZmlsdGVyKHogPT4geiAhPT0gXCJfXCIgJiYgeiAhPT0gXCIkMFwiICYmIHogIT09IFwic2VydmVyUGF0aFwiICYmIHogIT09IFwicHJvamVjdFBhdGhcIilcbiAgICAuZm9yRWFjaCh6ID0+IGFyZ3MucHVzaChcIi0tXCIgKyB6ICsgXCI9XCIgKyBhcmd2W3pdKSk7XG5cbmNvbnN0IGNoaWxkUHJvY2VzcyA9IHNwYXduKHNlcnZlclBhdGgsIGFyZ3MpO1xuXG5wcm9jZXNzLnN0ZGluLnBpcGUoY2hpbGRQcm9jZXNzLnN0ZGluKTtcbmNoaWxkUHJvY2Vzcy5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCk7XG5jaGlsZFByb2Nlc3Muc3RkZXJyLnBpcGUocHJvY2Vzcy5zdGRlcnIpO1xuXG5wcm9jZXNzLnN0ZGluLnJlc3VtZSgpO1xucHJvY2Vzcy5vbihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24obWVzc2FnZTogYW55KSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IFwia2lsbFwiKVxuICAgICAgICBwcm9jZXNzLmV4aXQoKTtcbn0pO1xuXG5jaGlsZFByb2Nlc3Mub24oXCJleGl0XCIsICgpID0+IHByb2Nlc3MuZXhpdCgpKTtcbmNoaWxkUHJvY2Vzcy5vbihcImRpc2Nvbm5lY3RcIiwgKCkgPT4gcHJvY2Vzcy5leGl0KCkpO1xuY2hpbGRQcm9jZXNzLm9uKFwiY2xvc2VcIiwgKCkgPT4gcHJvY2Vzcy5leGl0KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
