"use strict";
var child_process = require('child_process');
(function (SupportedPlatform) {
    SupportedPlatform[SupportedPlatform["None"] = 0] = "None";
    SupportedPlatform[SupportedPlatform["Windows"] = 1] = "Windows";
    SupportedPlatform[SupportedPlatform["OSX"] = 2] = "OSX";
    SupportedPlatform[SupportedPlatform["CentOS"] = 3] = "CentOS";
    SupportedPlatform[SupportedPlatform["Debian"] = 4] = "Debian";
    SupportedPlatform[SupportedPlatform["Fedora"] = 5] = "Fedora";
    SupportedPlatform[SupportedPlatform["OpenSUSE"] = 6] = "OpenSUSE";
    SupportedPlatform[SupportedPlatform["RHEL"] = 7] = "RHEL";
    SupportedPlatform[SupportedPlatform["Ubuntu14"] = 8] = "Ubuntu14";
    SupportedPlatform[SupportedPlatform["Ubuntu16"] = 9] = "Ubuntu16";
})(exports.SupportedPlatform || (exports.SupportedPlatform = {}));
var SupportedPlatform = exports.SupportedPlatform;
/* tslint:disable:quotemark */
function getSupportedPlatform(platform) {
    if (platform === void 0) { platform = process.platform; }
    if (process.platform === 'win32') {
        return SupportedPlatform.Windows;
    }
    else if (process.platform === 'darwin') {
        return SupportedPlatform.OSX;
    }
    else if (process.platform === 'linux') {
        // Get the text of /etc/os-release to discover which Linux distribution we're running on.
        // For details: https://www.freedesktop.org/software/systemd/man/os-release.html
        var text = child_process.execSync('cat /etc/os-release').toString();
        var lines_1 = text.split('\n');
        var getValue = function (name) {
            for (var _i = 0, lines_2 = lines_1; _i < lines_2.length; _i++) {
                var line = lines_2[_i];
                line = line.trim();
                if (line.startsWith(name)) {
                    var equalsIndex = line.indexOf('=');
                    if (equalsIndex >= 0) {
                        var value = line.substring(equalsIndex + 1);
                        // Strip double quotes if necessary
                        if (value.length > 1 && value.startsWith('"') && value.endsWith('"')) {
                            value = value.substring(1, value.length - 1);
                        }
                        return value;
                    }
                }
            }
            return undefined;
        };
        var id = getValue("ID");
        console.log(lines_1);
        console.log("getValue(\"ID\")", id);
        switch (id) {
            case 'ubuntu':
                var versionId = getValue("VERSION_ID");
                if (versionId) {
                    if (versionId.startsWith("14")) {
                        // This also works for Linux Mint
                        return SupportedPlatform.Ubuntu14;
                    }
                    else if (versionId.startsWith("16")) {
                        return SupportedPlatform.Ubuntu16;
                    }
                }
                break;
            case 'centos':
                return SupportedPlatform.CentOS;
            case 'fedora':
                return SupportedPlatform.Fedora;
            case 'opensuse':
                return SupportedPlatform.OpenSUSE;
            case 'rhel':
                return SupportedPlatform.RHEL;
            case 'debian':
                return SupportedPlatform.Debian;
            case 'ol':
                // Oracle Linux is binary compatible with CentOS
                return SupportedPlatform.CentOS;
        }
    }
    return SupportedPlatform.None;
}
exports.getSupportedPlatform = getSupportedPlatform;
/* tslint:enable:quotemark */
exports.supportedPlatform = getSupportedPlatform(process.platform);

//# sourceMappingURL=data:application/json;base64,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bGliL2hlbHBlcnMvcGxhdGZvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5leHBvcnQgZW51bSBTdXBwb3J0ZWRQbGF0Zm9ybSB7XG4gICAgTm9uZSxcbiAgICBXaW5kb3dzLFxuICAgIE9TWCxcbiAgICBDZW50T1MsXG4gICAgRGViaWFuLFxuICAgIEZlZG9yYSxcbiAgICBPcGVuU1VTRSxcbiAgICBSSEVMLFxuICAgIFVidW50dTE0LFxuICAgIFVidW50dTE2XG59XG5cbi8qIHRzbGludDpkaXNhYmxlOnF1b3RlbWFyayAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRlZFBsYXRmb3JtKHBsYXRmb3JtOiBzdHJpbmcgPSBwcm9jZXNzLnBsYXRmb3JtKSB7XG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgICAgcmV0dXJuIFN1cHBvcnRlZFBsYXRmb3JtLldpbmRvd3M7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuICAgICAgICByZXR1cm4gU3VwcG9ydGVkUGxhdGZvcm0uT1NYO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xuICAgICAgICAvLyBHZXQgdGhlIHRleHQgb2YgL2V0Yy9vcy1yZWxlYXNlIHRvIGRpc2NvdmVyIHdoaWNoIExpbnV4IGRpc3RyaWJ1dGlvbiB3ZSdyZSBydW5uaW5nIG9uLlxuICAgICAgICAvLyBGb3IgZGV0YWlsczogaHR0cHM6Ly93d3cuZnJlZWRlc2t0b3Aub3JnL3NvZnR3YXJlL3N5c3RlbWQvbWFuL29zLXJlbGVhc2UuaHRtbFxuICAgICAgICBjb25zdCB0ZXh0ID0gY2hpbGRfcHJvY2Vzcy5leGVjU3luYygnY2F0IC9ldGMvb3MtcmVsZWFzZScpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG5cbiAgICAgICAgY29uc3QgZ2V0VmFsdWUgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmUudHJpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXF1YWxzSW5kZXggPSBsaW5lLmluZGV4T2YoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFsc0luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGxpbmUuc3Vic3RyaW5nKGVxdWFsc0luZGV4ICsgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0cmlwIGRvdWJsZSBxdW90ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSAmJiB2YWx1ZS5zdGFydHNXaXRoKCdcIicpICYmIHZhbHVlLmVuZHNXaXRoKCdcIicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSwgdmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpZCA9IGdldFZhbHVlKFwiSURcIik7XG5cbiAgICAgICAgY29uc29sZS5sb2cobGluZXMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImdldFZhbHVlKFxcXCJJRFxcXCIpXCIsIGlkKTtcblxuICAgICAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICAgICAgICBjYXNlICd1YnVudHUnOlxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb25JZCA9IGdldFZhbHVlKFwiVkVSU0lPTl9JRFwiKTtcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uSWQuc3RhcnRzV2l0aChcIjE0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGFsc28gd29ya3MgZm9yIExpbnV4IE1pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTdXBwb3J0ZWRQbGF0Zm9ybS5VYnVudHUxNDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uSWQuc3RhcnRzV2l0aChcIjE2XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3VwcG9ydGVkUGxhdGZvcm0uVWJ1bnR1MTY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjZW50b3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTdXBwb3J0ZWRQbGF0Zm9ybS5DZW50T1M7XG4gICAgICAgICAgICBjYXNlICdmZWRvcmEnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTdXBwb3J0ZWRQbGF0Zm9ybS5GZWRvcmE7XG4gICAgICAgICAgICBjYXNlICdvcGVuc3VzZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN1cHBvcnRlZFBsYXRmb3JtLk9wZW5TVVNFO1xuICAgICAgICAgICAgY2FzZSAncmhlbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN1cHBvcnRlZFBsYXRmb3JtLlJIRUw7XG4gICAgICAgICAgICBjYXNlICdkZWJpYW4nOlxuICAgICAgICAgICAgICAgIHJldHVybiBTdXBwb3J0ZWRQbGF0Zm9ybS5EZWJpYW47XG4gICAgICAgICAgICBjYXNlICdvbCc6XG4gICAgICAgICAgICAgICAgLy8gT3JhY2xlIExpbnV4IGlzIGJpbmFyeSBjb21wYXRpYmxlIHdpdGggQ2VudE9TXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN1cHBvcnRlZFBsYXRmb3JtLkNlbnRPUztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBTdXBwb3J0ZWRQbGF0Zm9ybS5Ob25lO1xufVxuLyogdHNsaW50OmVuYWJsZTpxdW90ZW1hcmsgKi9cblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZFBsYXRmb3JtID0gZ2V0U3VwcG9ydGVkUGxhdGZvcm0ocHJvY2Vzcy5wbGF0Zm9ybSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
