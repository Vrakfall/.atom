"use strict";
var rxjs_1 = require('rxjs');
var fs = require('fs');
var child_process_1 = require('child_process');
var path_1 = require('path');
var create_1 = require('../operators/create');
var bootstrappedPlugins = new Map();
var exists = rxjs_1.Observable.bindCallback(fs.exists), readFile = rxjs_1.Observable.bindNodeCallback(fs.readFile);
var md5 = require('md5');
function getPluginPath(solutionLocation, ctx, requestedPlugins, logger) {
    var plugins = [];
    var hashStrings = [];
    var hash;
    requestedPlugins.forEach(function (plugin) {
        plugins.push(plugin);
    });
    return create_1.createObservable(function (observer) {
        logger.log('Bootstrapping ' + solutionLocation);
        // Include the plugins defined in omnisharp.json, they could have changed.
        exists(path_1.join(solutionLocation, 'omnisharp.json'))
            .filter(function (x) { return !!x; })
            .flatMap(function (x) { return readFile(path_1.join(solutionLocation, 'omnisharp.json')); })
            .map(function (x) { return JSON.parse(x.toString()); })
            .do({
            next: function (obj) {
                if (obj.plugins) {
                    hashStrings.push(obj.plugins);
                }
            },
            complete: function () {
                hash = md5(JSON.stringify(plugins.concat(hashStrings)));
                if (bootstrappedPlugins.has(hash)) {
                    observer.next(bootstrappedPlugins.get(hash));
                    observer.complete();
                    return;
                }
                var command = [ctx.location, '-s', solutionLocation].concat(plugins.map(function (x) {
                    if (x.location) {
                        return "--plugins " + x.location;
                    }
                    else if (x.version) {
                        return "--plugin-name " + x.name + "@" + x.version;
                    }
                    else {
                        return "--plugin-name " + x.name;
                    }
                })).join(' ');
                child_process_1.exec(command, function (error, stdout) {
                    if (error) {
                        observer.error(error);
                        return;
                    }
                    var location = stdout.toString().trim();
                    if (location) {
                        // restore(location, ctx, logger).subscribe(observer);
                        return;
                    }
                    observer.next(ctx.location);
                    observer.complete();
                });
            }
        });
    })
        .map(function (path) { return path && path || ctx.location; })
        .do(function (result) {
        if (!bootstrappedPlugins.has(hash))
            bootstrappedPlugins.set(hash, result);
        logger.log('Finished bootstrapping ' + solutionLocation);
    });
}
exports.getPluginPath = getPluginPath;

//# sourceMappingURL=data:application/json;base64,
