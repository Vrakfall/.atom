"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getPluginPath = getPluginPath;

var _rxjs = require("rxjs");

var _fs = require("fs");

var fs = _interopRequireWildcard(_fs);

var _child_process = require("child_process");

var _path = require("path");

var _create = require("../operators/create");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var bootstrappedPlugins = new Map();
var exists = _rxjs.Observable.bindCallback(fs.exists),
    readFile = _rxjs.Observable.bindNodeCallback(fs.readFile);
var md5 = require("md5");
function getPluginPath(solutionLocation, ctx, requestedPlugins, logger) {
    var plugins = [];
    var hashStrings = [];
    var hash = void 0;
    requestedPlugins.forEach(function (plugin) {
        plugins.push(plugin);
    });
    return (0, _create.createObservable)(function (observer) {
        logger.log("Bootstrapping " + solutionLocation);
        exists((0, _path.join)(solutionLocation, "omnisharp.json")).filter(function (x) {
            return !!x;
        }).flatMap(function (x) {
            return readFile((0, _path.join)(solutionLocation, "omnisharp.json"));
        }).map(function (x) {
            return JSON.parse(x.toString());
        }).do({
            next: function next(obj) {
                if (obj.plugins) {
                    hashStrings.push(obj.plugins);
                }
            },
            complete: function complete() {
                hash = md5(JSON.stringify(plugins.concat(hashStrings)));
                if (bootstrappedPlugins.has(hash)) {
                    observer.next(bootstrappedPlugins.get(hash));
                    observer.complete();
                    return;
                }
                var command = [ctx.location, "-s", solutionLocation].concat(plugins.map(function (x) {
                    if (x.location) {
                        return "--plugins " + x.location;
                    } else if (x.version) {
                        return "--plugin-name " + x.name + "@" + x.version;
                    } else {
                        return "--plugin-name " + x.name;
                    }
                })).join(" ");
                (0, _child_process.exec)(command, function (error, stdout) {
                    if (error) {
                        observer.error(error);
                        return;
                    }
                    var location = stdout.toString().trim();
                    if (location) {
                        return;
                    }
                    observer.next(ctx.location);
                    observer.complete();
                });
            }
        });
    }).map(function (path) {
        return path && path || ctx.location;
    }).do(function (result) {
        if (!bootstrappedPlugins.has(hash)) bootstrappedPlugins.set(hash, result);
        logger.log("Finished bootstrapping " + solutionLocation);
    });
}
//# sourceMappingURL=data:application/json;base64,
