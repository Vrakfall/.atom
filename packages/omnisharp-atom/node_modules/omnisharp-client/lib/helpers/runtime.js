"use strict";
var rxjs_1 = require('rxjs');
var path_1 = require('path');
var fs = require('fs');
var enums_1 = require('../enums');
var lodash_1 = require('lodash');
var decompress_1 = require('./decompress');
var create_1 = require('../operators/create');
require('rxjs/add/operator/max');
require('rxjs/add/operator/isEmpty');
require('rxjs/add/observable/if');
var platform_1 = require('./platform');
var request = require('request');
var defaultServerVersion = require(path_1.resolve(__dirname, '../../package.json'))['omnisharp-roslyn'];
var exists = rxjs_1.Observable.bindCallback(fs.exists);
var readFile = rxjs_1.Observable.bindNodeCallback(fs.readFile);
var defaultDest = path_1.resolve(__dirname, '../../');
// Handle the case of homebrew mono
var PATH = lodash_1.find(process.env, function (v, key) { return lodash_1.toLower(key) === 'path'; }).split(path_1.delimiter).concat(['/usr/local/bin', '/Library/Frameworks/Mono.framework/Commands']);
;
var RuntimeContext = (function () {
    function RuntimeContext(runtimeContext, _logger) {
        this._logger = _logger;
        if (!_logger) {
            this._logger = console;
        }
        var self = this;
        lodash_1.assignWith(self, runtimeContext || {}, function (obj, src, key) {
            self[("_" + key)] = obj || src;
        });
        if (lodash_1.isNull(this._runtime) || lodash_1.isUndefined(this._runtime)) {
            this._runtime = enums_1.Runtime.ClrOrMono;
        }
        if (lodash_1.isNull(this._platform) || lodash_1.isUndefined(this._platform)) {
            this._platform = platform_1.supportedPlatform;
        }
        else {
            this._platform = platform_1.getSupportedPlatform(runtimeContext.platform);
        }
        if (lodash_1.isNull(this._arch) || lodash_1.isUndefined(this._arch)) {
            this._arch = process.arch;
        }
        if (lodash_1.isNull(this._version) || lodash_1.isUndefined(this._version)) {
            this._version = defaultServerVersion;
        }
        this._arch = this._arch === 'x86' ? 'x86' : 'x64';
        this._os = this._getOsName();
        this._key = this._getIdKey();
        this._id = "omnisharp-" + this._key;
        if (lodash_1.isNull(this._location) || lodash_1.isUndefined(this._location)) {
            this._location = this._getRuntimeLocation();
        }
        if (lodash_1.isNull(this._destination) || lodash_1.isUndefined(this._destination)) {
            this._destination = path_1.resolve(defaultDest, this._id);
        }
        Object.freeze(this);
    }
    Object.defineProperty(RuntimeContext.prototype, "runtime", {
        get: function () { return this._runtime; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RuntimeContext.prototype, "platform", {
        get: function () { return this._platform; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "arch", {
        get: function () { return this._arch; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "bootstrap", {
        get: function () { return this._bootstrap; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "version", {
        get: function () { return this._version; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "destination", {
        get: function () { return this._destination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "id", {
        get: function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeContext.prototype, "location", {
        get: function () { return this._location; },
        enumerable: true,
        configurable: true
    });
    RuntimeContext.prototype._getIdKey = function () {
        if (this._platform !== platform_1.SupportedPlatform.Windows && this._runtime === enums_1.Runtime.ClrOrMono) {
            return "mono";
        }
        var runtimeName = 'netcoreapp1.0';
        if (this._runtime === enums_1.Runtime.ClrOrMono) {
            if (this._platform === platform_1.SupportedPlatform.Windows) {
                runtimeName = 'net451';
            }
            else {
                runtimeName = 'mono';
            }
        }
        return this._os + "-" + this._arch + "-" + runtimeName;
    };
    RuntimeContext.prototype._getOsName = function () {
        if (this._platform === platform_1.SupportedPlatform.Windows)
            return 'win';
        var name = platform_1.SupportedPlatform[this._platform];
        if (name)
            return name.toLowerCase();
        return name;
    };
    /* tslint:disable:no-string-literal */
    RuntimeContext.prototype._getRuntimeLocation = function () {
        var path = process.env['OMNISHARP'];
        if (!path) {
            var omnisharp = process.platform === 'win32' || this._runtime === enums_1.Runtime.ClrOrMono ? 'OmniSharp.exe' : 'OmniSharp';
            path = path_1.resolve(__dirname, '../../', this._id, omnisharp);
        }
        if (process.platform !== 'win32' && this._runtime === enums_1.Runtime.ClrOrMono) {
            return "mono " + path;
        }
        return path;
    };
    /* tslint:enable:no-string-literal */
    RuntimeContext.prototype._checkCurrentVersion = function () {
        var _this = this;
        var filename = path_1.join(this._destination, '.version');
        return exists(filename)
            .flatMap(function (isCurrent) {
            return _this.findRuntime().isEmpty();
        }, function (ex, isEmpty) { return ex && !isEmpty; })
            .flatMap(function (ex) { return rxjs_1.Observable.if(function () { return ex; }, rxjs_1.Observable.defer(function () { return readFile(filename).map(function (content) { return content.toString().trim() === _this._version; }); }), rxjs_1.Observable.of(false)); });
    };
    RuntimeContext.prototype._ensureCurrentVersion = function () {
        var dest = this._destination;
        return this._checkCurrentVersion()
            .flatMap(function (isCurrent) { return rxjs_1.Observable.if(function () { return !isCurrent; }, rxjs_1.Observable.defer(function () { return create_1.createObservable(function (observer) {
            dest = dest || defaultDest;
            require('rimraf')(dest, function (err) {
                if (err) {
                    observer.error(err);
                    return;
                }
                lodash_1.delay(function () {
                    observer.next(isCurrent);
                    observer.complete();
                }, 500);
            });
        }); }), rxjs_1.Observable.of(isCurrent)); });
    };
    RuntimeContext.prototype.findRuntime = function (location) {
        if (location === void 0) { location = path_1.resolve(defaultDest); }
        return findRuntimeById(this._id, location);
    };
    RuntimeContext.prototype.downloadRuntime = function () {
        var _this = this;
        return rxjs_1.Observable.defer(function () { return rxjs_1.Observable.concat(
        // downloadSpecificRuntime("omnisharp.bootstrap", ctx, logger, dest),
        _this._downloadSpecificRuntime('omnisharp')); })
            .subscribeOn(rxjs_1.Scheduler.async)
            .toArray()
            .concatMap(function () { return rxjs_1.Observable.bindCallback(fs.writeFile)(path_1.join(_this._destination, '.version'), _this._version); }, function (result) { return result; });
    };
    RuntimeContext.prototype.downloadRuntimeIfMissing = function () {
        var _this = this;
        return this._ensureCurrentVersion()
            .flatMap(function (isCurrent) {
            return _this.findRuntime().isEmpty();
        })
            .flatMap(function (empty) { return rxjs_1.Observable.if(function () { return empty; }, _this.downloadRuntime()); });
    };
    RuntimeContext.prototype._downloadSpecificRuntime = function (name) {
        var _this = this;
        var filename = name + "-" + this._key + "." + (this._platform === platform_1.SupportedPlatform.Windows ? 'zip' : 'tar.gz');
        var destination = this._destination;
        try {
            if (!fs.existsSync(destination))
                fs.mkdirSync(destination);
        }
        catch (e) { }
        var url = "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/" + this._version + "/" + filename;
        var path = path_1.join(destination, filename);
        return rxjs_1.Observable.defer(function () { return rxjs_1.Observable.concat(_this.downloadFile(url, path).delay(100), rxjs_1.Observable.defer(function () { return _this._extract(_this._platform === platform_1.SupportedPlatform.Windows, path, destination); }))
            .do({ complete: function () { try {
                fs.unlinkSync(path);
            }
            catch (e) { } } })
            .subscribeOn(rxjs_1.Scheduler.async); })
            .map(function () { return name; });
    };
    RuntimeContext.prototype.downloadFile = function (url, path) {
        var _this = this;
        if (this._logger) {
            this._logger.log("Downloading " + path);
        }
        return create_1.createObservable(function (observer) {
            request.get(url)
                .pipe(fs.createWriteStream(path))
                .on('error', lodash_1.bind(observer.error, observer))
                .on('finish', function () {
                if (_this._logger) {
                    _this._logger.log("Finished downloading " + path);
                }
                observer.next(void 0);
                observer.complete();
            });
        });
    };
    RuntimeContext.prototype._extract = function (win32, path, dest) {
        if (this._logger) {
            this._logger.log("Extracting " + path);
        }
        return decompress_1.decompress(path, dest, { mode: '755' });
    };
    return RuntimeContext;
}());
exports.RuntimeContext = RuntimeContext;
exports.isSupportedRuntime = lodash_1.memoize(function (ctx) {
    return rxjs_1.Observable.defer(function () {
        // On windows we'll just use the clr, it's there
        // On mac / linux if we've picked CoreClr stick with that
        if (ctx.platform === platform_1.SupportedPlatform.Windows || ctx.runtime === enums_1.Runtime.CoreClr) {
            return rxjs_1.Observable.of({ runtime: ctx.runtime, path: process.env.PATH });
        }
        // We need to check if mono exists on the system
        // If it doesn't we'll just run CoreClr
        return rxjs_1.Observable.from(PATH)
            .map(function (path) { return path_1.join(path, 'mono'); })
            .concatMap(function (path) { return exists(path).map(function (e) { return ({ exists: e, path: path }); }); })
            .filter(function (x) { return x.exists; })
            .map(function (x) { return ({ runtime: enums_1.Runtime.ClrOrMono, path: [x.path].concat(PATH).join(path_1.delimiter) }); })
            .take(1)
            .defaultIfEmpty({ runtime: enums_1.Runtime.CoreClr, path: process.env.PATH });
    })
        .cache(1);
}, function (_a) {
    var platform = _a.platform, arch = _a.arch, runtime = _a.runtime, version = _a.version;
    return arch + "-" + platform + ":" + enums_1.Runtime[runtime] + ":" + version;
});
function findOmnisharpExecuable(runtimeId, location) {
    return rxjs_1.Observable.merge(exists(path_1.resolve(location, runtimeId, 'OmniSharp.exe')), exists(path_1.resolve(location, runtimeId, 'OmniSharp')))
        .filter(function (x) { return x; })
        .take(1)
        .share();
}
function findRuntimeById(runtimeId, location) {
    return findOmnisharpExecuable(runtimeId, location)
        .map(function (x) { return path_1.resolve(location, runtimeId); })
        .share();
}
exports.findRuntimeById = findRuntimeById;

//# sourceMappingURL=data:application/json;base64,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Y0FBSSxFQUFFLG9CQUFPLEVBQUUsb0JBQU87SUFBcUIsTUFBTSxDQUFJLElBQUksU0FBSSxRQUFRLFNBQUksZUFBTyxDQUFDLE9BQU8sQ0FBQyxTQUFJLE9BQVMsQ0FBQztBQUFDLENBQUMsQ0FBQyxDQUFDO0FBRW5JLGdDQUFnQyxTQUFpQixFQUFFLFFBQWdCO0lBQy9ELE1BQU0sQ0FBQyxpQkFBVSxDQUFDLEtBQUssQ0FDbkIsTUFBTSxDQUFDLGNBQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDLEVBQ3JELE1BQU0sQ0FBQyxjQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUNwRDtTQUNJLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUM7U0FDZCxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ1AsS0FBSyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUVELHlCQUFnQyxTQUFpQixFQUFFLFFBQWdCO0lBQy9ELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDO1NBQzdDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLGNBQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQTVCLENBQTRCLENBQUM7U0FDdEMsS0FBSyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUplLHVCQUFlLGtCQUk5QixDQUFBIiwiZmlsZSI6ImxpYi9oZWxwZXJzL3J1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHJlc29sdmUsIGpvaW4sIGRlbGltaXRlciB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgSUxvZ2dlciwgUnVudGltZSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IGZpbmQsIGJpbmQsIG1lbW9pemUsIGFzc2lnbldpdGgsIGlzTnVsbCwgaXNVbmRlZmluZWQsIHRvTG93ZXIsIGRlbGF5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGRlY29tcHJlc3MgfSBmcm9tICcuL2RlY29tcHJlc3MnO1xuaW1wb3J0IHsgY3JlYXRlT2JzZXJ2YWJsZSB9IGZyb20gJy4uL29wZXJhdG9ycy9jcmVhdGUnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXgnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9pc0VtcHR5JztcbnJlcXVpcmUoJ3J4anMvYWRkL29ic2VydmFibGUvaWYnKTtcbmltcG9ydCB7IFN1cHBvcnRlZFBsYXRmb3JtLCBzdXBwb3J0ZWRQbGF0Zm9ybSwgZ2V0U3VwcG9ydGVkUGxhdGZvcm0gfSBmcm9tICcuL3BsYXRmb3JtJztcblxuY29uc3QgcmVxdWVzdDogeyBnZXQodXJsOiBzdHJpbmcpOiBOb2RlSlMuUmVhZGFibGVTdHJlYW07IH0gPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5jb25zdCBkZWZhdWx0U2VydmVyVmVyc2lvbiA9IHJlcXVpcmUocmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9wYWNrYWdlLmpzb24nKSlbJ29tbmlzaGFycC1yb3NseW4nXTtcbmNvbnN0IGV4aXN0cyA9IE9ic2VydmFibGUuYmluZENhbGxiYWNrKGZzLmV4aXN0cyk7XG5jb25zdCByZWFkRmlsZSA9IE9ic2VydmFibGUuYmluZE5vZGVDYWxsYmFjayhmcy5yZWFkRmlsZSk7XG5jb25zdCBkZWZhdWx0RGVzdCA9IHJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vJyk7XG5cbi8vIEhhbmRsZSB0aGUgY2FzZSBvZiBob21lYnJldyBtb25vXG5jb25zdCBQQVRIOiBzdHJpbmdbXSA9IGZpbmQ8c3RyaW5nPihwcm9jZXNzLmVudiwgKHYsIGtleSkgPT4gdG9Mb3dlcihrZXkpID09PSAncGF0aCcpLnNwbGl0KGRlbGltaXRlcikuY29uY2F0KFsnL3Vzci9sb2NhbC9iaW4nLCAnL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9Db21tYW5kcyddKTtcblxuZXhwb3J0IGludGVyZmFjZSBJUnVudGltZUNvbnRleHQge1xuICAgIHJ1bnRpbWU6IFJ1bnRpbWU7XG4gICAgcGxhdGZvcm06IHN0cmluZztcbiAgICBhcmNoOiBzdHJpbmc7XG4gICAgYm9vdHN0cmFwPzogYm9vbGVhbjtcbiAgICB2ZXJzaW9uPzogc3RyaW5nO1xuICAgIGRlc3RpbmF0aW9uPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVDb250ZXh0IHtcbiAgICBwcml2YXRlIF9ydW50aW1lOiBSdW50aW1lO1xuICAgIHByaXZhdGUgX3BsYXRmb3JtOiBTdXBwb3J0ZWRQbGF0Zm9ybTtcbiAgICBwcml2YXRlIF9hcmNoOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfYm9vdHN0cmFwOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdmVyc2lvbjogc3RyaW5nO1xuICAgIHByaXZhdGUgX2Rlc3RpbmF0aW9uOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICAgIHByaXZhdGUgX2tleTogc3RyaW5nO1xuICAgIHByaXZhdGUgX29zOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfbG9jYXRpb246IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJ1bnRpbWVDb250ZXh0OiBJUnVudGltZUNvbnRleHQsIHByaXZhdGUgX2xvZ2dlcj86IElMb2dnZXIpIHtcbiAgICAgICAgaWYgKCFfbG9nZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIgPSBjb25zb2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IDxhbnk+dGhpcztcbiAgICAgICAgYXNzaWduV2l0aChzZWxmLCBydW50aW1lQ29udGV4dCB8fCB7fSwgKG9iaiwgc3JjLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHNlbGZbYF8ke2tleX1gXSA9IG9iaiB8fCBzcmM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpc051bGwodGhpcy5fcnVudGltZSkgfHwgaXNVbmRlZmluZWQodGhpcy5fcnVudGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3J1bnRpbWUgPSBSdW50aW1lLkNsck9yTW9ubztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc051bGwodGhpcy5fcGxhdGZvcm0pIHx8IGlzVW5kZWZpbmVkKHRoaXMuX3BsYXRmb3JtKSkge1xuICAgICAgICAgICAgdGhpcy5fcGxhdGZvcm0gPSBzdXBwb3J0ZWRQbGF0Zm9ybTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BsYXRmb3JtID0gZ2V0U3VwcG9ydGVkUGxhdGZvcm0ocnVudGltZUNvbnRleHQucGxhdGZvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLl9hcmNoKSB8fCBpc1VuZGVmaW5lZCh0aGlzLl9hcmNoKSkge1xuICAgICAgICAgICAgdGhpcy5fYXJjaCA9IHByb2Nlc3MuYXJjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc051bGwodGhpcy5fdmVyc2lvbikgfHwgaXNVbmRlZmluZWQodGhpcy5fdmVyc2lvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZlcnNpb24gPSBkZWZhdWx0U2VydmVyVmVyc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FyY2ggPSB0aGlzLl9hcmNoID09PSAneDg2JyA/ICd4ODYnIDogJ3g2NCc7XG5cbiAgICAgICAgdGhpcy5fb3MgPSB0aGlzLl9nZXRPc05hbWUoKTtcbiAgICAgICAgdGhpcy5fa2V5ID0gdGhpcy5fZ2V0SWRLZXkoKTtcbiAgICAgICAgdGhpcy5faWQgPSBgb21uaXNoYXJwLSR7dGhpcy5fa2V5fWA7XG5cbiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLl9sb2NhdGlvbikgfHwgaXNVbmRlZmluZWQodGhpcy5fbG9jYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhdGlvbiA9IHRoaXMuX2dldFJ1bnRpbWVMb2NhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLl9kZXN0aW5hdGlvbikgfHwgaXNVbmRlZmluZWQodGhpcy5fZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9kZXN0aW5hdGlvbiA9IHJlc29sdmUoZGVmYXVsdERlc3QsIHRoaXMuX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBydW50aW1lKCkgeyByZXR1cm4gdGhpcy5fcnVudGltZTsgfTtcbiAgICBwdWJsaWMgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gdGhpcy5fcGxhdGZvcm07IH1cbiAgICBwdWJsaWMgZ2V0IGFyY2goKSB7IHJldHVybiB0aGlzLl9hcmNoOyB9XG4gICAgcHVibGljIGdldCBib290c3RyYXAoKSB7IHJldHVybiB0aGlzLl9ib290c3RyYXA7IH1cbiAgICBwdWJsaWMgZ2V0IHZlcnNpb24oKSB7IHJldHVybiB0aGlzLl92ZXJzaW9uOyB9XG4gICAgcHVibGljIGdldCBkZXN0aW5hdGlvbigpIHsgcmV0dXJuIHRoaXMuX2Rlc3RpbmF0aW9uOyB9XG4gICAgcHVibGljIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuX2lkOyB9XG4gICAgcHVibGljIGdldCBsb2NhdGlvbigpIHsgcmV0dXJuIHRoaXMuX2xvY2F0aW9uOyB9XG5cbiAgICBwcml2YXRlIF9nZXRJZEtleSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BsYXRmb3JtICE9PSBTdXBwb3J0ZWRQbGF0Zm9ybS5XaW5kb3dzICYmIHRoaXMuX3J1bnRpbWUgPT09IFJ1bnRpbWUuQ2xyT3JNb25vKSB7XG4gICAgICAgICAgICByZXR1cm4gYG1vbm9gO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJ1bnRpbWVOYW1lID0gJ25ldGNvcmVhcHAxLjAnO1xuICAgICAgICBpZiAodGhpcy5fcnVudGltZSA9PT0gUnVudGltZS5DbHJPck1vbm8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wbGF0Zm9ybSA9PT0gU3VwcG9ydGVkUGxhdGZvcm0uV2luZG93cykge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVOYW1lID0gJ25ldDQ1MSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVOYW1lID0gJ21vbm8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX29zfS0ke3RoaXMuX2FyY2h9LSR7cnVudGltZU5hbWV9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRPc05hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wbGF0Zm9ybSA9PT0gU3VwcG9ydGVkUGxhdGZvcm0uV2luZG93cykgcmV0dXJuICd3aW4nO1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBTdXBwb3J0ZWRQbGF0Zm9ybVt0aGlzLl9wbGF0Zm9ybV07XG4gICAgICAgIGlmIChuYW1lKSByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbCAqL1xuICAgIHByaXZhdGUgX2dldFJ1bnRpbWVMb2NhdGlvbigpIHtcbiAgICAgICAgbGV0IHBhdGg6IHN0cmluZyA9IHByb2Nlc3MuZW52WydPTU5JU0hBUlAnXTtcblxuICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9tbmlzaGFycCA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgfHwgdGhpcy5fcnVudGltZSA9PT0gUnVudGltZS5DbHJPck1vbm8gPyAnT21uaVNoYXJwLmV4ZScgOiAnT21uaVNoYXJwJztcbiAgICAgICAgICAgIHBhdGggPSByZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLycsIHRoaXMuX2lkLCBvbW5pc2hhcnApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicgJiYgdGhpcy5fcnVudGltZSA9PT0gUnVudGltZS5DbHJPck1vbm8pIHtcbiAgICAgICAgICAgIHJldHVybiBgbW9ubyAke3BhdGh9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLXN0cmluZy1saXRlcmFsICovXG5cbiAgICBwcml2YXRlIF9jaGVja0N1cnJlbnRWZXJzaW9uKCkge1xuICAgICAgICBsZXQgZmlsZW5hbWUgPSBqb2luKHRoaXMuX2Rlc3RpbmF0aW9uLCAnLnZlcnNpb24nKTtcblxuICAgICAgICByZXR1cm4gZXhpc3RzKGZpbGVuYW1lKVxuICAgICAgICAgICAgLmZsYXRNYXAoKGlzQ3VycmVudCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRSdW50aW1lKCkuaXNFbXB0eSgpLCAoZXgsIGlzRW1wdHkpID0+IGV4ICYmICFpc0VtcHR5KVxuICAgICAgICAgICAgLmZsYXRNYXAoZXggPT4gT2JzZXJ2YWJsZS5pZihcbiAgICAgICAgICAgICAgICAoKSA9PiBleCxcbiAgICAgICAgICAgICAgICBPYnNlcnZhYmxlLmRlZmVyKCgpID0+IHJlYWRGaWxlKGZpbGVuYW1lKS5tYXAoY29udGVudCA9PiBjb250ZW50LnRvU3RyaW5nKCkudHJpbSgpID09PSB0aGlzLl92ZXJzaW9uKSksXG4gICAgICAgICAgICAgICAgT2JzZXJ2YWJsZS5vZihmYWxzZSlcbiAgICAgICAgICAgICkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2Vuc3VyZUN1cnJlbnRWZXJzaW9uKCkge1xuICAgICAgICBsZXQgZGVzdCA9IHRoaXMuX2Rlc3RpbmF0aW9uO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGVja0N1cnJlbnRWZXJzaW9uKClcbiAgICAgICAgICAgIC5mbGF0TWFwKGlzQ3VycmVudCA9PiBPYnNlcnZhYmxlLmlmKFxuICAgICAgICAgICAgICAgICgpID0+ICFpc0N1cnJlbnQsXG4gICAgICAgICAgICAgICAgT2JzZXJ2YWJsZS5kZWZlcigoKSA9PiBjcmVhdGVPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdCA9IGRlc3QgfHwgZGVmYXVsdERlc3Q7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ3JpbXJhZicpKGRlc3QsIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgeyBvYnNlcnZlci5lcnJvcihlcnIpOyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGlzQ3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBPYnNlcnZhYmxlLm9mKGlzQ3VycmVudClcbiAgICAgICAgICAgICkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaW5kUnVudGltZShsb2NhdGlvbjogc3RyaW5nID0gcmVzb2x2ZShkZWZhdWx0RGVzdCkpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRSdW50aW1lQnlJZCh0aGlzLl9pZCwgbG9jYXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkb3dubG9hZFJ1bnRpbWUoKSB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmRlZmVyKCgpID0+IE9ic2VydmFibGUuY29uY2F0KFxuICAgICAgICAgICAgLy8gZG93bmxvYWRTcGVjaWZpY1J1bnRpbWUoXCJvbW5pc2hhcnAuYm9vdHN0cmFwXCIsIGN0eCwgbG9nZ2VyLCBkZXN0KSxcbiAgICAgICAgICAgIHRoaXMuX2Rvd25sb2FkU3BlY2lmaWNSdW50aW1lKCdvbW5pc2hhcnAnKVxuICAgICAgICApKVxuICAgICAgICAgICAgLnN1YnNjcmliZU9uKFNjaGVkdWxlci5hc3luYylcbiAgICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAgIC5jb25jYXRNYXAoKCkgPT4gT2JzZXJ2YWJsZS5iaW5kQ2FsbGJhY2s8c3RyaW5nLCBhbnksIGFueT4oZnMud3JpdGVGaWxlKShqb2luKHRoaXMuX2Rlc3RpbmF0aW9uLCAnLnZlcnNpb24nKSwgdGhpcy5fdmVyc2lvbiksIChyZXN1bHQpID0+IHJlc3VsdCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRvd25sb2FkUnVudGltZUlmTWlzc2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vuc3VyZUN1cnJlbnRWZXJzaW9uKClcbiAgICAgICAgICAgIC5mbGF0TWFwKChpc0N1cnJlbnQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5maW5kUnVudGltZSgpLmlzRW1wdHkoKSlcbiAgICAgICAgICAgIC5mbGF0TWFwKGVtcHR5ID0+IE9ic2VydmFibGUuaWYoXG4gICAgICAgICAgICAgICAgKCkgPT4gZW1wdHksXG4gICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFJ1bnRpbWUoKVxuICAgICAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZG93bmxvYWRTcGVjaWZpY1J1bnRpbWUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gYCR7bmFtZX0tJHt0aGlzLl9rZXl9LiR7dGhpcy5fcGxhdGZvcm0gPT09IFN1cHBvcnRlZFBsYXRmb3JtLldpbmRvd3MgPyAnemlwJyA6ICd0YXIuZ3onfWA7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gdGhpcy5fZGVzdGluYXRpb247XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGVzdGluYXRpb24pKVxuICAgICAgICAgICAgICAgIGZzLm1rZGlyU3luYyhkZXN0aW5hdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgLyogKi8gfVxuXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2dpdGh1Yi5jb20vT21uaVNoYXJwL29tbmlzaGFycC1yb3NseW4vcmVsZWFzZXMvZG93bmxvYWQvJHt0aGlzLl92ZXJzaW9ufS8ke2ZpbGVuYW1lfWA7XG4gICAgICAgIGNvbnN0IHBhdGggPSBqb2luKGRlc3RpbmF0aW9uLCBmaWxlbmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuZGVmZXIoKCkgPT4gT2JzZXJ2YWJsZS5jb25jYXQoXG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkRmlsZSh1cmwsIHBhdGgpLmRlbGF5KDEwMCksXG4gICAgICAgICAgICBPYnNlcnZhYmxlLmRlZmVyKCgpID0+IHRoaXMuX2V4dHJhY3QodGhpcy5fcGxhdGZvcm0gPT09IFN1cHBvcnRlZFBsYXRmb3JtLldpbmRvd3MsIHBhdGgsIGRlc3RpbmF0aW9uKSlcbiAgICAgICAgKVxuICAgICAgICAgICAgLmRvKHsgY29tcGxldGU6ICgpID0+IHsgdHJ5IHsgZnMudW5saW5rU3luYyhwYXRoKTsgfSBjYXRjaCAoZSkgeyAvKiAqLyB9IH0gfSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmVPbihTY2hlZHVsZXIuYXN5bmMpKVxuICAgICAgICAgICAgLm1hcCgoKSA9PiBuYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZG93bmxvYWRGaWxlKHVybDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xvZ2dlcikge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZyhgRG93bmxvYWRpbmcgJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVPYnNlcnZhYmxlPHZvaWQ+KChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5nZXQodXJsKVxuICAgICAgICAgICAgICAgIC5waXBlKGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGgpKVxuICAgICAgICAgICAgICAgIC5vbignZXJyb3InLCBiaW5kKG9ic2VydmVyLmVycm9yLCBvYnNlcnZlcikpXG4gICAgICAgICAgICAgICAgLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sb2dnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5sb2coYEZpbmlzaGVkIGRvd25sb2FkaW5nICR7cGF0aH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2V4dHJhY3Qod2luMzI6IGJvb2xlYW4sIHBhdGg6IHN0cmluZywgZGVzdDogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2dnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5sb2coYEV4dHJhY3RpbmcgJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvbXByZXNzKHBhdGgsIGRlc3QsIHsgbW9kZTogJzc1NScgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNTdXBwb3J0ZWRSdW50aW1lID0gbWVtb2l6ZShmdW5jdGlvbiAoY3R4OiBSdW50aW1lQ29udGV4dCkge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmRlZmVyKCgpID0+IHtcbiAgICAgICAgLy8gT24gd2luZG93cyB3ZSdsbCBqdXN0IHVzZSB0aGUgY2xyLCBpdCdzIHRoZXJlXG4gICAgICAgIC8vIE9uIG1hYyAvIGxpbnV4IGlmIHdlJ3ZlIHBpY2tlZCBDb3JlQ2xyIHN0aWNrIHdpdGggdGhhdFxuICAgICAgICBpZiAoY3R4LnBsYXRmb3JtID09PSBTdXBwb3J0ZWRQbGF0Zm9ybS5XaW5kb3dzIHx8IGN0eC5ydW50aW1lID09PSBSdW50aW1lLkNvcmVDbHIpIHtcbiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHsgcnVudGltZTogY3R4LnJ1bnRpbWUsIHBhdGg6IHByb2Nlc3MuZW52LlBBVEggfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIG1vbm8gZXhpc3RzIG9uIHRoZSBzeXN0ZW1cbiAgICAgICAgLy8gSWYgaXQgZG9lc24ndCB3ZSdsbCBqdXN0IHJ1biBDb3JlQ2xyXG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb20oPHN0cmluZ1tdPlBBVEgpXG4gICAgICAgICAgICAubWFwKHBhdGggPT4gam9pbihwYXRoLCAnbW9ubycpKVxuICAgICAgICAgICAgLmNvbmNhdE1hcChwYXRoID0+IGV4aXN0cyhwYXRoKS5tYXAoZSA9PiAoeyBleGlzdHM6IGUsIHBhdGggfSkpKVxuICAgICAgICAgICAgLmZpbHRlcih4ID0+IHguZXhpc3RzKVxuICAgICAgICAgICAgLm1hcCh4ID0+ICh7IHJ1bnRpbWU6IFJ1bnRpbWUuQ2xyT3JNb25vLCBwYXRoOiBbeC5wYXRoXS5jb25jYXQoUEFUSCkuam9pbihkZWxpbWl0ZXIpIH0pKVxuICAgICAgICAgICAgLnRha2UoMSlcbiAgICAgICAgICAgIC5kZWZhdWx0SWZFbXB0eSh7IHJ1bnRpbWU6IFJ1bnRpbWUuQ29yZUNsciwgcGF0aDogcHJvY2Vzcy5lbnYuUEFUSCB9KTtcbiAgICB9KVxuICAgICAgICAvLy5kbyhjdCA9PiBjb25zb2xlLmxvZyhgU3VwcG9ydGVkIHJ1bnRpbWUgZm9yIFwiJHtSdW50aW1lW2N0LnJ1bnRpbWVdfVwiIHdhczogJHtSdW50aW1lW2N0LnJ1bnRpbWVdfWApKVxuICAgICAgICAuY2FjaGUoMSk7XG59LCBmdW5jdGlvbiAoe3BsYXRmb3JtLCBhcmNoLCBydW50aW1lLCB2ZXJzaW9ufTogUnVudGltZUNvbnRleHQpIHsgcmV0dXJuIGAke2FyY2h9LSR7cGxhdGZvcm19OiR7UnVudGltZVtydW50aW1lXX06JHt2ZXJzaW9ufWA7IH0pO1xuXG5mdW5jdGlvbiBmaW5kT21uaXNoYXJwRXhlY3VhYmxlKHJ1bnRpbWVJZDogc3RyaW5nLCBsb2NhdGlvbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoXG4gICAgICAgIGV4aXN0cyhyZXNvbHZlKGxvY2F0aW9uLCBydW50aW1lSWQsICdPbW5pU2hhcnAuZXhlJykpLFxuICAgICAgICBleGlzdHMocmVzb2x2ZShsb2NhdGlvbiwgcnVudGltZUlkLCAnT21uaVNoYXJwJykpXG4gICAgKVxuICAgICAgICAuZmlsdGVyKHggPT4geClcbiAgICAgICAgLnRha2UoMSlcbiAgICAgICAgLnNoYXJlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUnVudGltZUJ5SWQocnVudGltZUlkOiBzdHJpbmcsIGxvY2F0aW9uOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiBmaW5kT21uaXNoYXJwRXhlY3VhYmxlKHJ1bnRpbWVJZCwgbG9jYXRpb24pXG4gICAgICAgIC5tYXAoeCA9PiByZXNvbHZlKGxvY2F0aW9uLCBydW50aW1lSWQpKVxuICAgICAgICAuc2hhcmUoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
