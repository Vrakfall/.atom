"use strict";
var prioritization_1 = require('./prioritization');
var rxjs_1 = require('rxjs');
var lodash_1 = require('lodash');
var QueuePriority;
(function (QueuePriority) {
    QueuePriority[QueuePriority["Priority"] = 0] = "Priority";
    QueuePriority[QueuePriority["Normal"] = 1] = "Normal";
    QueuePriority[QueuePriority["Deferred"] = 2] = "Deferred";
})(QueuePriority || (QueuePriority = {}));
function getQueue(context) {
    if (prioritization_1.isPriorityCommand(context)) {
        return QueuePriority.Priority;
    }
    if (prioritization_1.isDeferredCommand(context)) {
        return QueuePriority.Deferred;
    }
    return QueuePriority.Normal;
}
var RequestQueue = (function () {
    function RequestQueue(concurrency, complete) {
        this.concurrency = concurrency;
        this.complete = complete;
        this.queue = [];
        this.requests = [];
    }
    RequestQueue.prototype.enqueue = function (item) {
        this.queue.push(item);
    };
    Object.defineProperty(RequestQueue.prototype, "full", {
        get: function () {
            return this.requests.length >= this.concurrency;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestQueue.prototype, "pending", {
        get: function () {
            return this.queue.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    RequestQueue.prototype.drain = function () {
        var _this = this;
        var i = 0;
        var slots = this.concurrency - this.requests.length;
        var _loop_1 = function() {
            var item = this_1.queue.shift();
            this_1.requests.push(item);
            item.subscribe({
                complete: function () {
                    lodash_1.pull(_this.requests, item);
                    _this.complete();
                }
            });
            item.next(null);
            item.complete();
            if (this_1.full)
                return { value: void 0 };
        };
        var this_1 = this;
        do {
            var state_1 = _loop_1();
            if (typeof state_1 === "object") return state_1.value;
        } while (this.queue.length && ++i < slots);
    };
    return RequestQueue;
}());
var Queue = (function () {
    function Queue(_concurrency, _requestCallback) {
        this._concurrency = _concurrency;
        this._requestCallback = _requestCallback;
        this._processing = false;
        // Keep deferred concurrency at a min of two, this lets us get around long running requests jamming the pipes.
        var _deferredConcurrency = Math.max(Math.floor(_concurrency / 4), 2);
        var complete = lodash_1.bind(this._complete, this);
        this._priority = new RequestQueue(1, complete);
        this._normal = new RequestQueue(_concurrency, complete);
        this._deferred = new RequestQueue(_deferredConcurrency, complete);
    }
    Queue.prototype.enqueue = function (context) {
        var _this = this;
        var subject = new rxjs_1.AsyncSubject();
        var observable = subject
            .asObservable()
            .mergeMap(function (x) { return _this._requestCallback(context); });
        // Doing a little bit of tickery here
        // Going to return this Observable, as if it were promise like.
        // And we will only commit to the promise once someone calls then on it.
        // This way another client, can cast the result to an observable, and gain cancelation
        var promiseLike = observable;
        promiseLike.then = (function (fulfilled, rejected) {
            return observable.toPromise().then(fulfilled, rejected);
        });
        var queue = getQueue(context);
        if (queue === QueuePriority.Priority)
            this._priority.enqueue(subject);
        if (queue === QueuePriority.Normal)
            this._normal.enqueue(subject);
        if (queue === QueuePriority.Deferred)
            this._deferred.enqueue(subject);
        this.drain();
        return observable;
    };
    Queue.prototype.drain = function () {
        if (this._processing)
            return;
        // Request inflight
        if (this._priority.full)
            return;
        if (this._normal.full && this._deferred.full)
            return;
        this._processing = true;
        if (this._priority.pending) {
            this._priority.drain();
            return;
        }
        if (this._normal.pending) {
            this._normal.drain();
        }
        if (this._deferred.pending) {
            this._deferred.drain();
        }
    };
    Queue.prototype._complete = function () {
        this._processing = false;
        this.drain();
    };
    return Queue;
}());
exports.Queue = Queue;

//# sourceMappingURL=data:application/json;base64,
