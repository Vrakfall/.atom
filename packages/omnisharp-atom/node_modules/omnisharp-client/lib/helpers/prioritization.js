"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isPriorityCommand = isPriorityCommand;
exports.isNormalCommand = isNormalCommand;
exports.isDeferredCommand = isDeferredCommand;

var _lodash = require("lodash");

var normalCommands = ["findimplementations", "findsymbols", "findusages", "gotodefinition", "typelookup", "navigateup", "navigatedown", "getcodeactions", "filesChanged", "runcodeaction", "autocomplete", "signatureHelp"];
var priorityCommands = ["updatebuffer", "changebuffer", "formatAfterKeystroke"];
var prioritySet = new Set();
var normalSet = new Set();
var deferredSet = new Set();
var undeferredSet = new Set();
(0, _lodash.each)(normalCommands, function (x) {
    normalSet.add(x);
    undeferredSet.add(x);
});
(0, _lodash.each)(priorityCommands, function (x) {
    prioritySet.add(x);
    undeferredSet.add(x);
});
function isPriorityCommand(request) {
    return prioritySet.has(request.command);
}
;
function isNormalCommand(request) {
    return !isDeferredCommand(request) && normalSet.has(request.command);
}
function isDeferredCommand(request) {
    if (request.silent && !isPriorityCommand(request)) {
        return true;
    }
    if (deferredSet.has(request.command)) {
        return true;
    }
    if (undeferredSet.has(request.command)) {
        return false;
    }
    deferredSet.add(request.command);
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzL3ByaW9yaXRpemF0aW9uLnRzIiwibGliL2hlbHBlcnMvcHJpb3JpdGl6YXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE0QkE7UUFJQTtRQUlBOztBQ3BDQTs7QURHQSxJQUFNLGlCQUFpQixDQUNuQixxQkFEbUIsRUFDSSxhQURKLEVBQ21CLFlBRG5CLEVBRW5CLGdCQUZtQixFQUVELFlBRkMsRUFFYSxZQUZiLEVBR25CLGNBSG1CLEVBR0gsZ0JBSEcsRUFHZSxjQUhmLEVBSW5CLGVBSm1CLEVBSUYsY0FKRSxFQUljLGVBSmQsQ0FBakI7QUFNTixJQUFNLG1CQUFtQixDQUNyQixjQURxQixFQUNMLGNBREssRUFDVyxzQkFEWCxDQUFuQjtBQUlOLElBQU0sY0FBYyxJQUFJLEdBQUosRUFBZDtBQUNOLElBQU0sWUFBWSxJQUFJLEdBQUosRUFBWjtBQUNOLElBQU0sY0FBYyxJQUFJLEdBQUosRUFBZDtBQUNOLElBQU0sZ0JBQWdCLElBQUksR0FBSixFQUFoQjtBQUVOLGtCQUFLLGNBQUwsRUFBcUIsYUFBQztBQUNsQixjQUFVLEdBQVYsQ0FBYyxDQUFkLEVBRGtCO0FBRWxCLGtCQUFjLEdBQWQsQ0FBa0IsQ0FBbEIsRUFGa0I7Q0FBRCxDQUFyQjtBQUtBLGtCQUFLLGdCQUFMLEVBQXVCLGFBQUM7QUFDcEIsZ0JBQVksR0FBWixDQUFnQixDQUFoQixFQURvQjtBQUVwQixrQkFBYyxHQUFkLENBQWtCLENBQWxCLEVBRm9CO0NBQUQsQ0FBdkI7QUFLQSxTQUFBLGlCQUFBLENBQWtDLE9BQWxDLEVBQThEO0FBQzFELFdBQU8sWUFBWSxHQUFaLENBQWdCLFFBQVEsT0FBUixDQUF2QixDQUQwRDtDQUE5RDtBQUVDO0FBRUQsU0FBQSxlQUFBLENBQWdDLE9BQWhDLEVBQTREO0FBQ3hELFdBQU8sQ0FBQyxrQkFBa0IsT0FBbEIsQ0FBRCxJQUErQixVQUFVLEdBQVYsQ0FBYyxRQUFRLE9BQVIsQ0FBN0MsQ0FEaUQ7Q0FBNUQ7QUFJQSxTQUFBLGlCQUFBLENBQWtDLE9BQWxDLEVBQThEO0FBQzFELFFBQUksUUFBUSxNQUFSLElBQWtCLENBQUMsa0JBQWtCLE9BQWxCLENBQUQsRUFBNkI7QUFDL0MsZUFBTyxJQUFQLENBRCtDO0tBQW5EO0FBSUEsUUFBSSxZQUFZLEdBQVosQ0FBZ0IsUUFBUSxPQUFSLENBQXBCLEVBQXNDO0FBQ2xDLGVBQU8sSUFBUCxDQURrQztLQUF0QztBQUlBLFFBQUksY0FBYyxHQUFkLENBQWtCLFFBQVEsT0FBUixDQUF0QixFQUF3QztBQUNwQyxlQUFPLEtBQVAsQ0FEb0M7S0FBeEM7QUFJQSxnQkFBWSxHQUFaLENBQWdCLFFBQVEsT0FBUixDQUFoQixDQWIwRDtBQWMxRCxXQUFPLElBQVAsQ0FkMEQ7Q0FBOUQiLCJmaWxlIjoibGliL2hlbHBlcnMvcHJpb3JpdGl6YXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JlcXVlc3RDb250ZXh0fSBmcm9tIFwiLi4vY29udGV4dHNcIjtcbmltcG9ydCB7ZWFjaH0gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBub3JtYWxDb21tYW5kcyA9IFtcbiAgICBcImZpbmRpbXBsZW1lbnRhdGlvbnNcIiwgXCJmaW5kc3ltYm9sc1wiLCBcImZpbmR1c2FnZXNcIixcbiAgICBcImdvdG9kZWZpbml0aW9uXCIsIFwidHlwZWxvb2t1cFwiLCBcIm5hdmlnYXRldXBcIixcbiAgICBcIm5hdmlnYXRlZG93blwiLCBcImdldGNvZGVhY3Rpb25zXCIsIFwiZmlsZXNDaGFuZ2VkXCIsXG4gICAgXCJydW5jb2RlYWN0aW9uXCIsIFwiYXV0b2NvbXBsZXRlXCIsIFwic2lnbmF0dXJlSGVscFwiXG5dO1xuY29uc3QgcHJpb3JpdHlDb21tYW5kcyA9IFtcbiAgICBcInVwZGF0ZWJ1ZmZlclwiLCBcImNoYW5nZWJ1ZmZlclwiLCBcImZvcm1hdEFmdGVyS2V5c3Ryb2tlXCJcbl07XG5cbmNvbnN0IHByaW9yaXR5U2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG5jb25zdCBub3JtYWxTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbmNvbnN0IGRlZmVycmVkU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG5jb25zdCB1bmRlZmVycmVkU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbmVhY2gobm9ybWFsQ29tbWFuZHMsIHggPT4ge1xuICAgIG5vcm1hbFNldC5hZGQoeCk7XG4gICAgdW5kZWZlcnJlZFNldC5hZGQoeCk7XG59KTtcblxuZWFjaChwcmlvcml0eUNvbW1hbmRzLCB4ID0+IHtcbiAgICBwcmlvcml0eVNldC5hZGQoeCk7XG4gICAgdW5kZWZlcnJlZFNldC5hZGQoeCk7XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpb3JpdHlDb21tYW5kKHJlcXVlc3Q6IFJlcXVlc3RDb250ZXh0PGFueT4pIHtcbiAgICByZXR1cm4gcHJpb3JpdHlTZXQuaGFzKHJlcXVlc3QuY29tbWFuZCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOb3JtYWxDb21tYW5kKHJlcXVlc3Q6IFJlcXVlc3RDb250ZXh0PGFueT4pIHtcbiAgICByZXR1cm4gIWlzRGVmZXJyZWRDb21tYW5kKHJlcXVlc3QpICYmIG5vcm1hbFNldC5oYXMocmVxdWVzdC5jb21tYW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmZXJyZWRDb21tYW5kKHJlcXVlc3Q6IFJlcXVlc3RDb250ZXh0PGFueT4pIHtcbiAgICBpZiAocmVxdWVzdC5zaWxlbnQgJiYgIWlzUHJpb3JpdHlDb21tYW5kKHJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkZWZlcnJlZFNldC5oYXMocmVxdWVzdC5jb21tYW5kKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodW5kZWZlcnJlZFNldC5oYXMocmVxdWVzdC5jb21tYW5kKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZGVmZXJyZWRTZXQuYWRkKHJlcXVlc3QuY29tbWFuZCk7XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgeyBlYWNoIH0gZnJvbSBcImxvZGFzaFwiO1xuY29uc3Qgbm9ybWFsQ29tbWFuZHMgPSBbXG4gICAgXCJmaW5kaW1wbGVtZW50YXRpb25zXCIsIFwiZmluZHN5bWJvbHNcIiwgXCJmaW5kdXNhZ2VzXCIsXG4gICAgXCJnb3RvZGVmaW5pdGlvblwiLCBcInR5cGVsb29rdXBcIiwgXCJuYXZpZ2F0ZXVwXCIsXG4gICAgXCJuYXZpZ2F0ZWRvd25cIiwgXCJnZXRjb2RlYWN0aW9uc1wiLCBcImZpbGVzQ2hhbmdlZFwiLFxuICAgIFwicnVuY29kZWFjdGlvblwiLCBcImF1dG9jb21wbGV0ZVwiLCBcInNpZ25hdHVyZUhlbHBcIlxuXTtcbmNvbnN0IHByaW9yaXR5Q29tbWFuZHMgPSBbXG4gICAgXCJ1cGRhdGVidWZmZXJcIiwgXCJjaGFuZ2VidWZmZXJcIiwgXCJmb3JtYXRBZnRlcktleXN0cm9rZVwiXG5dO1xuY29uc3QgcHJpb3JpdHlTZXQgPSBuZXcgU2V0KCk7XG5jb25zdCBub3JtYWxTZXQgPSBuZXcgU2V0KCk7XG5jb25zdCBkZWZlcnJlZFNldCA9IG5ldyBTZXQoKTtcbmNvbnN0IHVuZGVmZXJyZWRTZXQgPSBuZXcgU2V0KCk7XG5lYWNoKG5vcm1hbENvbW1hbmRzLCB4ID0+IHtcbiAgICBub3JtYWxTZXQuYWRkKHgpO1xuICAgIHVuZGVmZXJyZWRTZXQuYWRkKHgpO1xufSk7XG5lYWNoKHByaW9yaXR5Q29tbWFuZHMsIHggPT4ge1xuICAgIHByaW9yaXR5U2V0LmFkZCh4KTtcbiAgICB1bmRlZmVycmVkU2V0LmFkZCh4KTtcbn0pO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpb3JpdHlDb21tYW5kKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gcHJpb3JpdHlTZXQuaGFzKHJlcXVlc3QuY29tbWFuZCk7XG59XG47XG5leHBvcnQgZnVuY3Rpb24gaXNOb3JtYWxDb21tYW5kKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gIWlzRGVmZXJyZWRDb21tYW5kKHJlcXVlc3QpICYmIG5vcm1hbFNldC5oYXMocmVxdWVzdC5jb21tYW5kKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmVycmVkQ29tbWFuZChyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3Quc2lsZW50ICYmICFpc1ByaW9yaXR5Q29tbWFuZChyZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRlZmVycmVkU2V0LmhhcyhyZXF1ZXN0LmNvbW1hbmQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodW5kZWZlcnJlZFNldC5oYXMocmVxdWVzdC5jb21tYW5kKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlZmVycmVkU2V0LmFkZChyZXF1ZXN0LmNvbW1hbmQpO1xuICAgIHJldHVybiB0cnVlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
