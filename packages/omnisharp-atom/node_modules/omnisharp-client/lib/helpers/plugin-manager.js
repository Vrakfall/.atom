"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _rxjs = require("rxjs");

var _disposables = require("../disposables");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PluginManager = exports.PluginManager = function () {
    function PluginManager(plugins) {
        var _this = this;

        _classCallCheck(this, PluginManager);

        this._disposable = new _disposables.CompositeDisposable();
        this._pluginsChanged = new _rxjs.Subject();
        this._currentBootstrap = null;
        this._observePluginsChanged = this._pluginsChanged.debounceTime(1000);
        this._plugins = new Set();
        (0, _lodash.each)(plugins, function (plugin) {
            return _this._plugins.add(plugin);
        });
        this._disposable.add(this._pluginsChanged.subscribe(function () {
            return _this._currentBootstrap = null;
        }));
    }

    _createClass(PluginManager, [{
        key: "add",
        value: function add(plugin) {
            this._plugins.add(plugin);
            this._pluginsChanged.next(true);
        }
    }, {
        key: "remove",
        value: function remove(plugin) {
            this._plugins.delete(plugin);
            this._pluginsChanged.next(true);
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this._disposable.dispose();
        }
    }, {
        key: "changed",
        get: function get() {
            return this._observePluginsChanged;
        }
    }, {
        key: "plugins",
        get: function get() {
            return this._plugins;
        }
    }]);

    return PluginManager;
}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzL3BsdWdpbi1tYW5hZ2VyLmpzIiwibGliL2hlbHBlcnMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7SUNLQTtBQVdJLGFBWEosYUFXSSxDQUFZLE9BQVosRUFBdUM7Ozs4QkFYM0MsZUFXMkM7O0FBVi9CLGFBQUEsV0FBQSxHQUFjLHNDQUFkLENBVStCO0FBVC9CLGFBQUEsZUFBQSxHQUFrQixtQkFBbEIsQ0FTK0I7QUFSL0IsYUFBQSxpQkFBQSxHQUE0QixJQUE1QixDQVErQjtBQU4vQixhQUFBLHNCQUFBLEdBQXlCLEtBQUssZUFBTCxDQUFxQixZQUFyQixDQUFrQyxJQUFsQyxDQUF6QixDQU0rQjtBQUgvQixhQUFBLFFBQUEsR0FBVyxJQUFJLEdBQUosRUFBWCxDQUcrQjtBQUNuQywwQkFBSyxPQUFMLEVBQWM7bUJBQVUsTUFBSyxRQUFMLENBQWMsR0FBZCxDQUFrQixNQUFsQjtTQUFWLENBQWQsQ0FEbUM7QUFFbkMsYUFBSyxXQUFMLENBQWlCLEdBQWpCLENBQXFCLEtBQUssZUFBTCxDQUFxQixTQUFyQixDQUErQjttQkFBTSxNQUFLLGlCQUFMLEdBQXlCLElBQXpCO1NBQU4sQ0FBcEQsRUFGbUM7S0FBdkM7O2lCQVhKOzs0QkFnQmUsUUFBd0I7QUFDL0IsaUJBQUssUUFBTCxDQUFjLEdBQWQsQ0FBa0IsTUFBbEIsRUFEK0I7QUFFL0IsaUJBQUssZUFBTCxDQUFxQixJQUFyQixDQUEwQixJQUExQixFQUYrQjs7OzsrQkFLckIsUUFBd0I7QUFDbEMsaUJBQUssUUFBTCxDQUFjLE1BQWQsQ0FBcUIsTUFBckIsRUFEa0M7QUFFbEMsaUJBQUssZUFBTCxDQUFxQixJQUFyQixDQUEwQixJQUExQixFQUZrQzs7OztrQ0FLeEI7QUFDVixpQkFBSyxXQUFMLENBQWlCLE9BQWpCLEdBRFU7Ozs7NEJBcEJJO0FBQUssbUJBQU8sS0FBSyxzQkFBTCxDQUFaOzs7OzRCQUdBO0FBQUssbUJBQU8sS0FBSyxRQUFMLENBQVo7Ozs7V0FUdEIiLCJmaWxlIjoibGliL2hlbHBlcnMvcGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlYWNoIH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSBcIi4uL2Rpc3Bvc2FibGVzXCI7XG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IocGx1Z2lucykge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fcGx1Z2luc0NoYW5nZWQgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50Qm9vdHN0cmFwID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZVBsdWdpbnNDaGFuZ2VkID0gdGhpcy5fcGx1Z2luc0NoYW5nZWQuZGVib3VuY2VUaW1lKDEwMDApO1xuICAgICAgICB0aGlzLl9wbHVnaW5zID0gbmV3IFNldCgpO1xuICAgICAgICBlYWNoKHBsdWdpbnMsIHBsdWdpbiA9PiB0aGlzLl9wbHVnaW5zLmFkZChwbHVnaW4pKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQodGhpcy5fcGx1Z2luc0NoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHRoaXMuX2N1cnJlbnRCb290c3RyYXAgPSBudWxsKSk7XG4gICAgfVxuICAgIGdldCBjaGFuZ2VkKCkgeyByZXR1cm4gdGhpcy5fb2JzZXJ2ZVBsdWdpbnNDaGFuZ2VkOyB9XG4gICAgZ2V0IHBsdWdpbnMoKSB7IHJldHVybiB0aGlzLl9wbHVnaW5zOyB9XG4gICAgYWRkKHBsdWdpbikge1xuICAgICAgICB0aGlzLl9wbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICB0aGlzLl9wbHVnaW5zQ2hhbmdlZC5uZXh0KHRydWUpO1xuICAgIH1cbiAgICByZW1vdmUocGx1Z2luKSB7XG4gICAgICAgIHRoaXMuX3BsdWdpbnMuZGVsZXRlKHBsdWdpbik7XG4gICAgICAgIHRoaXMuX3BsdWdpbnNDaGFuZ2VkLm5leHQodHJ1ZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7ZWFjaH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtJT21uaXNoYXJwUGx1Z2lufSBmcm9tIFwiLi4vZW51bXNcIjtcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuaW1wb3J0IHtTdWJqZWN0LCBPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xuLyogdHNsaW50OmVuYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgSURpc3Bvc2FibGV9IGZyb20gXCIuLi9kaXNwb3NhYmxlc1wiO1xuXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcbiAgICBwcml2YXRlIF9kaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICBwcml2YXRlIF9wbHVnaW5zQ2hhbmdlZCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICBwcml2YXRlIF9jdXJyZW50Qm9vdHN0cmFwOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBfb2JzZXJ2ZVBsdWdpbnNDaGFuZ2VkID0gdGhpcy5fcGx1Z2luc0NoYW5nZWQuZGVib3VuY2VUaW1lKDEwMDApO1xuICAgIHB1YmxpYyBnZXQgY2hhbmdlZCgpIHsgcmV0dXJuIHRoaXMuX29ic2VydmVQbHVnaW5zQ2hhbmdlZDsgfVxuXG4gICAgcHJpdmF0ZSBfcGx1Z2lucyA9IG5ldyBTZXQ8SU9tbmlzaGFycFBsdWdpbj4oKTtcbiAgICBwdWJsaWMgZ2V0IHBsdWdpbnMoKSB7IHJldHVybiB0aGlzLl9wbHVnaW5zOyB9XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW5zOiBJT21uaXNoYXJwUGx1Z2luW10pIHtcbiAgICAgICAgZWFjaChwbHVnaW5zLCBwbHVnaW4gPT4gdGhpcy5fcGx1Z2lucy5hZGQocGx1Z2luKSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuYWRkKHRoaXMuX3BsdWdpbnNDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jdXJyZW50Qm9vdHN0cmFwID0gbnVsbCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGQocGx1Z2luOiBJT21uaXNoYXJwUGx1Z2luKSB7XG4gICAgICAgIHRoaXMuX3BsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgIHRoaXMuX3BsdWdpbnNDaGFuZ2VkLm5leHQodHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZShwbHVnaW46IElPbW5pc2hhcnBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5fcGx1Z2lucy5kZWxldGUocGx1Z2luKTtcbiAgICAgICAgdGhpcy5fcGx1Z2luc0NoYW5nZWQubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
