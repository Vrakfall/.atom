"use strict";
var rxjs_1 = require('rxjs');
var ts_disposables_1 = require('ts-disposables');
var lodash_1 = require('lodash');
var enums_1 = require('../enums');
var contexts_1 = require('../contexts');
var options_1 = require('../options');
var prioritization_1 = require('../helpers/prioritization');
var create_1 = require('../operators/create');
var preconditions_1 = require('../helpers/preconditions');
var decorators_1 = require('../helpers/decorators');
function pausable(incomingStream, pauser) {
    return create_1.createObservable(function (observer) {
        var paused;
        var queue = [];
        var sub = new rxjs_1.Subscription();
        sub.add(pauser.subscribe(function (shouldRun) {
            paused = !shouldRun;
            if (shouldRun && queue.length) {
                lodash_1.each(queue, function (r) { return observer.next(r); });
                queue = [];
            }
        }));
        sub.add(incomingStream
            .subscribe(function (request) {
            if (paused) {
                queue.push(request);
            }
            else {
                observer.next(request);
            }
        }));
        return sub;
    });
}
var ReactiveClient = (function () {
    function ReactiveClient(_options) {
        var _this = this;
        this._requestStream = new rxjs_1.Subject();
        this._responseStream = new rxjs_1.Subject();
        this._responseStreams = new Map();
        this._errorStream = new rxjs_1.Subject();
        this._uniqueId = lodash_1.uniqueId('client');
        this._lowestIndexValue = 0;
        this._disposable = new ts_disposables_1.CompositeDisposable();
        this._eventsStream = new rxjs_1.Subject();
        this._events = this._eventsStream.asObservable();
        this._stateStream = new rxjs_1.BehaviorSubject(enums_1.DriverState.Disconnected);
        this._state = this._stateStream.asObservable();
        this._currentRequests = new Set();
        this._fixups = [];
        _options.driver = _options.driver || (function (options) {
            var item = require('../drivers/stdio');
            var driverFactory = item[lodash_1.keys(item)[0]];
            return new driverFactory(_this._options);
        });
        this._options = lodash_1.defaults(_options, {
            projectPath: '',
            onState: lodash_1.bind(this._stateStream.next, this._stateStream),
            onEvent: lodash_1.bind(this._eventsStream.next, this._eventsStream),
            onCommand: function (packet) {
                var response = new contexts_1.ResponseContext(new contexts_1.RequestContext(_this._uniqueId, packet.Command, {}, {}, 'command'), packet.Body);
                _this._getResponseStream(packet.Command).next(response);
            }
        });
        options_1.ensureClientOptions(_options);
        //this._pluginManager = new PluginManager(_options.plugins);
        this._resetDriver();
        /*this._disposable.add(this._pluginManager.changed.subscribe(() => {
            const driver = this._driver;
            if (isPluginDriver(driver)) {
                driver.updatePlugins(this._pluginManager.plugins);
            }
        }));*/
        this._disposable.add(this._requestStream.subscribe(function (x) { return _this._currentRequests.add(x); }));
        var getStatusValues = function () { return ({
            state: _this._driver.currentState,
            outgoingRequests: _this.outstandingRequests,
            hasOutgoingRequests: _this.outstandingRequests > 0
        }); };
        this.setupRequestStreams();
        var status = rxjs_1.Observable.merge(this._requestStream, this._responseStream);
        this._statusStream = status
            .delay(10)
            .map(getStatusValues)
            .distinctUntilChanged()
            .share();
        this._observe = new ReactiveClientEvents(this);
        if (this._options.debug) {
            this._disposable.add(this._responseStream.subscribe(function (context) {
                // log our complete response time
                _this._eventsStream.next({
                    Event: 'log',
                    Body: {
                        Message: "/" + context.command + "  " + context.responseTime + "ms (round trip)",
                        LogLevel: 'INFORMATION'
                    },
                    Seq: -1,
                    Type: 'log'
                });
            }));
        }
    }
    Object.defineProperty(ReactiveClient.prototype, "uniqueId", {
        //private _pluginManager: PluginManager;
        get: function () { return this._uniqueId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "id", {
        get: function () { return this._driver.id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "serverPath", {
        get: function () { return this._driver.serverPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "projectPath", {
        get: function () { return this._driver.projectPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "runtime", {
        get: function () { return this._driver.runtime; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "events", {
        get: function () { return this._events; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "currentState", {
        get: function () { return this._stateStream.getValue(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "state", {
        get: function () { return this._state; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "outstandingRequests", {
        get: function () { return this._currentRequests.size; },
        enumerable: true,
        configurable: true
    });
    ReactiveClient.prototype.getCurrentRequests = function () {
        var response = [];
        this._currentRequests.forEach(function (request) {
            response.push({
                command: request.command,
                sequence: lodash_1.cloneDeep(request.sequence),
                request: request.request,
                silent: request.silent,
                duration: Date.now() - request.time.getTime()
            });
        });
        return response;
    };
    Object.defineProperty(ReactiveClient.prototype, "status", {
        get: function () { return this._statusStream; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "requests", {
        get: function () { return this._requestStream; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "responses", {
        get: function () { return this._responseStream; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "errors", {
        get: function () { return this._errorStream; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactiveClient.prototype, "observe", {
        get: function () { return this._observe; },
        enumerable: true,
        configurable: true
    });
    ReactiveClient.prototype.dispose = function () {
        if (this._disposable.isDisposed)
            return;
        this.disconnect();
        this._disposable.dispose();
    };
    ReactiveClient.prototype.setupRequestStreams = function () {
        var _this = this;
        var priorityRequests = new rxjs_1.BehaviorSubject(0), priorityResponses = new rxjs_1.BehaviorSubject(0);
        var pauser = rxjs_1.Observable.combineLatest(priorityRequests, priorityResponses, function (requests, responses) {
            if (requests > 0 && responses === requests) {
                priorityRequests.next(0);
                priorityResponses.next(0);
                return true;
            }
            else if (requests > 0) {
                return false;
            }
            return true;
        })
            .startWith(true)
            .debounceTime(120)
            .share();
        // Keep deferred concurrency at a min of two, this lets us get around long running requests jamming the pipes.
        var deferredConcurrency = Math.max(Math.floor(this._options.concurrency / 4), 2);
        // These are operations that should wait until after
        // we have executed all the current priority commands
        // We also defer silent commands to this queue, as they are generally for "background" work
        this._disposable.add(
        //deferredQueue
        pausable(this._requestStream.filter(prioritization_1.isDeferredCommand), pauser)
            .map(function (request) { return _this.handleResult(request); })
            .merge(deferredConcurrency)
            .subscribe(), 
        //normalQueue
        // We just pass these operations through as soon as possible
        pausable(this._requestStream.filter(prioritization_1.isNormalCommand), pauser)
            .map(function (request) { return _this.handleResult(request); })
            .merge(this._options.concurrency)
            .subscribe(), 
        //priorityQueue
        // We must wait for these commands
        this._requestStream
            .filter(prioritization_1.isPriorityCommand)
            .do(function () { return priorityRequests.next(priorityRequests.getValue() + 1); })
            .map(function (request) { return _this.handleResult(request, function () { return priorityResponses.next(priorityResponses.getValue() + 1); }); })
            .concat() // And these commands must run in order.
            .subscribe());
    };
    ReactiveClient.prototype.handleResult = function (context, complete) {
        var _this = this;
        // TODO: Find a way to not repeat the same commands, if there are outstanding (timed out) requests.
        // In some cases for example find usages has taken over 30 seconds, so we shouldn"t hit the server with multiple of these requests (as we slam the cpU)
        var result = this._driver.request(context.command, context.request);
        var responseStream = this._getResponseStream(context.command);
        result.subscribe(function (data) {
            responseStream.next(new contexts_1.ResponseContext(context, data));
        }, function (error) {
            _this._errorStream.next(new contexts_1.CommandContext(context.command, error));
            responseStream.next(new contexts_1.ResponseContext(context, null, true));
            _this._currentRequests.delete(context);
            if (complete) {
                complete();
            }
        }, function () {
            _this._currentRequests.delete(context);
            if (complete) {
                complete();
            }
        });
        return result
            .timeout(this._options.concurrencyTimeout, rxjs_1.Observable.empty());
    };
    ReactiveClient.prototype.log = function (message, logLevel) {
        // log our complete response time
        this._eventsStream.next({
            Event: 'log',
            Body: {
                Message: message,
                LogLevel: logLevel ? logLevel.toUpperCase() : 'INFORMATION'
            },
            Seq: -1,
            Type: 'log'
        });
    };
    ReactiveClient.prototype.connect = function () {
        // Currently connecting
        if (this.currentState >= enums_1.DriverState.Downloading && this.currentState <= enums_1.DriverState.Connected)
            return;
        // Bootstrap plugins here
        this._currentRequests.clear();
        this._driver.connect();
    };
    ReactiveClient.prototype._resetDriver = function () {
        if (this._driver) {
            this._disposable.remove(this._driver);
            this._driver.dispose();
        }
        var driver = this._options.driver;
        this._driver = driver(this._options);
        this._disposable.add(this._driver);
        return this._driver;
    };
    ReactiveClient.prototype.disconnect = function () {
        this._driver.disconnect();
    };
    ReactiveClient.prototype.request = function (action, request, options) {
        var _this = this;
        var conditions = preconditions_1.getPreconditions(action);
        if (conditions) {
            lodash_1.each(conditions, function (x) { return x(request); });
        }
        if (!options)
            options = {};
        // Handle disconnected requests
        if (this.currentState !== enums_1.DriverState.Connected && this.currentState !== enums_1.DriverState.Error) {
            var response_1 = new rxjs_1.AsyncSubject();
            this.state.filter(function (z) { return z === enums_1.DriverState.Connected; })
                .take(1)
                .subscribe(function (z) {
                _this.request(action, request, options).subscribe(function (x) { return response_1.next(x); });
            });
            return response_1;
        }
        var context = new contexts_1.RequestContext(this._uniqueId, action, request, options);
        this._requestStream.next(context);
        return context.getResponse(this._responseStream);
    };
    ReactiveClient.prototype.registerFixup = function (func) {
        this._fixups.push(func);
    };
    ReactiveClient.prototype._getResponseStream = function (key) {
        key = key.toLowerCase();
        if (!this._responseStreams.has(key)) {
            var subject = new rxjs_1.Subject();
            subject.subscribe({
                next: lodash_1.bind(this._responseStream.next, this._responseStream)
            });
            this._responseStreams.set(key, subject);
            return subject;
        }
        return this._responseStreams.get(key);
    };
    ReactiveClient.prototype._fixup = function (action, request, options) {
        lodash_1.each(this._fixups, function (f) { return f(action, request, options); });
    };
    return ReactiveClient;
}());
exports.ReactiveClient = ReactiveClient;
var ReactiveClientEvents = (function () {
    function ReactiveClientEvents(_client) {
        this._client = _client;
    }
    Object.defineProperty(ReactiveClientEvents.prototype, "uniqueId", {
        get: function () { return this._client.uniqueId; },
        enumerable: true,
        configurable: true
    });
    ReactiveClientEvents.prototype.listen = function (key) {
        var value = decorators_1.getInternalValue(this, key);
        if (!value) {
            return decorators_1.setEventOrResponse(this, key);
        }
        return value;
    };
    return ReactiveClientEvents;
}());
exports.ReactiveClientEvents = ReactiveClientEvents;
decorators_1.reference(ReactiveClientEvents.prototype, 'events', 'events');
decorators_1.reference(ReactiveClientEvents.prototype, 'commands', 'commands');
decorators_1.reference(ReactiveClientEvents.prototype, 'state', 'state');
decorators_1.reference(ReactiveClientEvents.prototype, 'status', 'status');
decorators_1.reference(ReactiveClientEvents.prototype, 'requests', 'requests');
decorators_1.reference(ReactiveClientEvents.prototype, 'responses', 'responses');
decorators_1.reference(ReactiveClientEvents.prototype, 'errors', 'errors');
// <#GENERATED />
decorators_1.request(ReactiveClient.prototype, "getteststartinfo");
decorators_1.request(ReactiveClient.prototype, "runtest");
decorators_1.request(ReactiveClient.prototype, "autocomplete");
decorators_1.request(ReactiveClient.prototype, "changebuffer");
decorators_1.request(ReactiveClient.prototype, "codecheck");
decorators_1.request(ReactiveClient.prototype, "codeformat");
decorators_1.request(ReactiveClient.prototype, "diagnostics");
decorators_1.request(ReactiveClient.prototype, "close");
decorators_1.request(ReactiveClient.prototype, "open");
decorators_1.request(ReactiveClient.prototype, "filesChanged");
decorators_1.request(ReactiveClient.prototype, "findimplementations");
decorators_1.request(ReactiveClient.prototype, "findsymbols");
decorators_1.request(ReactiveClient.prototype, "findusages");
decorators_1.request(ReactiveClient.prototype, "fixusings");
decorators_1.request(ReactiveClient.prototype, "formatAfterKeystroke");
decorators_1.request(ReactiveClient.prototype, "formatRange");
decorators_1.request(ReactiveClient.prototype, "getcodeactions");
decorators_1.request(ReactiveClient.prototype, "gotodefinition");
decorators_1.request(ReactiveClient.prototype, "gotofile");
decorators_1.request(ReactiveClient.prototype, "gotoregion");
decorators_1.request(ReactiveClient.prototype, "highlight");
decorators_1.request(ReactiveClient.prototype, "currentfilemembersasflat");
decorators_1.request(ReactiveClient.prototype, "currentfilemembersastree");
decorators_1.request(ReactiveClient.prototype, "metadata");
decorators_1.request(ReactiveClient.prototype, "navigatedown");
decorators_1.request(ReactiveClient.prototype, "navigateup");
decorators_1.request(ReactiveClient.prototype, "packagesearch");
decorators_1.request(ReactiveClient.prototype, "packagesource");
decorators_1.request(ReactiveClient.prototype, "packageversion");
decorators_1.request(ReactiveClient.prototype, "rename");
decorators_1.request(ReactiveClient.prototype, "runcodeaction");
decorators_1.request(ReactiveClient.prototype, "signatureHelp");
decorators_1.request(ReactiveClient.prototype, "gettestcontext");
decorators_1.request(ReactiveClient.prototype, "typelookup");
decorators_1.request(ReactiveClient.prototype, "updatebuffer");
decorators_1.request(ReactiveClient.prototype, "project");
decorators_1.request(ReactiveClient.prototype, "projects");
decorators_1.request(ReactiveClient.prototype, "checkalivestatus");
decorators_1.request(ReactiveClient.prototype, "checkreadystatus");
decorators_1.request(ReactiveClient.prototype, "stopserver");
decorators_1.response(ReactiveClientEvents.prototype, "getteststartinfo", "/v2/getteststartinfo");
decorators_1.response(ReactiveClientEvents.prototype, "runtest", "/v2/runtest");
decorators_1.response(ReactiveClientEvents.prototype, "autocomplete", "/autocomplete");
decorators_1.response(ReactiveClientEvents.prototype, "changebuffer", "/changebuffer");
decorators_1.response(ReactiveClientEvents.prototype, "codecheck", "/codecheck");
decorators_1.response(ReactiveClientEvents.prototype, "codeformat", "/codeformat");
decorators_1.response(ReactiveClientEvents.prototype, "diagnostics", "/diagnostics");
decorators_1.response(ReactiveClientEvents.prototype, "close", "/close");
decorators_1.response(ReactiveClientEvents.prototype, "open", "/open");
decorators_1.response(ReactiveClientEvents.prototype, "filesChanged", "/filesChanged");
decorators_1.response(ReactiveClientEvents.prototype, "findimplementations", "/findimplementations");
decorators_1.response(ReactiveClientEvents.prototype, "findsymbols", "/findsymbols");
decorators_1.response(ReactiveClientEvents.prototype, "findusages", "/findusages");
decorators_1.response(ReactiveClientEvents.prototype, "fixusings", "/fixusings");
decorators_1.response(ReactiveClientEvents.prototype, "formatAfterKeystroke", "/formatAfterKeystroke");
decorators_1.response(ReactiveClientEvents.prototype, "formatRange", "/formatRange");
decorators_1.response(ReactiveClientEvents.prototype, "getcodeactions", "/v2/getcodeactions");
decorators_1.response(ReactiveClientEvents.prototype, "gotodefinition", "/gotodefinition");
decorators_1.response(ReactiveClientEvents.prototype, "gotofile", "/gotofile");
decorators_1.response(ReactiveClientEvents.prototype, "gotoregion", "/gotoregion");
decorators_1.response(ReactiveClientEvents.prototype, "highlight", "/highlight");
decorators_1.response(ReactiveClientEvents.prototype, "currentfilemembersasflat", "/currentfilemembersasflat");
decorators_1.response(ReactiveClientEvents.prototype, "currentfilemembersastree", "/currentfilemembersastree");
decorators_1.response(ReactiveClientEvents.prototype, "metadata", "/metadata");
decorators_1.response(ReactiveClientEvents.prototype, "navigatedown", "/navigatedown");
decorators_1.response(ReactiveClientEvents.prototype, "navigateup", "/navigateup");
decorators_1.response(ReactiveClientEvents.prototype, "packagesearch", "/packagesearch");
decorators_1.response(ReactiveClientEvents.prototype, "packagesource", "/packagesource");
decorators_1.response(ReactiveClientEvents.prototype, "packageversion", "/packageversion");
decorators_1.response(ReactiveClientEvents.prototype, "rename", "/rename");
decorators_1.response(ReactiveClientEvents.prototype, "runcodeaction", "/v2/runcodeaction");
decorators_1.response(ReactiveClientEvents.prototype, "signatureHelp", "/signatureHelp");
decorators_1.response(ReactiveClientEvents.prototype, "gettestcontext", "/gettestcontext");
decorators_1.response(ReactiveClientEvents.prototype, "typelookup", "/typelookup");
decorators_1.response(ReactiveClientEvents.prototype, "updatebuffer", "/updatebuffer");
decorators_1.response(ReactiveClientEvents.prototype, "project", "/project");
decorators_1.response(ReactiveClientEvents.prototype, "projects", "/projects");
decorators_1.response(ReactiveClientEvents.prototype, "checkalivestatus", "/checkalivestatus");
decorators_1.response(ReactiveClientEvents.prototype, "checkreadystatus", "/checkreadystatus");
decorators_1.response(ReactiveClientEvents.prototype, "stopserver", "/stopserver");
decorators_1.event(ReactiveClientEvents.prototype, "projectAdded");
decorators_1.event(ReactiveClientEvents.prototype, "projectChanged");
decorators_1.event(ReactiveClientEvents.prototype, "projectRemoved");
decorators_1.event(ReactiveClientEvents.prototype, "error");
decorators_1.event(ReactiveClientEvents.prototype, "diagnostic");
decorators_1.event(ReactiveClientEvents.prototype, "msBuildProjectDiagnostics");
decorators_1.event(ReactiveClientEvents.prototype, "packageRestoreStarted");
decorators_1.event(ReactiveClientEvents.prototype, "packageRestoreFinished");
decorators_1.event(ReactiveClientEvents.prototype, "unresolvedDependencies");

//# sourceMappingURL=data:application/json;base64,
