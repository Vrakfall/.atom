"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ensureClientOptions = ensureClientOptions;
exports.flattenArguments = flattenArguments;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function ensureClientOptions(options) {
    if (options.statusSampleTime) options.statusSampleTime = 500;
    if (options.responseSampleTime) options.responseSampleTime = 100;
    if (options.concurrency) options.concurrency = 4;
    if (options.timeout) options.timeout = 60;
    if (options.concurrencyTimeout) options.concurrencyTimeout = Math.ceil(options.timeout / 6) * 1000;
    options.concurrency = Math.max(options.concurrency, 2);
    options.concurrencyTimeout = Math.max(options.concurrencyTimeout, Math.min(options.timeout * 1000, 5000));
    options.additionalArguments = flattenArguments(options.omnisharp || {});
    if (!options.plugins) {
        options.plugins = [];
    }
}
function flattenArguments(obj) {
    var prefix = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

    var result = [];
    _lodash2.default.each(obj, function (value, key) {
        if (_lodash2.default.isObject(value)) {
            result.push.apply(result, _toConsumableArray(flattenArguments(value, "" + (prefix ? prefix + ":" : "") + (key[0].toUpperCase() + key.substr(1)))));
            return;
        }
        result.push("--" + (prefix ? prefix + ":" : "") + (key[0].toUpperCase() + key.substr(1)) + "=" + value);
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9vcHRpb25zLnRzIiwibGliL29wdGlvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFHQTtRQXNCQTs7QUN6QkE7Ozs7Ozs7O0FER0EsU0FBQSxtQkFBQSxDQUFvQyxPQUFwQyxFQUFtRTtBQUMvRCxRQUFJLFFBQVEsZ0JBQVIsRUFBMEIsUUFBUSxnQkFBUixHQUEyQixHQUEzQixDQUE5QjtBQUNBLFFBQUksUUFBUSxrQkFBUixFQUE0QixRQUFRLGtCQUFSLEdBQTZCLEdBQTdCLENBQWhDO0FBQ0EsUUFBSSxRQUFRLFdBQVIsRUFBcUIsUUFBUSxXQUFSLEdBQXNCLENBQXRCLENBQXpCO0FBQ0EsUUFBSSxRQUFRLE9BQVIsRUFBaUIsUUFBUSxPQUFSLEdBQWtCLEVBQWxCLENBQXJCO0FBQ0EsUUFBSSxRQUFRLGtCQUFSLEVBQTRCLFFBQVEsa0JBQVIsR0FBNkIsS0FBSyxJQUFMLENBQVUsUUFBUSxPQUFSLEdBQWtCLENBQWxCLENBQVYsR0FBaUMsSUFBakMsQ0FBN0Q7QUFJQSxZQUFRLFdBQVIsR0FBc0IsS0FBSyxHQUFMLENBQVMsUUFBUSxXQUFSLEVBQXFCLENBQTlCLENBQXRCLENBVCtEO0FBWS9ELFlBQVEsa0JBQVIsR0FBNkIsS0FBSyxHQUFMLENBQVMsUUFBUSxrQkFBUixFQUE0QixLQUFLLEdBQUwsQ0FBUyxRQUFRLE9BQVIsR0FBa0IsSUFBbEIsRUFBd0IsSUFBakMsQ0FBckMsQ0FBN0IsQ0FaK0Q7QUFjL0QsWUFBUSxtQkFBUixHQUE4QixpQkFBaUIsUUFBUSxTQUFSLElBQXFCLEVBQXJCLENBQS9DLENBZCtEO0FBZ0IvRCxRQUFJLENBQUMsUUFBUSxPQUFSLEVBQWlCO0FBRWxCLGdCQUFRLE9BQVIsR0FBa0IsRUFBbEIsQ0FGa0I7S0FBdEI7Q0FoQko7QUFzQkEsU0FBQSxnQkFBQSxDQUFzRSxHQUF0RSxFQUF5RjtRQUFYLCtEQUFTLGtCQUFFOztBQUNyRixRQUFNLFNBQWdCLEVBQWhCLENBRCtFO0FBRXJGLHFCQUFFLElBQUYsQ0FBTyxHQUFQLEVBQVksVUFBQyxLQUFELEVBQVEsR0FBUixFQUFXO0FBQ25CLFlBQUksaUJBQUUsUUFBRixDQUFXLEtBQVgsQ0FBSixFQUF1QjtBQUNuQixtQkFBTyxJQUFQLGtDQUFlLGlCQUFpQixLQUFqQixRQUEyQixTQUFTLFNBQVMsR0FBVCxHQUFlLEVBQXhCLEtBQTZCLElBQUksQ0FBSixFQUFPLFdBQVAsS0FBdUIsSUFBSSxNQUFKLENBQVcsQ0FBWCxDQUF2QixDQUF4RCxFQUFmLEVBRG1CO0FBRW5CLG1CQUZtQjtTQUF2QjtBQUtBLGVBQU8sSUFBUCxTQUFpQixTQUFTLFNBQVMsR0FBVCxHQUFlLEVBQXhCLEtBQTZCLElBQUksQ0FBSixFQUFPLFdBQVAsS0FBdUIsSUFBSSxNQUFKLENBQVcsQ0FBWCxDQUF2QixVQUF5QyxLQUF2RixFQU5tQjtLQUFYLENBQVosQ0FGcUY7QUFXckYsV0FBTyxNQUFQLENBWHFGO0NBQXpGIiwiZmlsZSI6ImxpYi9vcHRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtPbW5pc2hhcnBDbGllbnRPcHRpb25zfSBmcm9tIFwiLi9lbnVtc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ2xpZW50T3B0aW9ucyhvcHRpb25zOiBPbW5pc2hhcnBDbGllbnRPcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RhdHVzU2FtcGxlVGltZSkgb3B0aW9ucy5zdGF0dXNTYW1wbGVUaW1lID0gNTAwO1xuICAgIGlmIChvcHRpb25zLnJlc3BvbnNlU2FtcGxlVGltZSkgb3B0aW9ucy5yZXNwb25zZVNhbXBsZVRpbWUgPSAxMDA7XG4gICAgaWYgKG9wdGlvbnMuY29uY3VycmVuY3kpIG9wdGlvbnMuY29uY3VycmVuY3kgPSA0O1xuICAgIGlmIChvcHRpb25zLnRpbWVvdXQpIG9wdGlvbnMudGltZW91dCA9IDYwO1xuICAgIGlmIChvcHRpb25zLmNvbmN1cnJlbmN5VGltZW91dCkgb3B0aW9ucy5jb25jdXJyZW5jeVRpbWVvdXQgPSBNYXRoLmNlaWwob3B0aW9ucy50aW1lb3V0IC8gNikgKiAxMDAwO1xuXG4gICAgLy8gS2VlcCBjb25jdXJyZW5jeSBjYXBwZWQgYXQgMlxuICAgIC8vIFRoaXMgbGV0cyB1cyBnZXQgYXJvdW5kIGFuIGlzc3VlIHdpdGggYSBzaW5nbGUgc3R1Y2sgcmVxdWVzdCAodGhhdCBpcyB0YWtpbmcgYSB3aGlsZSB0byBjb21wbGV0ZSlcbiAgICBvcHRpb25zLmNvbmN1cnJlbmN5ID0gTWF0aC5tYXgob3B0aW9ucy5jb25jdXJyZW5jeSwgMik7XG5cbiAgICAvLyBLZWVwIGNvbmN1cnJlbmN5VGltZW91dCBhdCBhIGRlY2VudGx5IGhpZ2ggaW50ZXJ2YWwuXG4gICAgb3B0aW9ucy5jb25jdXJyZW5jeVRpbWVvdXQgPSBNYXRoLm1heChvcHRpb25zLmNvbmN1cnJlbmN5VGltZW91dCwgTWF0aC5taW4ob3B0aW9ucy50aW1lb3V0ICogMTAwMCwgNTAwMCkpO1xuXG4gICAgb3B0aW9ucy5hZGRpdGlvbmFsQXJndW1lbnRzID0gZmxhdHRlbkFyZ3VtZW50cyhvcHRpb25zLm9tbmlzaGFycCB8fCB7fSk7XG5cbiAgICBpZiAoIW9wdGlvbnMucGx1Z2lucykge1xuICAgICAgICAvLyBCeSBkZWZhdWx0IHdlIGluZGljYXRlIHN1cHBvcnQgbm8gcGx1Z2luc1xuICAgICAgICBvcHRpb25zLnBsdWdpbnMgPSBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuQXJndW1lbnRzPFQgZXh0ZW5kcyB7IFtpbmRleDogc3RyaW5nXTogYW55OyB9PihvYmo6IFQsIHByZWZpeCA9IFwiXCIpIHtcbiAgICBjb25zdCByZXN1bHQ6IGFueVtdID0gW107XG4gICAgXy5lYWNoKG9iaiwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCguLi5mbGF0dGVuQXJndW1lbnRzKHZhbHVlLCBgJHtwcmVmaXggPyBwcmVmaXggKyBcIjpcIiA6IFwiXCJ9JHtrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSkgfWApKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5wdXNoKGAtLSR7cHJlZml4ID8gcHJlZml4ICsgXCI6XCIgOiBcIlwifSR7a2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpIH09JHt2YWx1ZX1gKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ2xpZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RhdHVzU2FtcGxlVGltZSlcbiAgICAgICAgb3B0aW9ucy5zdGF0dXNTYW1wbGVUaW1lID0gNTAwO1xuICAgIGlmIChvcHRpb25zLnJlc3BvbnNlU2FtcGxlVGltZSlcbiAgICAgICAgb3B0aW9ucy5yZXNwb25zZVNhbXBsZVRpbWUgPSAxMDA7XG4gICAgaWYgKG9wdGlvbnMuY29uY3VycmVuY3kpXG4gICAgICAgIG9wdGlvbnMuY29uY3VycmVuY3kgPSA0O1xuICAgIGlmIChvcHRpb25zLnRpbWVvdXQpXG4gICAgICAgIG9wdGlvbnMudGltZW91dCA9IDYwO1xuICAgIGlmIChvcHRpb25zLmNvbmN1cnJlbmN5VGltZW91dClcbiAgICAgICAgb3B0aW9ucy5jb25jdXJyZW5jeVRpbWVvdXQgPSBNYXRoLmNlaWwob3B0aW9ucy50aW1lb3V0IC8gNikgKiAxMDAwO1xuICAgIG9wdGlvbnMuY29uY3VycmVuY3kgPSBNYXRoLm1heChvcHRpb25zLmNvbmN1cnJlbmN5LCAyKTtcbiAgICBvcHRpb25zLmNvbmN1cnJlbmN5VGltZW91dCA9IE1hdGgubWF4KG9wdGlvbnMuY29uY3VycmVuY3lUaW1lb3V0LCBNYXRoLm1pbihvcHRpb25zLnRpbWVvdXQgKiAxMDAwLCA1MDAwKSk7XG4gICAgb3B0aW9ucy5hZGRpdGlvbmFsQXJndW1lbnRzID0gZmxhdHRlbkFyZ3VtZW50cyhvcHRpb25zLm9tbmlzaGFycCB8fCB7fSk7XG4gICAgaWYgKCFvcHRpb25zLnBsdWdpbnMpIHtcbiAgICAgICAgb3B0aW9ucy5wbHVnaW5zID0gW107XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5Bcmd1bWVudHMob2JqLCBwcmVmaXggPSBcIlwiKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgXy5lYWNoKG9iaiwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCguLi5mbGF0dGVuQXJndW1lbnRzKHZhbHVlLCBgJHtwcmVmaXggPyBwcmVmaXggKyBcIjpcIiA6IFwiXCJ9JHtrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSl9YCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKGAtLSR7cHJlZml4ID8gcHJlZml4ICsgXCI6XCIgOiBcIlwifSR7a2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpfT0ke3ZhbHVlfWApO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
