"use strict";
var _ = require('lodash');
function ensureClientOptions(options) {
    if (options.statusSampleTime)
        options.statusSampleTime = 500;
    if (options.responseSampleTime)
        options.responseSampleTime = 100;
    if (options.concurrency)
        options.concurrency = 4;
    if (options.timeout)
        options.timeout = 60;
    if (options.concurrencyTimeout)
        options.concurrencyTimeout = Math.ceil(options.timeout / 6) * 1000;
    // Keep concurrency capped at 2
    // This lets us get around an issue with a single stuck request (that is taking a while to complete)
    options.concurrency = Math.max(options.concurrency || 0, 2);
    // Keep concurrencyTimeout at a decently high interval.
    options.concurrencyTimeout = Math.max(options.concurrencyTimeout || 0, Math.min(options.timeout * 1000, 5000));
    options.additionalArguments = flattenArguments(options.serverOptions || {});
    if (!options.plugins) {
        // By default we indicate support no plugins
        options.plugins = [];
    }
}
exports.ensureClientOptions = ensureClientOptions;
function flattenArguments(obj, prefix) {
    if (prefix === void 0) { prefix = ''; }
    var result = [];
    _.each(obj, function (value, key) {
        if (_.isObject(value)) {
            result.push.apply(result, flattenArguments(value, "" + (prefix ? prefix + ':' : '') + key));
            return;
        }
        result.push("--" + (prefix ? prefix + ':' : '') + key + "=" + value);
    });
    return result;
}
exports.flattenArguments = flattenArguments;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUc1Qiw2QkFBb0MsT0FBMEI7SUFDMUQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztJQUM3RCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0lBQ2pFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDMUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDO1FBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFbkcsK0JBQStCO0lBQy9CLG9HQUFvRztJQUNwRyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFNUQsdURBQXVEO0lBQ3ZELE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRS9HLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTVFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbkIsNENBQTRDO1FBQzVDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7QUFDTCxDQUFDO0FBcEJlLDJCQUFtQixzQkFvQmxDLENBQUE7QUFFRCwwQkFBc0UsR0FBTSxFQUFFLE1BQVc7SUFBWCxzQkFBVyxHQUFYLFdBQVc7SUFDckYsSUFBTSxNQUFNLEdBQVUsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQUMsS0FBSyxFQUFFLEdBQUc7UUFDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsTUFBTSxDQUFDLElBQUksT0FBWCxNQUFNLEVBQVMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE1BQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxJQUFHLEdBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0UsTUFBTSxDQUFDO1FBQ1gsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBSyxNQUFNLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLElBQUcsR0FBRyxTQUFJLEtBQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBWmUsd0JBQWdCLG1CQVkvQixDQUFBIiwiZmlsZSI6ImxpYi9vcHRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQ29yZUNsaWVudE9wdGlvbnMgfSBmcm9tICcuL2VudW1zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUNsaWVudE9wdGlvbnMob3B0aW9uczogQ29yZUNsaWVudE9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5zdGF0dXNTYW1wbGVUaW1lKSBvcHRpb25zLnN0YXR1c1NhbXBsZVRpbWUgPSA1MDA7XG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2VTYW1wbGVUaW1lKSBvcHRpb25zLnJlc3BvbnNlU2FtcGxlVGltZSA9IDEwMDtcbiAgICBpZiAob3B0aW9ucy5jb25jdXJyZW5jeSkgb3B0aW9ucy5jb25jdXJyZW5jeSA9IDQ7XG4gICAgaWYgKG9wdGlvbnMudGltZW91dCkgb3B0aW9ucy50aW1lb3V0ID0gNjA7XG4gICAgaWYgKG9wdGlvbnMuY29uY3VycmVuY3lUaW1lb3V0KSBvcHRpb25zLmNvbmN1cnJlbmN5VGltZW91dCA9IE1hdGguY2VpbChvcHRpb25zLnRpbWVvdXQgLyA2KSAqIDEwMDA7XG5cbiAgICAvLyBLZWVwIGNvbmN1cnJlbmN5IGNhcHBlZCBhdCAyXG4gICAgLy8gVGhpcyBsZXRzIHVzIGdldCBhcm91bmQgYW4gaXNzdWUgd2l0aCBhIHNpbmdsZSBzdHVjayByZXF1ZXN0ICh0aGF0IGlzIHRha2luZyBhIHdoaWxlIHRvIGNvbXBsZXRlKVxuICAgIG9wdGlvbnMuY29uY3VycmVuY3kgPSBNYXRoLm1heChvcHRpb25zLmNvbmN1cnJlbmN5IHx8IDAsIDIpO1xuXG4gICAgLy8gS2VlcCBjb25jdXJyZW5jeVRpbWVvdXQgYXQgYSBkZWNlbnRseSBoaWdoIGludGVydmFsLlxuICAgIG9wdGlvbnMuY29uY3VycmVuY3lUaW1lb3V0ID0gTWF0aC5tYXgob3B0aW9ucy5jb25jdXJyZW5jeVRpbWVvdXQgfHwgMCwgTWF0aC5taW4ob3B0aW9ucy50aW1lb3V0ICogMTAwMCwgNTAwMCkpO1xuXG4gICAgb3B0aW9ucy5hZGRpdGlvbmFsQXJndW1lbnRzID0gZmxhdHRlbkFyZ3VtZW50cyhvcHRpb25zLnNlcnZlck9wdGlvbnMgfHwge30pO1xuXG4gICAgaWYgKCFvcHRpb25zLnBsdWdpbnMpIHtcbiAgICAgICAgLy8gQnkgZGVmYXVsdCB3ZSBpbmRpY2F0ZSBzdXBwb3J0IG5vIHBsdWdpbnNcbiAgICAgICAgb3B0aW9ucy5wbHVnaW5zID0gW107XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbkFyZ3VtZW50czxUIGV4dGVuZHMgeyBbaW5kZXg6IHN0cmluZ106IGFueTsgfT4ob2JqOiBULCBwcmVmaXggPSAnJykge1xuICAgIGNvbnN0IHJlc3VsdDogYW55W10gPSBbXTtcbiAgICBfLmVhY2gob2JqLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLmZsYXR0ZW5Bcmd1bWVudHModmFsdWUsIGAke3ByZWZpeCA/IHByZWZpeCArICc6JyA6ICcnfSR7a2V5fWApKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5wdXNoKGAtLSR7cHJlZml4ID8gcHJlZml4ICsgJzonIDogJyd9JHtrZXl9PSR7dmFsdWV9YCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
