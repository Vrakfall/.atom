"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ClientV1 = exports.ClientEventsV1 = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _clientBase = require("./client-base");

var _decorators = require("../decorators");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ClientEventsV1 = exports.ClientEventsV1 = function (_ClientEventsBase) {
    _inherits(ClientEventsV1, _ClientEventsBase);

    function ClientEventsV1() {
        _classCallCheck(this, ClientEventsV1);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ClientEventsV1).apply(this, arguments));
    }

    _createClass(ClientEventsV1, [{
        key: "updatebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "changebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codecheck",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatAfterKeystroke",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatRange",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codeformat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "autocomplete",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findimplementations",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findsymbols",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findusages",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "fixusings",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotodefinition",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotofile",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotoregion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "highlight",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "metadata",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigateup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigatedown",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesearch",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesource",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageversion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "rename",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "signatureHelp",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "stopserver",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkalivestatus",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkreadystatus",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersastree",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersasflat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "typelookup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "filesChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projects",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "project",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "getcodeactions",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gettestcontext",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ClientEventsV1;
}(_clientBase.ClientEventsBase);

__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "updatebuffer", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "changebuffer", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "codecheck", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "formatAfterKeystroke", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "formatRange", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "codeformat", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "autocomplete", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "findimplementations", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "findsymbols", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "findusages", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "fixusings", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "gotodefinition", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "gotofile", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "gotoregion", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "highlight", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "metadata", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "navigateup", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "navigatedown", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "packagesearch", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "packagesource", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "packageversion", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "rename", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "signatureHelp", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "stopserver", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "checkalivestatus", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "checkreadystatus", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "currentfilemembersastree", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "currentfilemembersasflat", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "typelookup", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "filesChanged", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "projects", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "project", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "getcodeactions", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "runcodeaction", null);
__decorate([_decorators.watchCommand], ClientEventsV1.prototype, "gettestcontext", null);

var ClientV1 = exports.ClientV1 = function (_ClientBase) {
    _inherits(ClientV1, _ClientBase);

    function ClientV1(_options) {
        _classCallCheck(this, ClientV1);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ClientV1).call(this, _options, function (c) {
            return new ClientEventsV1(c);
        }));
    }

    _createClass(ClientV1, [{
        key: "updatebuffer",
        value: function updatebuffer(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "changebuffer",
        value: function changebuffer(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codecheck",
        value: function codecheck(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatAfterKeystroke",
        value: function formatAfterKeystroke(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatRange",
        value: function formatRange(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codeformat",
        value: function codeformat(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "autocomplete",
        value: function autocomplete(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findimplementations",
        value: function findimplementations(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findsymbols",
        value: function findsymbols(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findusages",
        value: function findusages(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "fixusings",
        value: function fixusings(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotodefinition",
        value: function gotodefinition(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigateup",
        value: function navigateup(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotofile",
        value: function gotofile(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotoregion",
        value: function gotoregion(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "highlight",
        value: function highlight(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "metadata",
        value: function metadata(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigatedown",
        value: function navigatedown(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesearch",
        value: function packagesearch(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesource",
        value: function packagesource(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageversion",
        value: function packageversion(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "rename",
        value: function rename(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "signatureHelp",
        value: function signatureHelp(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "stopserver",
        value: function stopserver(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkalivestatus",
        value: function checkalivestatus(options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkreadystatus",
        value: function checkreadystatus(options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersastree",
        value: function currentfilemembersastree(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersasflat",
        value: function currentfilemembersasflat(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "typelookup",
        value: function typelookup(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "filesChanged",
        value: function filesChanged(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projects",
        value: function projects(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "project",
        value: function project(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "getcodeactions",
        value: function getcodeactions(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        value: function runcodeaction(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gettestcontext",
        value: function gettestcontext(request, options) {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ClientV1;
}(_clientBase.ClientBase);

__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Buffer;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "updatebuffer", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.NewText;
}), (0, _decorators.isNotNull)(function (request) {
    return request.StartLine;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.StartLine;
}), (0, _decorators.isNotNull)(function (request) {
    return request.StartColumn;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.StartColumn;
}), (0, _decorators.isNotNull)(function (request) {
    return request.EndLine;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.EndLine;
}), (0, _decorators.isNotNull)(function (request) {
    return request.EndColumn;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.EndColumn;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "changebuffer", null);
__decorate([_decorators.fixup, (0, _decorators.endpoint)()], ClientV1.prototype, "codecheck", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Character || request.Char;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "formatAfterKeystroke", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.EndLine;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.EndLine;
}), (0, _decorators.isNotNull)(function (request) {
    return request.EndColumn;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.EndColumn;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "formatRange", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "codeformat", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.WordToComplete;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "autocomplete", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "findimplementations", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.Filter;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "findsymbols", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "findusages", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "fixusings", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "gotodefinition", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "navigateup", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "gotofile", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "gotoregion", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "highlight", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.AssemblyName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.TypeName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "metadata", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "navigatedown", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.ProjectPath;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Search;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "packagesearch", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.ProjectPath;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "packagesource", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.ProjectPath;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Id;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "packageversion", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.RenameTo;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "rename", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "signatureHelp", null);
__decorate([_decorators.fixup, (0, _decorators.endpoint)()], ClientV1.prototype, "stopserver", null);
__decorate([_decorators.fixup, (0, _decorators.endpoint)()], ClientV1.prototype, "checkalivestatus", null);
__decorate([_decorators.fixup, (0, _decorators.endpoint)()], ClientV1.prototype, "checkreadystatus", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "currentfilemembersastree", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "currentfilemembersasflat", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "typelookup", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "filesChanged", null);
__decorate([_decorators.fixup, (0, _decorators.endpoint)()], ClientV1.prototype, "projects", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "project", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "getcodeactions", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.CodeAction;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.CodeAction;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "runcodeaction", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Type;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Type;
}), (0, _decorators.endpoint)()], ClientV1.prototype, "gettestcontext", null);
//# sourceMappingURL=data:application/json;base64,
