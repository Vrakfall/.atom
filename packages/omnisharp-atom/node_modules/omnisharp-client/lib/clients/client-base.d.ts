import * as OmniSharp from "../omnisharp-server";
import { Observable } from "rxjs";
import { IDisposable } from "../disposables";
import { IDriver, OmnisharpClientStatus, OmnisharpClientOptions } from "../enums";
import { DriverState, Runtime } from "../enums";
import { RequestContext, ResponseContext, CommandContext } from "../contexts";
export declare class ClientBase<TEvents extends ClientEventsBase> implements IDriver, IDisposable {
    private _options;
    static serverLineNumbers: string[];
    static serverLineNumberArrays: string[];
    private _driver;
    private _requestStream;
    private _responseStream;
    private _statusStream;
    private _errorStream;
    private _customEvents;
    private _uniqueId;
    protected _lowestIndexValue: number;
    private _eventWatchers;
    private _commandWatchers;
    private _disposable;
    uniqueId: string;
    id: string;
    serverPath: string;
    projectPath: string;
    runtime: Runtime;
    currentState: DriverState;
    private _enqueuedEvents;
    events: Observable<OmniSharp.Stdio.Protocol.EventPacket>;
    commands: Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
    state: Observable<DriverState>;
    outstandingRequests: number;
    private _currentRequests;
    getCurrentRequests(): {
        command: string;
        sequence: string;
        silent: boolean;
        request: any;
        duration: number;
    }[];
    status: Observable<OmnisharpClientStatus>;
    requests: Observable<RequestContext<any>>;
    private _enqueuedResponses;
    responses: Observable<ResponseContext<any, any>>;
    errors: Observable<CommandContext<any>>;
    private _observe;
    observe: TEvents;
    constructor(_options: OmnisharpClientOptions, observableFactory: (client: ClientBase<TEvents>) => TEvents);
    dispose(): void;
    private setupRequestStreams();
    private handleResult(context, complete?);
    log(message: string, logLevel?: string): void;
    connect(): void;
    private _resetDriver();
    disconnect(): void;
    request<TRequest, TResponse>(action: string, request: TRequest, options?: OmniSharp.RequestOptions): Observable<TResponse>;
    private setupObservers();
    private _fixups;
    registerFixup(func: (action: string, request: any, options?: OmniSharp.RequestOptions) => void): void;
    private _fixup<TRequest>(action, request, options?);
}
export declare class ClientEventsBase implements OmniSharp.Events {
    private _client;
    constructor(_client: any);
    uniqueId: any;
    projectAdded: Observable<OmniSharp.Models.ProjectInformationResponse>;
    projectChanged: Observable<OmniSharp.Models.ProjectInformationResponse>;
    projectRemoved: Observable<OmniSharp.Models.ProjectInformationResponse>;
    error: Observable<OmniSharp.Models.ErrorMessage>;
    msBuildProjectDiagnostics: Observable<OmniSharp.Models.MSBuildProjectDiagnostics>;
    packageRestoreStarted: Observable<OmniSharp.Models.PackageRestoreMessage>;
    packageRestoreFinished: Observable<OmniSharp.Models.PackageRestoreMessage>;
    unresolvedDependencies: Observable<OmniSharp.Models.UnresolvedDependenciesMessage>;
    events: Observable<OmniSharp.Stdio.Protocol.EventPacket>;
    commands: Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
    state: Observable<DriverState>;
    status: Observable<OmnisharpClientStatus>;
    requests: Observable<RequestContext<any>>;
    responses: Observable<ResponseContext<any, any>>;
    errors: Observable<CommandContext<any>>;
}
