"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ClientV2 = exports.ClientEventsV2 = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _clientBase = require("./client-base");

var _clientV = require("./client-v1");

var _decorators = require("../decorators");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ClientEventsV2 = exports.ClientEventsV2 = function (_ClientEventsBase) {
    _inherits(ClientEventsV2, _ClientEventsBase);

    function ClientEventsV2() {
        _classCallCheck(this, ClientEventsV2);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ClientEventsV2).apply(this, arguments));
    }

    _createClass(ClientEventsV2, [{
        key: "updatebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "changebuffer",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codecheck",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatAfterKeystroke",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "formatRange",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "codeformat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "autocomplete",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findimplementations",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findsymbols",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "findusages",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "fixusings",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotodefinition",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotofile",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gotoregion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "highlight",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "metadata",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigateup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "navigatedown",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesearch",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packagesource",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "packageversion",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "rename",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "signatureHelp",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "stopserver",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkalivestatus",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "checkreadystatus",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersastree",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "currentfilemembersasflat",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "typelookup",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "filesChanged",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "projects",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "project",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "getcodeactions",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "gettestcontext",
        get: function get() {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ClientEventsV2;
}(_clientBase.ClientEventsBase);

__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "updatebuffer", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "changebuffer", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "codecheck", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "formatAfterKeystroke", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "formatRange", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "codeformat", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "autocomplete", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "findimplementations", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "findsymbols", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "findusages", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "fixusings", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "gotodefinition", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "gotofile", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "gotoregion", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "highlight", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "metadata", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "navigateup", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "navigatedown", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "packagesearch", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "packagesource", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "packageversion", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "rename", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "signatureHelp", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "stopserver", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "checkalivestatus", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "checkreadystatus", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "currentfilemembersastree", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "currentfilemembersasflat", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "typelookup", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "filesChanged", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "projects", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "project", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "getcodeactions", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "runcodeaction", null);
__decorate([_decorators.watchCommand], ClientEventsV2.prototype, "gettestcontext", null);

var ClientV2 = exports.ClientV2 = function (_ClientBase) {
    _inherits(ClientV2, _ClientBase);

    function ClientV2(_options) {
        _classCallCheck(this, ClientV2);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ClientV2).call(this, _options, function (c) {
            return new ClientEventsV2(c);
        }));
    }

    _createClass(ClientV2, [{
        key: "getcodeactions",
        value: function getcodeactions(request, options) {
            throw new Error("Implemented by decorator");
        }
    }, {
        key: "runcodeaction",
        value: function runcodeaction(request, options) {
            throw new Error("Implemented by decorator");
        }
    }]);

    return ClientV2;
}(_clientBase.ClientBase);

__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.precondition)(function (request) {
    return !request.Selection;
}, (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
})), (0, _decorators.precondition)(function (request) {
    return !!request.Selection;
}, (0, _decorators.isNotNull)(function (request) {
    return request.Selection.Start.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.Start.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.Start.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.Start.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.End.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.End.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.End.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.End.Column;
})), (0, _decorators.endpoint)(2)], ClientV2.prototype, "getcodeactions", null);
__decorate([_decorators.fixup, (0, _decorators.isNotNull)(function (request) {
    return request.FileName;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Identifier;
}), (0, _decorators.precondition)(function (request) {
    return !request.Selection;
}, (0, _decorators.isNotNull)(function (request) {
    return request.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Column;
})), (0, _decorators.precondition)(function (request) {
    return request.Selection;
}, (0, _decorators.isNotNull)(function (request) {
    return request.Selection.Start.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.Start.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.Start.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.Start.Column;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.End.Line;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.End.Line;
}), (0, _decorators.isNotNull)(function (request) {
    return request.Selection.End.Column;
}), (0, _decorators.isAboveZero)(function (request) {
    return request.Selection.End.Column;
})), (0, _decorators.endpoint)(2)], ClientV2.prototype, "runcodeaction", null);
(0, _decorators.inheritProperties)(_clientV.ClientV1, ClientV2);
//# sourceMappingURL=data:application/json;base64,
