"use strict";
var Methods;
(function (Methods) {
    var Extended;
    (function (Extended) {
        Extended.GetCodeActionsRequest = '__extended/textDocument/getCodeActions';
        Extended.RunCodeActionRequest = '__extended/textDocument/runCodeAction';
        Extended.ImplementationRequest = '__extended/textDocument/implementation';
        Extended.NavigateRequest = '__extended/textDocument/navigate';
        Extended.PublishHighlightNotification = '__extended/textDocument/publishHighlight';
    })(Extended = Methods.Extended || (Methods.Extended = {}));
})(Methods = exports.Methods || (exports.Methods = {}));
/**
 * A request to rename a symbol.
 */
var GetCodeActionsRequest;
(function (GetCodeActionsRequest) {
    GetCodeActionsRequest.type = { get method() { return Methods.Extended.GetCodeActionsRequest; } };
})(GetCodeActionsRequest = exports.GetCodeActionsRequest || (exports.GetCodeActionsRequest = {}));
/**
 * A request to rename a symbol.
 */
var RunCodeActionRequest;
(function (RunCodeActionRequest) {
    RunCodeActionRequest.type = { get method() { return Methods.Extended.RunCodeActionRequest; } };
})(RunCodeActionRequest = exports.RunCodeActionRequest || (exports.RunCodeActionRequest = {}));
/**
 * A request to find implementation
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.type = { get method() { return Methods.Extended.ImplementationRequest; } };
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
/**
 * A request to find implementation
 */
var NavigateRequest;
(function (NavigateRequest) {
    NavigateRequest.type = { get method() { return Methods.Extended.NavigateRequest; } };
})(NavigateRequest = exports.NavigateRequest || (exports.NavigateRequest = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var HighlightNotification;
(function (HighlightNotification) {
    HighlightNotification.type = { get method() { return Methods.Extended.PublishHighlightNotification; } };
})(HighlightNotification = exports.HighlightNotification || (exports.HighlightNotification = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlc2VydmVyL3NlcnZlci1leHRlbmRlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUZBLElBQWlCLE9BQU8sQ0FRdkI7QUFSRCxXQUFpQixPQUFPLEVBQUMsQ0FBQztJQUN0QixJQUFpQixRQUFRLENBTXhCO0lBTkQsV0FBaUIsUUFBUSxFQUFDLENBQUM7UUFDViw4QkFBcUIsR0FBRyx3Q0FBd0MsQ0FBQTtRQUNoRSw2QkFBb0IsR0FBRyx1Q0FBdUMsQ0FBQTtRQUM5RCw4QkFBcUIsR0FBRyx3Q0FBd0MsQ0FBQTtRQUNoRSx3QkFBZSxHQUFHLGtDQUFrQyxDQUFBO1FBQ3BELHFDQUE0QixHQUFHLDBDQUEwQyxDQUFBO0lBQzFGLENBQUMsRUFOZ0IsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFNeEI7QUFDTCxDQUFDLEVBUmdCLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQVF2QjtBQUVEOztHQUVHO0FBQ0gsSUFBaUIscUJBQXFCLENBRXJDO0FBRkQsV0FBaUIscUJBQXFCLEVBQUMsQ0FBQztJQUN2QiwwQkFBSSxHQUE0RCxFQUFFLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDckosQ0FBQyxFQUZnQixxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQUVyQztBQUVEOztHQUVHO0FBQ0gsSUFBaUIsb0JBQW9CLENBRXBDO0FBRkQsV0FBaUIsb0JBQW9CLEVBQUMsQ0FBQztJQUN0Qix5QkFBSSxHQUEwRCxFQUFFLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDbEosQ0FBQyxFQUZnQixvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQUVwQztBQUVEOztHQUVHO0FBQ0gsSUFBaUIscUJBQXFCLENBRXJDO0FBRkQsV0FBaUIscUJBQXFCLEVBQUMsQ0FBQztJQUN2QiwwQkFBSSxHQUFrRSxFQUFFLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDM0osQ0FBQyxFQUZnQixxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQUVyQztBQUVEOztHQUVHO0FBQ0gsSUFBaUIsZUFBZSxDQUUvQjtBQUZELFdBQWlCLGVBQWUsRUFBQyxDQUFDO0lBQ2pCLG9CQUFJLEdBQWdELEVBQUUsSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDbkksQ0FBQyxFQUZnQixlQUFlLEdBQWYsdUJBQWUsS0FBZix1QkFBZSxRQUUvQjtBQUVEOzs7R0FHRztBQUNILElBQWlCLHFCQUFxQixDQUVyQztBQUZELFdBQWlCLHFCQUFxQixFQUFDLENBQUM7SUFDdkIsMEJBQUksR0FBNkMsRUFBRSxJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzdJLENBQUMsRUFGZ0IscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFFckMiLCJmaWxlIjoibGFuZ3VhZ2VzZXJ2ZXIvc2VydmVyLWV4dGVuZGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuICAgIFN0cmVhbU1lc3NhZ2VSZWFkZXIsIFN0cmVhbU1lc3NhZ2VXcml0ZXIsXG4gICAgY3JlYXRlQ29ubmVjdGlvbiwgSUNvbm5lY3Rpb24sIFRleHREb2N1bWVudFN5bmNLaW5kLFxuICAgIFRleHREb2N1bWVudHMsIFRleHREb2N1bWVudCwgRGlhZ25vc3RpYywgRGlhZ25vc3RpY1NldmVyaXR5LFxuICAgIEluaXRpYWxpemVQYXJhbXMsIEluaXRpYWxpemVSZXN1bHQsIFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLFxuICAgIENvbXBsZXRpb25JdGVtLCBDb21wbGV0aW9uSXRlbUtpbmQsIENvZGVMZW5zLCBIb3ZlciwgTG9jYXRpb24sXG4gICAgQ29tcGxldGlvbkxpc3QsXG4gICAgU2lnbmF0dXJlSGVscCwgU2lnbmF0dXJlSW5mb3JtYXRpb24sIFBhcmFtZXRlckluZm9ybWF0aW9uLFxuICAgIFN5bWJvbEluZm9ybWF0aW9uLCBTeW1ib2xLaW5kLCBSYW5nZSwgQ29tbWFuZCwgVGV4dEVkaXQsXG4gICAgTm90aWZpY2F0aW9uVHlwZSwgRmlsZXMsIFRleHREb2N1bWVudElkZW50aWZpZXIsIENvZGVBY3Rpb25Db250ZXh0LCBXb3Jrc3BhY2VFZGl0LCBTZXJ2ZXJDYXBhYmlsaXRpZXNcbn0gZnJvbSBcInZzY29kZS1sYW5ndWFnZXNlcnZlclwiO1xuaW1wb3J0IHsgLyogTm90aWZpY2F0aW9uVHlwZSwgKi8gUmVxdWVzdFR5cGUgfSBmcm9tICd2c2NvZGUtanNvbnJwYyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5kZWRTZXJ2ZXJDYXBhYmlsaXRpZXMge1xuICAgIGV4dGVuZGVkOiB7XG4gICAgICAgIGdldENvZGVBY3Rpb25zUHJvdmlkZXI/OiBib29sZWFuO1xuICAgICAgICBydW5Db2RlQWN0aW9uUHJvdmlkZXI/OiBib29sZWFuO1xuICAgICAgICBpbXBsZW1lbnRhdGlvblByb3ZpZGVyPzogYm9vbGVhbjtcbiAgICAgICAgbmF2aWdhdGVQcm92aWRlcj86IGJvb2xlYW47XG4gICAgICAgIGhpZ2hsaWdodFByb3ZpZGVyPzogYm9vbGVhbjtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50Q2FwYWJpbGl0aWVzIHtcbiAgICBoaWdobGlnaHRQcm92aWRlcj86IGJvb2xlYW47XG4gICAgZW5hYmxlUGFja2FnZVJlc3RvcmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldENvZGVBY3Rpb25zUGFyYW1zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZG9jdW1lbnQgaW4gd2hpY2ggdGhlIGNvbW1hbmQgd2FzIGludm9rZWQuXG4gICAgICovXG4gICAgdGV4dERvY3VtZW50OiBUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhbmdlIGZvciB3aGljaCB0aGUgY29tbWFuZCB3YXMgaW52b2tlZC5cbiAgICAgKi9cbiAgICByYW5nZTogUmFuZ2U7XG5cbiAgICAvKipcbiAgICAgKiBDb250ZXh0IGNhcnJ5aW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgY29udGV4dDogQ29kZUFjdGlvbkNvbnRleHQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVQYXJhbXMgZXh0ZW5kcyBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyB7XG4gICAgZGlyZWN0aW9uOiAndXAnIHwgJ2Rvd24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvZGVBY3Rpb25MaXN0IHtcbiAgICBjb2RlQWN0aW9uczogQ29kZUFjdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvZGVBY3Rpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVibGlzaEhpZ2hsaWdodFBhcmFtcyB7XG4gICAgdXJpOiBzdHJpbmc7XG4gICAgYWRkZWQ6IEhpZ2hsaWdodFtdO1xuICAgIHJlbW92ZWQ6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICByYW5nZTogUmFuZ2U7XG4gICAga2luZDogc3RyaW5nO1xuICAgIC8vIHByb2plY3RzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IHR5cGUgSW1wbGVtZW50YXRpb24gPSBMb2NhdGlvbiB8IExvY2F0aW9uW107XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVuQ29kZUFjdGlvblBhcmFtcyBleHRlbmRzIEdldENvZGVBY3Rpb25zUGFyYW1zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgY29kZSBhY3Rpb24gdG8gZXhlY3V0ZVxuICAgICAqL1xuICAgIGlkZW50aWZpZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBNZXRob2RzIHtcbiAgICBleHBvcnQgbmFtZXNwYWNlIEV4dGVuZGVkIHtcbiAgICAgICAgZXhwb3J0IGNvbnN0IEdldENvZGVBY3Rpb25zUmVxdWVzdCA9ICdfX2V4dGVuZGVkL3RleHREb2N1bWVudC9nZXRDb2RlQWN0aW9ucydcbiAgICAgICAgZXhwb3J0IGNvbnN0IFJ1bkNvZGVBY3Rpb25SZXF1ZXN0ID0gJ19fZXh0ZW5kZWQvdGV4dERvY3VtZW50L3J1bkNvZGVBY3Rpb24nXG4gICAgICAgIGV4cG9ydCBjb25zdCBJbXBsZW1lbnRhdGlvblJlcXVlc3QgPSAnX19leHRlbmRlZC90ZXh0RG9jdW1lbnQvaW1wbGVtZW50YXRpb24nXG4gICAgICAgIGV4cG9ydCBjb25zdCBOYXZpZ2F0ZVJlcXVlc3QgPSAnX19leHRlbmRlZC90ZXh0RG9jdW1lbnQvbmF2aWdhdGUnXG4gICAgICAgIGV4cG9ydCBjb25zdCBQdWJsaXNoSGlnaGxpZ2h0Tm90aWZpY2F0aW9uID0gJ19fZXh0ZW5kZWQvdGV4dERvY3VtZW50L3B1Ymxpc2hIaWdobGlnaHQnXG4gICAgfVxufVxuXG4vKipcbiAqIEEgcmVxdWVzdCB0byByZW5hbWUgYSBzeW1ib2wuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgR2V0Q29kZUFjdGlvbnNSZXF1ZXN0IHtcbiAgICBleHBvcnQgY29uc3QgdHlwZTogUmVxdWVzdFR5cGU8R2V0Q29kZUFjdGlvbnNQYXJhbXMsIENvZGVBY3Rpb25MaXN0LCB2b2lkPiA9IHsgZ2V0IG1ldGhvZCgpIHsgcmV0dXJuIE1ldGhvZHMuRXh0ZW5kZWQuR2V0Q29kZUFjdGlvbnNSZXF1ZXN0OyB9IH07XG59XG5cbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlbmFtZSBhIHN5bWJvbC5cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBSdW5Db2RlQWN0aW9uUmVxdWVzdCB7XG4gICAgZXhwb3J0IGNvbnN0IHR5cGU6IFJlcXVlc3RUeXBlPFJ1bkNvZGVBY3Rpb25QYXJhbXMsIFdvcmtzcGFjZUVkaXQsIHZvaWQ+ID0geyBnZXQgbWV0aG9kKCkgeyByZXR1cm4gTWV0aG9kcy5FeHRlbmRlZC5SdW5Db2RlQWN0aW9uUmVxdWVzdDsgfSB9O1xufVxuXG4vKipcbiAqIEEgcmVxdWVzdCB0byBmaW5kIGltcGxlbWVudGF0aW9uXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgSW1wbGVtZW50YXRpb25SZXF1ZXN0IHtcbiAgICBleHBvcnQgY29uc3QgdHlwZTogUmVxdWVzdFR5cGU8VGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMsIEltcGxlbWVudGF0aW9uLCB2b2lkPiA9IHsgZ2V0IG1ldGhvZCgpIHsgcmV0dXJuIE1ldGhvZHMuRXh0ZW5kZWQuSW1wbGVtZW50YXRpb25SZXF1ZXN0OyB9IH07XG59XG5cbi8qKlxuICogQSByZXF1ZXN0IHRvIGZpbmQgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBOYXZpZ2F0ZVJlcXVlc3Qge1xuICAgIGV4cG9ydCBjb25zdCB0eXBlOiBSZXF1ZXN0VHlwZTxOYXZpZ2F0ZVBhcmFtcywgUG9zaXRpb24sIHZvaWQ+ID0geyBnZXQgbWV0aG9kKCkgeyByZXR1cm4gTWV0aG9kcy5FeHRlbmRlZC5OYXZpZ2F0ZVJlcXVlc3Q7IH0gfTtcbn1cblxuLyoqXG4gKiBEaWFnbm9zdGljcyBub3RpZmljYXRpb24gYXJlIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gc2lnbmFsXG4gKiByZXN1bHRzIG9mIHZhbGlkYXRpb24gcnVucy5cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBIaWdobGlnaHROb3RpZmljYXRpb24ge1xuICAgIGV4cG9ydCBjb25zdCB0eXBlOiBOb3RpZmljYXRpb25UeXBlPFB1Ymxpc2hIaWdobGlnaHRQYXJhbXM+ID0geyBnZXQgbWV0aG9kKCkgeyByZXR1cm4gTWV0aG9kcy5FeHRlbmRlZC5QdWJsaXNoSGlnaGxpZ2h0Tm90aWZpY2F0aW9uOyB9IH07XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
