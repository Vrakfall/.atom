"use strict";
var omnisharp_client_1 = require('../lib/omnisharp-client');
var _ = require('lodash');
var rxjs_1 = require('rxjs');
var vscode_languageserver_1 = require('vscode-languageserver');
var server_extended_1 = require('./server-extended');
var connection = vscode_languageserver_1.createConnection(new vscode_languageserver_1.StreamMessageReader(process.stdin), new vscode_languageserver_1.StreamMessageWriter(process.stdout));
var client;
var openEditors = new Set();
var ExcludeClassifications = [
    7 /* Number */,
    10 /* ExcludedCode */,
    2 /* Comment */,
    3 /* String */,
    5 /* Punctuation */,
    4 /* Operator */,
    6 /* Keyword */
];
// After the server has started the client sends an initilize request. The server receives
// in the passed params the rootPath of the workspace plus the client capabilites.
connection.onInitialize(function (params) {
    var enablePackageRestore = params.capabilities.enablePackageRestore === undefined || params.capabilities.enablePackageRestore;
    client = new omnisharp_client_1.ReactiveClient({
        projectPath: params.rootPath,
        runtime: omnisharp_client_1.Runtime.CoreClr,
        logger: {
            log: function (message) { connection.telemetry.logEvent({ type: 'log', message: message }); },
            error: function (message) { connection.telemetry.logEvent({ type: 'error', message: message }); }
        },
        serverOptions: {
            dotnet: { enablePackageRestore: enablePackageRestore }
        }
    });
    client.observe.diagnostic.subscribe(function (_a) {
        var Results = _a.Results;
        _.each(Results, function (result) {
            connection.sendDiagnostics({
                uri: toUri(result),
                diagnostics: _.map(result.QuickFixes, getDiagnostic)
            });
        });
    });
    if (params.capabilities.highlightProvider) {
        var highlightsContext_1 = new Map();
        client.observe.updatebuffer.subscribe(function (context) {
            if (openEditors.has(context.request.FileName)) {
                client.highlight({
                    FileName: context.request.FileName,
                    ExcludeClassifications: ExcludeClassifications
                });
            }
        });
        client.observe.close.subscribe(function (context) {
            if (highlightsContext_1.has(context.request.FileName)) {
                highlightsContext_1.delete(context.request.FileName);
            }
        });
        client.observe.highlight
            .bufferToggle(client.observe.highlight.throttleTime(100), function () { return rxjs_1.Observable.timer(100); })
            .concatMap(function (items) {
            var highlights = _(items)
                .reverse()
                .uniqBy(function (x) { return x.request.FileName; })
                .map(function (context) {
                if (!highlightsContext_1.has(context.request.FileName)) {
                    highlightsContext_1.set(context.request.FileName, []);
                }
                var newHighlights = getHighlights(context.response.Highlights);
                var currentHighlights = highlightsContext_1.get(context.request.FileName);
                var added = _.differenceBy(newHighlights, currentHighlights, function (x) { return x.id; });
                var removeHighlights = _.differenceBy(currentHighlights, newHighlights, function (x) { return x.id; });
                highlightsContext_1.set(context.request.FileName, newHighlights);
                return {
                    uri: toUri({ FileName: context.request.FileName }),
                    added: added,
                    removed: _.map(removeHighlights, function (x) { return x.id; })
                };
            })
                .value();
            return rxjs_1.Observable.from(highlights).concatMap(function (x) { return rxjs_1.Observable.of(x).delay(10); });
        })
            .subscribe(function (item) { return connection.sendNotification(server_extended_1.HighlightNotification.type, item); });
    }
    client.observe.events.subscribe(function (event) {
        connection.console.info(JSON.stringify(event));
    });
    client.observe.requests.subscribe(function (event) {
        connection.console.info(JSON.stringify(event));
    });
    client.observe.responses.subscribe(function (event) {
        connection.console.info(JSON.stringify(event));
    });
    /*
     * Little big of magic here
     * This will wait for the server to update all the buffers after a rename operation
     * And then update the diagnostics for all of the buffers.
     */
    client.observe.rename
        .mergeMap(function (rename) {
        return client.observe.updatebuffer
            .debounceTime(1000)
            .take(1)
            .mergeMap(function () {
            // TODO: Add a nicer way to queue many files here to omnisharp...
            return rxjs_1.Observable.merge.apply(rxjs_1.Observable, _.map(rename.response.Changes, function (item) { return client.diagnostics({ FileName: item.FileName }); }));
        });
    })
        .subscribe();
    client.connect();
    return client.state
        .filter(function (x) { return x === omnisharp_client_1.DriverState.Connected; })
        .take(1)
        .do(function () {
        // Kick code checking on.
        client.diagnostics({});
    })
        .map(function () { return ({
        capabilities: {
            //textDocumentSync: TextDocumentSyncKind.Full,
            // Not currently supported
            textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Incremental,
            completionProvider: {},
            codeLensProvider: {
                resolveProvider: true
            },
            definitionProvider: true,
            documentFormattingProvider: true,
            documentOnTypeFormattingProvider: {
                firstTriggerCharacter: '}',
                moreTriggerCharacter: [';']
            },
            documentRangeFormattingProvider: true,
            //documentSymbolProvider: true,
            hoverProvider: true,
            referencesProvider: true,
            renameProvider: true,
            signatureHelpProvider: {
                triggerCharacters: ['(']
            },
            workspaceSymbolProvider: true,
            extended: {
                getCodeActionsProvider: true,
                runCodeActionProvider: true,
                implementationProvider: true,
                navigateProvider: true,
                highlightProvider: true
            }
        }
    }); })
        .toPromise();
});
connection.onExit(function () {
    client.disconnect();
});
/* not yet doing this... */
// connection.onDidChangeConfiguration((change) => {
// });
connection.onDidChangeWatchedFiles(function (change) {
    _.each(change.changes, function (change) {
        client.updatebuffer({
            FileName: fromUri(change),
            FromDisk: true
        });
    });
});
// ** Do we need this yet? **
// connection.onCompletionResolve((item: CompletionItem) => {
// });
connection.onDidChangeTextDocument(function (_a) {
    var textDocument = _a.textDocument, contentChanges = _a.contentChanges;
    // The editor itself might not support TextDocumentSyncKind.Incremental
    // So we check to see if we're getting ranges or not.
    if (contentChanges.length === 1 && !contentChanges[0].range) {
        // TextDocumentSyncKind.Full
        client.updatebuffer({
            FileName: fromUri(textDocument),
            Buffer: contentChanges[0].text
        });
    }
    else if (contentChanges.length > 0) {
        // TextDocumentSyncKind.Incremental
        var changes = _.map(contentChanges, function (change) {
            return ({
                NewText: change.text,
                FileName: fromUri(textDocument),
                StartColumn: change.range.start.character,
                StartLine: change.range.start.line,
                EndColumn: change.range.end.character,
                EndLine: change.range.end.line,
            });
        });
        client.updatebuffer({
            FileName: fromUri(textDocument),
            Changes: changes
        });
    }
});
connection.onDidOpenTextDocument(function (_a) {
    var textDocument = _a.textDocument;
    client.open({
        FileName: fromUri(textDocument)
    });
    client.updatebuffer({
        FileName: fromUri(textDocument),
        Buffer: textDocument.text
    });
    openEditors.add(fromUri(textDocument));
});
connection.onDidCloseTextDocument(function (_a) {
    var textDocument = _a.textDocument;
    client.close({
        FileName: fromUri(textDocument)
    });
    openEditors.delete(fromUri(textDocument));
});
connection.onDidSaveTextDocument(function (_a) {
    var textDocument = _a.textDocument;
    client.updatebuffer({
        FileName: fromUri(textDocument),
        FromDisk: true
    });
});
connection.onDefinition(function (_a) {
    var textDocument = _a.textDocument, position = _a.position;
    return client.gotodefinition({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line
    })
        .map(getLocationPoint)
        .toPromise();
});
connection.onCompletion(function (_a) {
    var textDocument = _a.textDocument, position = _a.position;
    return client
        .autocomplete({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line,
        WantDocumentationForEveryCompletionResult: true,
        WantKind: true,
        WantImportableTypes: true,
        WantMethodHeader: true,
        WantReturnType: true,
        WantSnippet: false,
        WordToComplete: ''
    }).map(function (x) { return _.map(x, function (value) {
        return {
            label: value.DisplayText,
            detail: value.Description,
            documentation: value.MethodHeader,
            filterText: value.CompletionText,
            kind: vscode_languageserver_1.CompletionItemKind[value.Kind],
            sortText: value.DisplayText
        };
    }); })
        .map(function (items) { return ({
        isIncomplete: false, items: items
    }); })
        .toPromise();
});
//connection.onCompletionResolve((x) => {});
connection.onHover(function (_a) {
    var textDocument = _a.textDocument, position = _a.position;
    return client.typelookup({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line
    })
        .map(function (result) { return ({
        contents: (result.Type || '') + " " + (result.Documentation || ''),
    }); })
        .toPromise();
});
connection.onSignatureHelp(function (_a) {
    var textDocument = _a.textDocument, position = _a.position;
    return client.signatureHelp({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line
    })
        .map(function (result) { return ({
        activeParameter: result.ActiveParameter,
        activeSignature: result.ActiveSignature,
        signatures: _.map(result.Signatures, function (z) { return ({
            documentation: z.Documentation,
            label: z.Label,
            parameters: _.map(z.Parameters, function (param) { return ({
                documentation: param.Documentation,
                label: param.Label,
            }); })
        }); })
    }); })
        .toPromise();
});
connection.onReferences(function (_a) {
    var context = _a.context, textDocument = _a.textDocument, position = _a.position;
    return client.findusages({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line,
        ExcludeDefinition: !context.includeDeclaration
    })
        .map(function (result) { return _.map(result.QuickFixes, getLocation); })
        .toPromise();
});
//connection.onDocumentHighlight((x) => {});
//connection.onDocumentSymbol((x) => {});
connection.onWorkspaceSymbol(function (_a) {
    var query = _a.query;
    return client.findsymbols({ Filter: query })
        .map(function (results) { return _.map(results.QuickFixes, function (fix) { return ({
        kind: vscode_languageserver_1.SymbolKind[fix.Kind] || vscode_languageserver_1.SymbolKind.Variable,
        name: fix.Text,
        location: getLocation(fix)
    }); }); })
        .toPromise();
});
connection.onCodeLens(function (_a) {
    var textDocument = _a.textDocument;
    return client.currentfilemembersasflat({
        FileName: fromUri(textDocument)
    })
        .map(function (results) {
        return _.map(results, function (location) {
            return {
                data: _.defaults({ FileName: fromUri(textDocument) }, location),
                range: getRange(location)
            };
        });
    })
        .toPromise();
});
connection.onCodeLensResolve(function (codeLens) {
    return client.findusages(codeLens.data)
        .map(function (x) {
        codeLens.command = {
            // TODO: ...?
            title: "References (" + x.QuickFixes.length + ")",
            command: "references"
        };
        codeLens.data = {
            location: getLocation(codeLens.data)
        };
        return codeLens;
    })
        .toPromise();
});
// Requires new endpoint
connection.onDocumentFormatting(function (_a) {
    var textDocument = _a.textDocument, options = _a.options;
    return client.codeformat({
        WantsTextChanges: true,
        FileName: fromUri(textDocument),
    })
        .map(getTextEdits)
        .toPromise();
});
connection.onDocumentRangeFormatting(function (_a) {
    var textDocument = _a.textDocument, options = _a.options, range = _a.range;
    return client.formatRange({
        FileName: fromUri(textDocument),
        Column: range.start.character,
        Line: range.start.line,
        EndColumn: range.end.character,
        EndLine: range.end.line,
    })
        .map(getTextEdits)
        .toPromise();
});
connection.onDocumentOnTypeFormatting(function (_a) {
    var textDocument = _a.textDocument, options = _a.options, position = _a.position, ch = _a.ch;
    return client.formatAfterKeystroke({
        FileName: fromUri(textDocument),
        Character: ch,
        Line: position.line,
        Column: position.character
    })
        .map(getTextEdits)
        .toPromise();
});
connection.onRenameRequest(function (_a) {
    var textDocument = _a.textDocument, position = _a.position, newName = _a.newName;
    return client.rename({
        FileName: fromUri(textDocument),
        Line: position.line,
        Column: position.character,
        RenameTo: newName,
        ApplyTextChanges: false,
        WantsTextChanges: true
    })
        .map(toWorkspaceEdit)
        .toPromise();
});
/* EXTENDED ENDPOINTS */
connection.onRequest(server_extended_1.GetCodeActionsRequest.type, function (_a) {
    var textDocument = _a.textDocument, range = _a.range, context = _a.context;
    return client.getcodeactions({
        FileName: fromUri(textDocument),
        Selection: fromRange(range)
    })
        .map(function (item) {
        var codeActions = _.map(item.CodeActions, function (codeAction) {
            return {
                name: codeAction.Name,
                identifier: codeAction.Identifier
            };
        });
        return { codeActions: codeActions };
    })
        .toPromise();
});
connection.onRequest(server_extended_1.RunCodeActionRequest.type, function (_a) {
    var textDocument = _a.textDocument, range = _a.range, context = _a.context, identifier = _a.identifier;
    return client.runcodeaction({
        FileName: fromUri(textDocument),
        Selection: fromRange(range),
        Identifier: identifier,
        WantsTextChanges: true,
        ApplyTextChanges: false
    })
        .map(toWorkspaceEdit)
        .toPromise();
});
connection.onRequest(server_extended_1.ImplementationRequest.type, function (_a) {
    var textDocument = _a.textDocument, position = _a.position;
    return client.findimplementations({
        FileName: fromUri(textDocument),
        Column: position.character,
        Line: position.line
    })
        .map(function (z) { return z.QuickFixes; })
        .map(getLocationPoints)
        .toPromise();
});
connection.onRequest(server_extended_1.NavigateRequest.type, function (_a) {
    var textDocument = _a.textDocument, position = _a.position, direction = _a.direction;
    var request;
    if (direction === 'up') {
        request = client.navigateup({
            FileName: fromUri(textDocument),
            Column: position.character,
            Line: position.line
        });
    }
    else {
        request = client.navigatedown({
            FileName: fromUri(textDocument),
            Column: position.character,
            Line: position.line
        });
    }
    return request
        .map(getPosition)
        .toPromise();
});
// Listen on the connection
connection.listen();
function getRange(item) {
    return {
        start: {
            character: item.Column || item.StartColumn || 0,
            line: item.Line || item.StartLine || 0
        },
        end: {
            character: item.EndColumn,
            line: item.EndLine
        }
    };
}
function getHighlights(highlights) {
    return _.map(highlights, getHighlight);
}
function getHighlight(highlight) {
    var range = getRange(highlight);
    return {
        id: range.start.line + ":" + range.start.character + "|" + range.end.line + ":" + range.end.character + "|" + highlight.Kind,
        range: range,
        kind: highlight.Kind,
    };
}
function getLocationPoints(fix) {
    return _.map(fix, getLocationPoint);
}
function getLocationPoint(fix) {
    return getLocation(_.assign(fix, { EndColumn: fix.Column, EndLine: fix.Line }));
}
function getLocation(fix) {
    return {
        uri: toUri(fix),
        range: getRange(fix)
    };
}
function getPosition(model) {
    return vscode_languageserver_1.Position.create(model.Line, model.Column);
}
function getTextEdit(change) {
    return {
        range: getRange(change),
        newText: change.NewText,
    };
}
function getTextEdits(response) {
    return _.map(response.Changes, getTextEdit);
}
function getDiagnostic(item) {
    var sev = vscode_languageserver_1.DiagnosticSeverity.Error;
    if (item.LogLevel === 'Warning') {
        sev = vscode_languageserver_1.DiagnosticSeverity.Warning;
    }
    if (item.LogLevel === 'Hidden') {
        sev = vscode_languageserver_1.DiagnosticSeverity.Hint;
    }
    if (item.LogLevel === 'Information') {
        sev = vscode_languageserver_1.DiagnosticSeverity.Information;
    }
    return {
        severity: sev,
        message: item.Text,
        range: getRange(item)
    };
}
function fromUri(document) {
    return vscode_languageserver_1.Files.uriToFilePath(document.uri);
}
function fromRange(range) {
    return {
        Start: {
            Column: range.start.character,
            Line: range.start.line
        },
        End: {
            Column: range.end.character,
            Line: range.end.line
        }
    };
}
function toUri(result) {
    return toUriString(result.FileName);
}
function toWorkspaceEdit(item) {
    var changes = {};
    _.each(_.groupBy(item.Changes, function (x) { return x.FileName; }), function (result, key) {
        changes[toUriString(key)] = _.flatMap(result, function (item) {
            return _.map(item.Changes, getTextEdit);
        });
    });
    return { changes: changes };
}
// TODO: this code isn't perfect
function toUriString(path) {
    return "file://" + (process.platform === 'win32' ? '/' : '') + path.replace(':', encodeURIComponent(':'));
}

//# sourceMappingURL=data:application/json;base64,
