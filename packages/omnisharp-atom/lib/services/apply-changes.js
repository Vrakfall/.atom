"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyChanges = applyChanges;
exports.applyAllChanges = applyAllChanges;

var _rxjs = require("rxjs");

var Range = require("atom").Range;
function applyChanges(editor, response) {
    if (!response) return;
    if (response.Changes) {
        (function () {
            var buffer = editor.getBuffer();
            var checkpoint = buffer.createCheckpoint();
            response.Changes.forEach(function (change) {
                var range = new Range([change.StartLine, change.StartColumn], [change.EndLine, change.EndColumn]);
                buffer.setTextInRange(range, change.NewText);
            });
            buffer.groupChangesSinceCheckpoint(checkpoint);
        })();
    } else if (response.Buffer) {
        editor.setText(response.Buffer);
    }
}
function resetPreviewTab() {
    var pane = atom.views.getView(atom.workspace.getActivePane());
    if (pane) {
        var title = pane.querySelector(".title.temp");
        if (title) {
            title.classList.remove("temp");
        }
        var tab = pane.querySelector(".preview-tab.active");
        if (tab) {
            tab.classList.remove("preview-tab");
            tab.isPreviewTab = false;
        }
    }
}
function applyAllChanges(changes) {
    resetPreviewTab();
    return _rxjs.Observable.from(changes).concatMap(function (change) {
        return atom.workspace.open(change.FileName, undefined).then(function (editor) {
            resetPreviewTab();
            applyChanges(editor, change);
        });
    }).subscribe();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hcHBseS1jaGFuZ2VzLnRzIiwibGliL3NlcnZpY2VzL2FwcGx5LWNoYW5nZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFNQSxZLEdBQUEsWTtRQW9DQSxlLEdBQUEsZTs7QUN6Q0E7O0FEQ0EsSUFBTSxRQUFRLFFBQVEsTUFBUixFQUFnQixLQUE5QjtBQUlBLFNBQUEsWUFBQSxDQUE2QixNQUE3QixFQUFzRCxRQUF0RCxFQUFtSTtBQUMvSCxRQUFJLENBQUMsUUFBTCxFQUFlO0FBQ2YsUUFBSSxTQUFTLE9BQWIsRUFBc0I7QUFBQTtBQUNsQixnQkFBTSxTQUFTLE9BQU8sU0FBUCxFQUFmO0FBQ0EsZ0JBQU0sYUFBYSxPQUFPLGdCQUFQLEVBQW5CO0FBRUEscUJBQVMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixVQUFDLE1BQUQsRUFBTztBQUM1QixvQkFBTSxRQUFRLElBQUksS0FBSixDQUFVLENBQUMsT0FBTyxTQUFSLEVBQW1CLE9BQU8sV0FBMUIsQ0FBVixFQUFrRCxDQUFDLE9BQU8sT0FBUixFQUFpQixPQUFPLFNBQXhCLENBQWxELENBQWQ7QUFDQSx1QkFBTyxjQUFQLENBQXNCLEtBQXRCLEVBQTZCLE9BQU8sT0FBcEM7QUFDSCxhQUhEO0FBS0EsbUJBQU8sMkJBQVAsQ0FBbUMsVUFBbkM7QUFUa0I7QUFVckIsS0FWRCxNQVVPLElBQUksU0FBUyxNQUFiLEVBQXFCO0FBQ3hCLGVBQU8sT0FBUCxDQUFlLFNBQVMsTUFBeEI7QUFDSDtBQUNKO0FBS0QsU0FBQSxlQUFBLEdBQUE7QUFDSSxRQUFNLE9BQXlCLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsS0FBSyxTQUFMLENBQWUsYUFBZixFQUFuQixDQUEvQjtBQUNBLFFBQUksSUFBSixFQUFVO0FBQ1YsWUFBTSxRQUFRLEtBQUssYUFBTCxDQUFtQixhQUFuQixDQUFkO0FBQ0EsWUFBSSxLQUFKLEVBQVc7QUFDUCxrQkFBTSxTQUFOLENBQWdCLE1BQWhCLENBQXVCLE1BQXZCO0FBQ0g7QUFFRCxZQUFNLE1BQU0sS0FBSyxhQUFMLENBQW1CLHFCQUFuQixDQUFaO0FBQ0EsWUFBSSxHQUFKLEVBQVM7QUFDTCxnQkFBSSxTQUFKLENBQWMsTUFBZCxDQUFxQixhQUFyQjtBQUNNLGdCQUFLLFlBQUwsR0FBb0IsS0FBcEI7QUFDVDtBQUNBO0FBQ0o7QUFFRCxTQUFBLGVBQUEsQ0FBZ0MsT0FBaEMsRUFBc0U7QUFDbEU7QUFDQSxXQUFPLGlCQUFXLElBQVgsQ0FBNkMsT0FBN0MsRUFDRixTQURFLENBQ1E7QUFBQSxlQUF5QyxLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLE9BQU8sUUFBM0IsRUFBcUMsU0FBckMsRUFDL0MsSUFEK0MsQ0FDMUMsa0JBQU07QUFDUjtBQUNBLHlCQUFhLE1BQWIsRUFBcUIsTUFBckI7QUFDSCxTQUorQyxDQUF6QztBQUFBLEtBRFIsRUFNRixTQU5FLEVBQVA7QUFPSCIsImZpbGUiOiJsaWIvc2VydmljZXMvYXBwbHktY2hhbmdlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kZWxzfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xuY29uc3QgUmFuZ2UgPSByZXF1aXJlKFwiYXRvbVwiKS5SYW5nZTtcbi8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlDaGFuZ2VzKGVkaXRvcjogQXRvbS5UZXh0RWRpdG9yLCByZXNwb25zZTogeyBDaGFuZ2VzPzogTW9kZWxzLkxpbmVQb3NpdGlvblNwYW5UZXh0Q2hhbmdlW107IEJ1ZmZlcj86IHN0cmluZzsgfSkge1xuICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcbiAgICBpZiAocmVzcG9uc2UuQ2hhbmdlcykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrcG9pbnQgPSBidWZmZXIuY3JlYXRlQ2hlY2twb2ludCgpO1xuXG4gICAgICAgIHJlc3BvbnNlLkNoYW5nZXMuZm9yRWFjaCgoY2hhbmdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG5ldyBSYW5nZShbY2hhbmdlLlN0YXJ0TGluZSwgY2hhbmdlLlN0YXJ0Q29sdW1uXSwgW2NoYW5nZS5FbmRMaW5lLCBjaGFuZ2UuRW5kQ29sdW1uXSk7XG4gICAgICAgICAgICBidWZmZXIuc2V0VGV4dEluUmFuZ2UocmFuZ2UsIGNoYW5nZS5OZXdUZXh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnVmZmVyLmdyb3VwQ2hhbmdlc1NpbmNlQ2hlY2twb2ludChjaGVja3BvaW50KTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLkJ1ZmZlcikge1xuICAgICAgICBlZGl0b3Iuc2V0VGV4dChyZXNwb25zZS5CdWZmZXIpO1xuICAgIH1cbn1cblxuLy8gSWYgeW91IGhhdmUgcHJldmlldyB0YWJzIGVuYWJsZWQsXG4vLyAgICAgdGhleSB3aWxsIGFjdHVhbGx5IHRyeSB0byBjbG9zZVxuLy8gICAgIHdpdGggY2hhbmdlcyBzdGlsbC5cbmZ1bmN0aW9uIHJlc2V0UHJldmlld1RhYigpIHtcbiAgICBjb25zdCBwYW5lOiBIVE1MRWxlbWVudCA9IDxhbnk+YXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKSk7XG4gICAgaWYgKHBhbmUpIHtcbiAgICBjb25zdCB0aXRsZSA9IHBhbmUucXVlcnlTZWxlY3RvcihcIi50aXRsZS50ZW1wXCIpO1xuICAgIGlmICh0aXRsZSkge1xuICAgICAgICB0aXRsZS5jbGFzc0xpc3QucmVtb3ZlKFwidGVtcFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB0YWIgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoXCIucHJldmlldy10YWIuYWN0aXZlXCIpO1xuICAgIGlmICh0YWIpIHtcbiAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJwcmV2aWV3LXRhYlwiKTtcbiAgICAgICAgKDxhbnk+dGFiKS5pc1ByZXZpZXdUYWIgPSBmYWxzZTtcbiAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlBbGxDaGFuZ2VzKGNoYW5nZXM6IE1vZGVscy5Nb2RpZmllZEZpbGVSZXNwb25zZVtdKSB7XG4gICAgcmVzZXRQcmV2aWV3VGFiKCk7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbTxNb2RlbHMuTW9kaWZpZWRGaWxlUmVzcG9uc2U+KGNoYW5nZXMpXG4gICAgICAgIC5jb25jYXRNYXAoY2hhbmdlID0+IDxQcm9taXNlPEF0b20uVGV4dEVkaXRvcj4+PGFueT5hdG9tLndvcmtzcGFjZS5vcGVuKGNoYW5nZS5GaWxlTmFtZSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgLnRoZW4oZWRpdG9yID0+IHtcbiAgICAgICAgICAgICAgICByZXNldFByZXZpZXdUYWIoKTtcbiAgICAgICAgICAgICAgICBhcHBseUNoYW5nZXMoZWRpdG9yLCBjaGFuZ2UpO1xuICAgICAgICAgICAgfSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbn1cbiIsImNvbnN0IFJhbmdlID0gcmVxdWlyZShcImF0b21cIikuUmFuZ2U7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNoYW5nZXMoZWRpdG9yLCByZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2UpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAocmVzcG9uc2UuQ2hhbmdlcykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrcG9pbnQgPSBidWZmZXIuY3JlYXRlQ2hlY2twb2ludCgpO1xuICAgICAgICByZXNwb25zZS5DaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBuZXcgUmFuZ2UoW2NoYW5nZS5TdGFydExpbmUsIGNoYW5nZS5TdGFydENvbHVtbl0sIFtjaGFuZ2UuRW5kTGluZSwgY2hhbmdlLkVuZENvbHVtbl0pO1xuICAgICAgICAgICAgYnVmZmVyLnNldFRleHRJblJhbmdlKHJhbmdlLCBjaGFuZ2UuTmV3VGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICBidWZmZXIuZ3JvdXBDaGFuZ2VzU2luY2VDaGVja3BvaW50KGNoZWNrcG9pbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXNwb25zZS5CdWZmZXIpIHtcbiAgICAgICAgZWRpdG9yLnNldFRleHQocmVzcG9uc2UuQnVmZmVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNldFByZXZpZXdUYWIoKSB7XG4gICAgY29uc3QgcGFuZSA9IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKCkpO1xuICAgIGlmIChwYW5lKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnRpdGxlLnRlbXBcIik7XG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgdGl0bGUuY2xhc3NMaXN0LnJlbW92ZShcInRlbXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFiID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnByZXZpZXctdGFiLmFjdGl2ZVwiKTtcbiAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJwcmV2aWV3LXRhYlwiKTtcbiAgICAgICAgICAgIHRhYi5pc1ByZXZpZXdUYWIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUFsbENoYW5nZXMoY2hhbmdlcykge1xuICAgIHJlc2V0UHJldmlld1RhYigpO1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb20oY2hhbmdlcylcbiAgICAgICAgLmNvbmNhdE1hcChjaGFuZ2UgPT4gYXRvbS53b3Jrc3BhY2Uub3BlbihjaGFuZ2UuRmlsZU5hbWUsIHVuZGVmaW5lZClcbiAgICAgICAgLnRoZW4oZWRpdG9yID0+IHtcbiAgICAgICAgcmVzZXRQcmV2aWV3VGFiKCk7XG4gICAgICAgIGFwcGx5Q2hhbmdlcyhlZGl0b3IsIGNoYW5nZSk7XG4gICAgfSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
