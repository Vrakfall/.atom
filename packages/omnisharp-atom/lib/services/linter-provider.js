"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.provider = undefined;
exports.init = init;

var _omni = require("../server/omni");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _rxjs = require("rxjs");

var _omnisharpClient = require("omnisharp-client");

var _codeCheck = require("../features/code-check");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Range = require("atom").Range;

function mapValues(editor, error) {
    var level = error.LogLevel.toLowerCase();
    return {
        type: level,
        text: error.Text + " [" + _omni.Omni.getFrameworks(error.Projects) + "] ",
        filePath: editor.getPath(),
        range: new Range([error.Line, error.Column], [error.EndLine, error.EndColumn])
    };
}
function showLinter() {
    _lodash2.default.each(document.querySelectorAll("linter-bottom-tab"), function (element) {
        return element.style.display = "";
    });
    _lodash2.default.each(document.querySelectorAll("linter-bottom-status"), function (element) {
        return element.style.display = "";
    });
    var panel = document.querySelector("linter-panel");
    if (panel) panel.style.display = "";
}
function hideLinter() {
    _lodash2.default.each(document.querySelectorAll("linter-bottom-tab"), function (element) {
        return element.style.display = "none";
    });
    _lodash2.default.each(document.querySelectorAll("linter-bottom-status"), function (element) {
        return element.style.display = "none";
    });
    var panel = document.querySelector("linter-panel");
    if (panel) panel.style.display = "none";
}
var showHiddenDiagnostics = true;
function init(linter) {
    var disposable = new _omnisharpClient.CompositeDisposable();
    var cd = void 0;
    disposable.add(atom.config.observe("omnisharp-atom.hideLinterInterface", function (hidden) {
        if (hidden) {
            cd = new _omnisharpClient.CompositeDisposable();
            disposable.add(cd);
            cd.add(_omni.Omni.activeEditor.filter(function (z) {
                return !z;
            }).subscribe(showLinter));
            cd.add(_omni.Omni.activeEditor.filter(function (z) {
                return !!z;
            }).subscribe(hideLinter));
        } else {
            if (cd) {
                disposable.remove(cd);
                cd.dispose();
            }
            showLinter();
        }
    }));
    disposable.add(atom.config.observe("omnisharp-atom.showHiddenDiagnostics", function (show) {
        showHiddenDiagnostics = show;
        atom.workspace.getTextEditors().forEach(function (editor) {
            var editorLinter = linter.getEditorLinter(editor);
            if (editorLinter) {
                editorLinter.lint(true);
            }
        });
    }));
    disposable.add(_omni.Omni.activeEditor.filter(function (z) {
        return !!z;
    }).take(1).delay(1000).subscribe(function (e) {
        _omni.Omni.whenEditorConnected(e).subscribe(function () {
            atom.workspace.getTextEditors().forEach(function (editor) {
                var editorLinter = linter.getEditorLinter(editor);
                if (editorLinter) {
                    editorLinter.lint(true);
                }
            });
        });
    }));
    return disposable;
}
var provider = exports.provider = [{
    name: "c#",
    get grammarScopes() {
        return _omni.Omni.grammars.map(function (x) {
            return x.scopeName;
        });
    },
    scope: "file",
    lintOnFly: true,
    lint: function lint(editor) {
        var path = editor.getPath();
        var o = _rxjs.Observable.defer(function () {
            return _codeCheck.codeCheck.doCodeCheck(editor);
        });
        return o.timeoutWith(30000, _rxjs.Observable.of([])).flatMap(function (x) {
            return x;
        }).filter(function (z) {
            return z.FileName === path && (showHiddenDiagnostics || z.LogLevel !== "Hidden");
        }).map(function (error) {
            return mapValues(editor, error);
        }).toArray().toPromise();
    }
}, {
    name: "c#",
    get grammarScopes() {
        return _omni.Omni.grammars.map(function (x) {
            return x.scopeName;
        });
    },
    scope: "project",
    lintOnFly: false,
    lint: function lint(editor) {
        return _omni.Omni.activeModel.flatMap(function (x) {
            return x.diagnostics;
        }).filter(function (z) {
            return showHiddenDiagnostics || z.LogLevel !== "Hidden";
        }).map(function (error) {
            return mapValues(editor, error);
        }).toArray().toPromise();
    }
}];
//# sourceMappingURL=data:application/json;base64,
