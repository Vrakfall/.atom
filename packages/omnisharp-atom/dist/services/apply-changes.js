"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyChanges = applyChanges;
exports.applyAllChanges = applyAllChanges;

var _rxjs = require("rxjs");

var Range = require("atom").Range;
function applyChanges(editor, response) {
    if (!response) return;
    if (response.Changes) {
        (function () {
            var buffer = editor.getBuffer();
            var checkpoint = buffer.createCheckpoint();
            response.Changes.forEach(function (change) {
                var range = new Range([change.StartLine, change.StartColumn], [change.EndLine, change.EndColumn]);
                buffer.setTextInRange(range, change.NewText);
            });
            buffer.groupChangesSinceCheckpoint(checkpoint);
        })();
    } else if (response.Buffer) {
        editor.setText(response.Buffer);
    }
}
function resetPreviewTab() {
    var pane = atom.views.getView(atom.workspace.getActivePane());
    if (pane) {
        var title = pane.querySelector(".title.temp");
        if (title) {
            title.classList.remove("temp");
        }
        var tab = pane.querySelector(".preview-tab.active");
        if (tab) {
            tab.classList.remove("preview-tab");
            tab.isPreviewTab = false;
        }
    }
}
function applyAllChanges(changes) {
    resetPreviewTab();
    return _rxjs.Observable.from(changes).concatMap(function (change) {
        return atom.workspace.open(change.FileName, undefined).then(function (editor) {
            resetPreviewTab();
            applyChanges(editor, change);
        });
    }).subscribe();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hcHBseS1jaGFuZ2VzLnRzIiwibGliL3NlcnZpY2VzL2FwcGx5LWNoYW5nZXMuanMiXSwibmFtZXMiOlsiYXBwbHlDaGFuZ2VzIiwiYXBwbHlBbGxDaGFuZ2VzIiwiUmFuZ2UiLCJyZXF1aXJlIiwiZWRpdG9yIiwicmVzcG9uc2UiLCJDaGFuZ2VzIiwiYnVmZmVyIiwiZ2V0QnVmZmVyIiwiY2hlY2twb2ludCIsImNyZWF0ZUNoZWNrcG9pbnQiLCJmb3JFYWNoIiwiY2hhbmdlIiwicmFuZ2UiLCJTdGFydExpbmUiLCJTdGFydENvbHVtbiIsIkVuZExpbmUiLCJFbmRDb2x1bW4iLCJzZXRUZXh0SW5SYW5nZSIsIk5ld1RleHQiLCJncm91cENoYW5nZXNTaW5jZUNoZWNrcG9pbnQiLCJCdWZmZXIiLCJzZXRUZXh0IiwicmVzZXRQcmV2aWV3VGFiIiwicGFuZSIsImF0b20iLCJ2aWV3cyIsImdldFZpZXciLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVQYW5lIiwidGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwidGFiIiwiaXNQcmV2aWV3VGFiIiwiY2hhbmdlcyIsImZyb20iLCJjb25jYXRNYXAiLCJvcGVuIiwiRmlsZU5hbWUiLCJ1bmRlZmluZWQiLCJ0aGVuIiwic3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiOzs7OztRQU1BQSxZLEdBQUFBLFk7UUFvQ0FDLGUsR0FBQUEsZTs7QUN6Q0E7O0FEQ0EsSUFBTUMsUUFBUUMsUUFBUSxNQUFSLEVBQWdCRCxLQUE5QjtBQUlBLFNBQUFGLFlBQUEsQ0FBNkJJLE1BQTdCLEVBQXNEQyxRQUF0RCxFQUFtSTtBQUMvSCxRQUFJLENBQUNBLFFBQUwsRUFBZTtBQUNmLFFBQUlBLFNBQVNDLE9BQWIsRUFBc0I7QUFBQTtBQUNsQixnQkFBTUMsU0FBU0gsT0FBT0ksU0FBUCxFQUFmO0FBQ0EsZ0JBQU1DLGFBQWFGLE9BQU9HLGdCQUFQLEVBQW5CO0FBRUFMLHFCQUFTQyxPQUFULENBQWlCSyxPQUFqQixDQUF5QixVQUFDQyxNQUFELEVBQU87QUFDNUIsb0JBQU1DLFFBQVEsSUFBSVgsS0FBSixDQUFVLENBQUNVLE9BQU9FLFNBQVIsRUFBbUJGLE9BQU9HLFdBQTFCLENBQVYsRUFBa0QsQ0FBQ0gsT0FBT0ksT0FBUixFQUFpQkosT0FBT0ssU0FBeEIsQ0FBbEQsQ0FBZDtBQUNBVix1QkFBT1csY0FBUCxDQUFzQkwsS0FBdEIsRUFBNkJELE9BQU9PLE9BQXBDO0FBQ0gsYUFIRDtBQUtBWixtQkFBT2EsMkJBQVAsQ0FBbUNYLFVBQW5DO0FBVGtCO0FBVXJCLEtBVkQsTUFVTyxJQUFJSixTQUFTZ0IsTUFBYixFQUFxQjtBQUN4QmpCLGVBQU9rQixPQUFQLENBQWVqQixTQUFTZ0IsTUFBeEI7QUFDSDtBQUNKO0FBS0QsU0FBQUUsZUFBQSxHQUFBO0FBQ0ksUUFBTUMsT0FBeUJDLEtBQUtDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkYsS0FBS0csU0FBTCxDQUFlQyxhQUFmLEVBQW5CLENBQS9CO0FBQ0EsUUFBSUwsSUFBSixFQUFVO0FBQ1YsWUFBTU0sUUFBUU4sS0FBS08sYUFBTCxDQUFtQixhQUFuQixDQUFkO0FBQ0EsWUFBSUQsS0FBSixFQUFXO0FBQ1BBLGtCQUFNRSxTQUFOLENBQWdCQyxNQUFoQixDQUF1QixNQUF2QjtBQUNIO0FBRUQsWUFBTUMsTUFBTVYsS0FBS08sYUFBTCxDQUFtQixxQkFBbkIsQ0FBWjtBQUNBLFlBQUlHLEdBQUosRUFBUztBQUNMQSxnQkFBSUYsU0FBSixDQUFjQyxNQUFkLENBQXFCLGFBQXJCO0FBQ01DLGdCQUFLQyxZQUFMLEdBQW9CLEtBQXBCO0FBQ1Q7QUFDQTtBQUNKO0FBRUQsU0FBQWxDLGVBQUEsQ0FBZ0NtQyxPQUFoQyxFQUFzRTtBQUNsRWI7QUFDQSxXQUFPLGlCQUFXYyxJQUFYLENBQTZDRCxPQUE3QyxFQUNGRSxTQURFLENBQ1E7QUFBQSxlQUF5Q2IsS0FBS0csU0FBTCxDQUFlVyxJQUFmLENBQW9CM0IsT0FBTzRCLFFBQTNCLEVBQXFDQyxTQUFyQyxFQUMvQ0MsSUFEK0MsQ0FDMUMsa0JBQU07QUFDUm5CO0FBQ0F2Qix5QkFBYUksTUFBYixFQUFxQlEsTUFBckI7QUFDSCxTQUorQyxDQUF6QztBQUFBLEtBRFIsRUFNRitCLFNBTkUsRUFBUDtBQU9IIiwiZmlsZSI6ImxpYi9zZXJ2aWNlcy9hcHBseS1jaGFuZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2RlbHN9IGZyb20gXCJvbW5pc2hhcnAtY2xpZW50XCI7XHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKFwiYXRvbVwiKS5SYW5nZTtcclxuLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNoYW5nZXMoZWRpdG9yOiBBdG9tLlRleHRFZGl0b3IsIHJlc3BvbnNlOiB7IENoYW5nZXM/OiBNb2RlbHMuTGluZVBvc2l0aW9uU3BhblRleHRDaGFuZ2VbXTsgQnVmZmVyPzogc3RyaW5nOyB9KSB7XHJcbiAgICBpZiAoIXJlc3BvbnNlKSByZXR1cm47XHJcbiAgICBpZiAocmVzcG9uc2UuQ2hhbmdlcykge1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKTtcclxuICAgICAgICBjb25zdCBjaGVja3BvaW50ID0gYnVmZmVyLmNyZWF0ZUNoZWNrcG9pbnQoKTtcclxuXHJcbiAgICAgICAgcmVzcG9uc2UuQ2hhbmdlcy5mb3JFYWNoKChjaGFuZ2UpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBuZXcgUmFuZ2UoW2NoYW5nZS5TdGFydExpbmUsIGNoYW5nZS5TdGFydENvbHVtbl0sIFtjaGFuZ2UuRW5kTGluZSwgY2hhbmdlLkVuZENvbHVtbl0pO1xyXG4gICAgICAgICAgICBidWZmZXIuc2V0VGV4dEluUmFuZ2UocmFuZ2UsIGNoYW5nZS5OZXdUZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnVmZmVyLmdyb3VwQ2hhbmdlc1NpbmNlQ2hlY2twb2ludChjaGVja3BvaW50KTtcclxuICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuQnVmZmVyKSB7XHJcbiAgICAgICAgZWRpdG9yLnNldFRleHQocmVzcG9uc2UuQnVmZmVyKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gSWYgeW91IGhhdmUgcHJldmlldyB0YWJzIGVuYWJsZWQsXHJcbi8vICAgICB0aGV5IHdpbGwgYWN0dWFsbHkgdHJ5IHRvIGNsb3NlXHJcbi8vICAgICB3aXRoIGNoYW5nZXMgc3RpbGwuXHJcbmZ1bmN0aW9uIHJlc2V0UHJldmlld1RhYigpIHtcclxuICAgIGNvbnN0IHBhbmU6IEhUTUxFbGVtZW50ID0gPGFueT5hdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpKTtcclxuICAgIGlmIChwYW5lKSB7XHJcbiAgICBjb25zdCB0aXRsZSA9IHBhbmUucXVlcnlTZWxlY3RvcihcIi50aXRsZS50ZW1wXCIpO1xyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGUuY2xhc3NMaXN0LnJlbW92ZShcInRlbXBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGFiID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnByZXZpZXctdGFiLmFjdGl2ZVwiKTtcclxuICAgIGlmICh0YWIpIHtcclxuICAgICAgICB0YWIuY2xhc3NMaXN0LnJlbW92ZShcInByZXZpZXctdGFiXCIpO1xyXG4gICAgICAgICg8YW55PnRhYikuaXNQcmV2aWV3VGFiID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUFsbENoYW5nZXMoY2hhbmdlczogTW9kZWxzLk1vZGlmaWVkRmlsZVJlc3BvbnNlW10pIHtcclxuICAgIHJlc2V0UHJldmlld1RhYigpO1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbTxNb2RlbHMuTW9kaWZpZWRGaWxlUmVzcG9uc2U+KGNoYW5nZXMpXHJcbiAgICAgICAgLmNvbmNhdE1hcChjaGFuZ2UgPT4gPFByb21pc2U8QXRvbS5UZXh0RWRpdG9yPj48YW55PmF0b20ud29ya3NwYWNlLm9wZW4oY2hhbmdlLkZpbGVOYW1lLCB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIC50aGVuKGVkaXRvciA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNldFByZXZpZXdUYWIoKTtcclxuICAgICAgICAgICAgICAgIGFwcGx5Q2hhbmdlcyhlZGl0b3IsIGNoYW5nZSk7XHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcclxufVxyXG4iLCJjb25zdCBSYW5nZSA9IHJlcXVpcmUoXCJhdG9tXCIpLlJhbmdlO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlDaGFuZ2VzKGVkaXRvciwgcmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHJlc3BvbnNlLkNoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZWRpdG9yLmdldEJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBjaGVja3BvaW50ID0gYnVmZmVyLmNyZWF0ZUNoZWNrcG9pbnQoKTtcbiAgICAgICAgcmVzcG9uc2UuQ2hhbmdlcy5mb3JFYWNoKChjaGFuZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gbmV3IFJhbmdlKFtjaGFuZ2UuU3RhcnRMaW5lLCBjaGFuZ2UuU3RhcnRDb2x1bW5dLCBbY2hhbmdlLkVuZExpbmUsIGNoYW5nZS5FbmRDb2x1bW5dKTtcbiAgICAgICAgICAgIGJ1ZmZlci5zZXRUZXh0SW5SYW5nZShyYW5nZSwgY2hhbmdlLk5ld1RleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnVmZmVyLmdyb3VwQ2hhbmdlc1NpbmNlQ2hlY2twb2ludChjaGVja3BvaW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzcG9uc2UuQnVmZmVyKSB7XG4gICAgICAgIGVkaXRvci5zZXRUZXh0KHJlc3BvbnNlLkJ1ZmZlcik7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzZXRQcmV2aWV3VGFiKCkge1xuICAgIGNvbnN0IHBhbmUgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpKTtcbiAgICBpZiAocGFuZSkge1xuICAgICAgICBjb25zdCB0aXRsZSA9IHBhbmUucXVlcnlTZWxlY3RvcihcIi50aXRsZS50ZW1wXCIpO1xuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgIHRpdGxlLmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZW1wXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhYiA9IHBhbmUucXVlcnlTZWxlY3RvcihcIi5wcmV2aWV3LXRhYi5hY3RpdmVcIik7XG4gICAgICAgIGlmICh0YWIpIHtcbiAgICAgICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwicHJldmlldy10YWJcIik7XG4gICAgICAgICAgICB0YWIuaXNQcmV2aWV3VGFiID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlBbGxDaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICByZXNldFByZXZpZXdUYWIoKTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tKGNoYW5nZXMpXG4gICAgICAgIC5jb25jYXRNYXAoY2hhbmdlID0+IGF0b20ud29ya3NwYWNlLm9wZW4oY2hhbmdlLkZpbGVOYW1lLCB1bmRlZmluZWQpXG4gICAgICAgIC50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIHJlc2V0UHJldmlld1RhYigpO1xuICAgICAgICBhcHBseUNoYW5nZXMoZWRpdG9yLCBjaGFuZ2UpO1xuICAgIH0pKVxuICAgICAgICAuc3Vic2NyaWJlKCk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
