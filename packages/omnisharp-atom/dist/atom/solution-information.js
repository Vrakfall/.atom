"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.solutionInformation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tsDisposables = require("ts-disposables");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _solutionStatusView = require("../views/solution-status-view");

var _solutionManager = require("../server/solution-manager");

var _omnisharpClient = require("omnisharp-client");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SolutionInformation = function () {
    function SolutionInformation() {
        _classCallCheck(this, SolutionInformation);

        this.selectedIndex = 0;
        this.required = true;
        this.title = "Solution Information";
        this.description = "Monitors each running solution and offers the ability to start/restart/stop a solution.";
    }

    _createClass(SolutionInformation, [{
        key: "activate",
        value: function activate() {
            var _this = this;

            this.disposable = new _tsDisposables.CompositeDisposable();
            this.disposable.add(_solutionManager.SolutionManager.activeSolution.subscribe(function (sln) {
                _this.selectedIndex = _lodash2.default.findIndex(_solutionManager.SolutionManager.activeSolutions, { index: sln.model.index });
                _this.updateSelectedItem(_this.selectedIndex);
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:next-solution-status", function () {
                _this.updateSelectedItem(_this.selectedIndex + 1);
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:solution-status", function () {
                if (_this.cardDisposable) {
                    _this.cardDisposable.dispose();
                } else {
                    _this.cardDisposable = _this.createSolutionCard();
                }
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:previous-solution-status", function () {
                _this.updateSelectedItem(_this.selectedIndex - 1);
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:stop-server", function () {
                _solutionManager.SolutionManager.activeSolutions[_this.selectedIndex].dispose();
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:start-server", function () {
                _solutionManager.SolutionManager.activeSolutions[_this.selectedIndex].connect();
            }));
            this.disposable.add(atom.commands.add("atom-workspace", "omnisharp-atom:restart-server", function () {
                var solution = _solutionManager.SolutionManager.activeSolutions[_this.selectedIndex];
                solution.state.filter(function (z) {
                    return z === _omnisharpClient.DriverState.Disconnected;
                }).take(1).delay(500).subscribe(function () {
                    solution.connect();
                });
                solution.dispose();
            }));
        }
    }, {
        key: "updateSelectedItem",
        value: function updateSelectedItem(index) {
            var _this2 = this;

            if (index < 0) index = _solutionManager.SolutionManager.activeSolutions.length - 1;
            if (index >= _solutionManager.SolutionManager.activeSolutions.length) index = 0;
            if (this.selectedIndex !== index) this.selectedIndex = index;
            if (this.card) {
                if (this.selectedDisposable) {
                    this.selectedDisposable.dispose();
                }
                this.card.updateCard(_solutionManager.SolutionManager.activeSolutions[this.selectedIndex].model, _solutionManager.SolutionManager.activeSolutions.length);
                this.selectedDisposable = _tsDisposables.Disposable.of(_solutionManager.SolutionManager.activeSolutions[this.selectedIndex].state.subscribe(function () {
                    if (_this2.card) {
                        _this2.card.updateCard(_solutionManager.SolutionManager.activeSolutions[_this2.selectedIndex].model, _solutionManager.SolutionManager.activeSolutions.length);
                    }
                }));
            }
        }
    }, {
        key: "createSolutionCard",
        value: function createSolutionCard() {
            var _this3 = this;

            var disposable = new _tsDisposables.CompositeDisposable();
            this.disposable.add(disposable);
            var workspace = atom.views.getView(atom.workspace);
            if (!this.container) {
                var container = this.container = document.createElement("div");
                workspace.appendChild(container);
            }
            if (_solutionManager.SolutionManager.activeSolutions.length) {
                var element = new _solutionStatusView.SolutionStatusCard();
                element.attachTo = ".projects-icon";
                element.updateCard(_solutionManager.SolutionManager.activeSolutions[this.selectedIndex].model, _solutionManager.SolutionManager.activeSolutions.length);
                this.container.appendChild(element);
                this.card = element;
                disposable.add(atom.commands.add("atom-workspace", "core:cancel", function () {
                    disposable.dispose();
                    _this3.disposable.remove(disposable);
                }));
                disposable.add(_tsDisposables.Disposable.create(function () {
                    if (_this3.card) _this3.card.remove();
                    _this3.card = null;
                    _this3.cardDisposable = null;
                }));
            } else {
                if (this.cardDisposable) {
                    this.cardDisposable.dispose();
                }
                disposable.add(_tsDisposables.Disposable.create(function () {
                    if (_this3.card) _this3.card.remove();
                    _this3.card = null;
                    _this3.cardDisposable = null;
                }));
            }
            return disposable;
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this.disposable.dispose();
        }
    }]);

    return SolutionInformation;
}();

var solutionInformation = exports.solutionInformation = new SolutionInformation();
//# sourceMappingURL=data:application/json;base64,
